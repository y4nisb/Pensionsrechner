{"ast":null,"code":"\"use strict\";\n\n// This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\n// same way, its implementation is shared here.\nclass EventModifierMixinImpl {\n  // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\n  // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\n  // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\n  // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\n  // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\n  // extra checking for validity.\n  getModifierState(keyArg) {\n    return Boolean(this[`modifier${keyArg}`]);\n  }\n}\nexports.implementation = EventModifierMixinImpl;","map":{"version":3,"names":["EventModifierMixinImpl","getModifierState","keyArg","Boolean","exports","implementation"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js"],"sourcesContent":["\"use strict\";\r\n\r\n// This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\r\n// same way, its implementation is shared here.\r\n\r\nclass EventModifierMixinImpl {\r\n  // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\r\n  // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\r\n  // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\r\n  // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\r\n  // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\r\n  // extra checking for validity.\r\n  getModifierState(keyArg) {\r\n    return Boolean(this[`modifier${keyArg}`]);\r\n  }\r\n}\r\n\r\nexports.implementation = EventModifierMixinImpl;\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AAEA,MAAMA,sBAAsB,CAAC;EAC3B;EACA;EACA;EACA;EACA;EACA;EACAC,gBAAgBA,CAACC,MAAM,EAAE;IACvB,OAAOC,OAAO,CAAC,IAAI,CAAE,WAAUD,MAAO,EAAC,CAAC,CAAC;EAC3C;AACF;AAEAE,OAAO,CAACC,cAAc,GAAGL,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}