{"ast":null,"code":"\"use strict\";\n\nconst parse = require(\"./parser.js\");\nconst serialize = require(\"./serializer.js\");\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints\n} = require(\"./utils.js\");\nmodule.exports = class MIMEType {\n  constructor(string) {\n    string = String(string);\n    const result = parse(string);\n    if (result === null) {\n      throw new Error(`Could not parse MIME type string \"${string}\"`);\n    }\n    this._type = result.type;\n    this._subtype = result.subtype;\n    this._parameters = new MIMETypeParameters(result.parameters);\n  }\n  static parse(string) {\n    try {\n      return new this(string);\n    } catch (e) {\n      return null;\n    }\n  }\n  get essence() {\n    return `${this.type}/${this.subtype}`;\n  }\n  get type() {\n    return this._type;\n  }\n  set type(value) {\n    value = asciiLowercase(String(value));\n    if (value.length === 0) {\n      throw new Error(\"Invalid type: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);\n    }\n    this._type = value;\n  }\n  get subtype() {\n    return this._subtype;\n  }\n  set subtype(value) {\n    value = asciiLowercase(String(value));\n    if (value.length === 0) {\n      throw new Error(\"Invalid subtype: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);\n    }\n    this._subtype = value;\n  }\n  get parameters() {\n    return this._parameters;\n  }\n  toString() {\n    // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\n    // this class's interface is identical.\n    return serialize(this);\n  }\n  isJavaScript() {\n    let {\n      allowParameters = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switch (this._type) {\n      case \"text\":\n        {\n          switch (this._subtype) {\n            case \"ecmascript\":\n            case \"javascript\":\n            case \"javascript1.0\":\n            case \"javascript1.1\":\n            case \"javascript1.2\":\n            case \"javascript1.3\":\n            case \"javascript1.4\":\n            case \"javascript1.5\":\n            case \"jscript\":\n            case \"livescript\":\n            case \"x-ecmascript\":\n            case \"x-javascript\":\n              {\n                return allowParameters || this._parameters.size === 0;\n              }\n            default:\n              {\n                return false;\n              }\n          }\n        }\n      case \"application\":\n        {\n          switch (this._subtype) {\n            case \"ecmascript\":\n            case \"javascript\":\n            case \"x-ecmascript\":\n            case \"x-javascript\":\n              {\n                return allowParameters || this._parameters.size === 0;\n              }\n            default:\n              {\n                return false;\n              }\n          }\n        }\n      default:\n        {\n          return false;\n        }\n    }\n  }\n  isXML() {\n    return this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\") || this._subtype.endsWith(\"+xml\");\n  }\n  isHTML() {\n    return this._subtype === \"html\" && this._type === \"text\";\n  }\n};\nclass MIMETypeParameters {\n  constructor(map) {\n    this._map = map;\n  }\n  get size() {\n    return this._map.size;\n  }\n  get(name) {\n    name = asciiLowercase(String(name));\n    return this._map.get(name);\n  }\n  has(name) {\n    name = asciiLowercase(String(name));\n    return this._map.has(name);\n  }\n  set(name, value) {\n    name = asciiLowercase(String(name));\n    value = String(value);\n    if (!solelyContainsHTTPTokenCodePoints(name)) {\n      throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`);\n    }\n    if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\n      throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are ` + `valid.`);\n    }\n    return this._map.set(name, value);\n  }\n  clear() {\n    this._map.clear();\n  }\n  delete(name) {\n    name = asciiLowercase(String(name));\n    return this._map.delete(name);\n  }\n  forEach(callbackFn, thisArg) {\n    this._map.forEach(callbackFn, thisArg);\n  }\n  keys() {\n    return this._map.keys();\n  }\n  values() {\n    return this._map.values();\n  }\n  entries() {\n    return this._map.entries();\n  }\n  [Symbol.iterator]() {\n    return this._map[Symbol.iterator]();\n  }\n}","map":{"version":3,"names":["parse","require","serialize","asciiLowercase","solelyContainsHTTPTokenCodePoints","soleyContainsHTTPQuotedStringTokenCodePoints","module","exports","MIMEType","constructor","string","String","result","Error","_type","type","_subtype","subtype","_parameters","MIMETypeParameters","parameters","e","essence","value","length","toString","isJavaScript","allowParameters","arguments","undefined","size","isXML","endsWith","isHTML","map","_map","get","name","has","set","clear","delete","forEach","callbackFn","thisArg","keys","values","entries","Symbol","iterator"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/whatwg-mimetype/lib/mime-type.js"],"sourcesContent":["\"use strict\";\r\nconst parse = require(\"./parser.js\");\r\nconst serialize = require(\"./serializer.js\");\r\nconst {\r\n  asciiLowercase,\r\n  solelyContainsHTTPTokenCodePoints,\r\n  soleyContainsHTTPQuotedStringTokenCodePoints\r\n} = require(\"./utils.js\");\r\n\r\nmodule.exports = class MIMEType {\r\n  constructor(string) {\r\n    string = String(string);\r\n    const result = parse(string);\r\n    if (result === null) {\r\n      throw new Error(`Could not parse MIME type string \"${string}\"`);\r\n    }\r\n\r\n    this._type = result.type;\r\n    this._subtype = result.subtype;\r\n    this._parameters = new MIMETypeParameters(result.parameters);\r\n  }\r\n\r\n  static parse(string) {\r\n    try {\r\n      return new this(string);\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  get essence() {\r\n    return `${this.type}/${this.subtype}`;\r\n  }\r\n\r\n  get type() {\r\n    return this._type;\r\n  }\r\n\r\n  set type(value) {\r\n    value = asciiLowercase(String(value));\r\n\r\n    if (value.length === 0) {\r\n      throw new Error(\"Invalid type: must be a non-empty string\");\r\n    }\r\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\r\n      throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);\r\n    }\r\n\r\n    this._type = value;\r\n  }\r\n\r\n  get subtype() {\r\n    return this._subtype;\r\n  }\r\n\r\n  set subtype(value) {\r\n    value = asciiLowercase(String(value));\r\n\r\n    if (value.length === 0) {\r\n      throw new Error(\"Invalid subtype: must be a non-empty string\");\r\n    }\r\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\r\n      throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);\r\n    }\r\n\r\n    this._subtype = value;\r\n  }\r\n\r\n  get parameters() {\r\n    return this._parameters;\r\n  }\r\n\r\n  toString() {\r\n    // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\r\n    // this class's interface is identical.\r\n    return serialize(this);\r\n  }\r\n\r\n  isJavaScript({ allowParameters = false } = {}) {\r\n    switch (this._type) {\r\n      case \"text\": {\r\n        switch (this._subtype) {\r\n          case \"ecmascript\":\r\n          case \"javascript\":\r\n          case \"javascript1.0\":\r\n          case \"javascript1.1\":\r\n          case \"javascript1.2\":\r\n          case \"javascript1.3\":\r\n          case \"javascript1.4\":\r\n          case \"javascript1.5\":\r\n          case \"jscript\":\r\n          case \"livescript\":\r\n          case \"x-ecmascript\":\r\n          case \"x-javascript\": {\r\n            return allowParameters || this._parameters.size === 0;\r\n          }\r\n          default: {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      case \"application\": {\r\n        switch (this._subtype) {\r\n          case \"ecmascript\":\r\n          case \"javascript\":\r\n          case \"x-ecmascript\":\r\n          case \"x-javascript\": {\r\n            return allowParameters || this._parameters.size === 0;\r\n          }\r\n          default: {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      default: {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  isXML() {\r\n    return (this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\")) ||\r\n           this._subtype.endsWith(\"+xml\");\r\n  }\r\n  isHTML() {\r\n    return this._subtype === \"html\" && this._type === \"text\";\r\n  }\r\n};\r\n\r\nclass MIMETypeParameters {\r\n  constructor(map) {\r\n    this._map = map;\r\n  }\r\n\r\n  get size() {\r\n    return this._map.size;\r\n  }\r\n\r\n  get(name) {\r\n    name = asciiLowercase(String(name));\r\n    return this._map.get(name);\r\n  }\r\n\r\n  has(name) {\r\n    name = asciiLowercase(String(name));\r\n    return this._map.has(name);\r\n  }\r\n\r\n  set(name, value) {\r\n    name = asciiLowercase(String(name));\r\n    value = String(value);\r\n\r\n    if (!solelyContainsHTTPTokenCodePoints(name)) {\r\n      throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`);\r\n    }\r\n    if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\r\n      throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are ` +\r\n                      `valid.`);\r\n    }\r\n\r\n    return this._map.set(name, value);\r\n  }\r\n\r\n  clear() {\r\n    this._map.clear();\r\n  }\r\n\r\n  delete(name) {\r\n    name = asciiLowercase(String(name));\r\n    return this._map.delete(name);\r\n  }\r\n\r\n  forEach(callbackFn, thisArg) {\r\n    this._map.forEach(callbackFn, thisArg);\r\n  }\r\n\r\n  keys() {\r\n    return this._map.keys();\r\n  }\r\n\r\n  values() {\r\n    return this._map.values();\r\n  }\r\n\r\n  entries() {\r\n    return this._map.entries();\r\n  }\r\n\r\n  [Symbol.iterator]() {\r\n    return this._map[Symbol.iterator]();\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}