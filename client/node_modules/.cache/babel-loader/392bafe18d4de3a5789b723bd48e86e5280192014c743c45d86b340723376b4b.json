{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n  return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\nSourceMapConsumer.fromSourceMap = function (aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n};\n\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n    return this.__generatedMappings;\n  }\n});\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n    return this.__originalMappings;\n  }\n});\nSourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n  var c = aStr.charAt(index);\n  return c === \";\" || c === \",\";\n};\n\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\nSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  throw new Error(\"Subclasses must implement _parseMappings\");\n};\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\r\n * Iterate over each mapping between an original source/line/column and a\r\n * generated line/column in this source map.\r\n *\r\n * @param Function aCallback\r\n *        The function that is called with each mapping.\r\n * @param Object aContext\r\n *        Optional. If specified, this object will be the value of `this` every\r\n *        time that `aCallback` is called.\r\n * @param aOrder\r\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\r\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\r\n *        iterate over the mappings sorted by the generated file's line/column\r\n *        order or the original's source/line/column order, respectively. Defaults to\r\n *        `SourceMapConsumer.GENERATED_ORDER`.\r\n */\nSourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n  var context = aContext || null;\n  var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n  var mappings;\n  switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n  }\n  var sourceRoot = this.sourceRoot;\n  mappings.map(function (mapping) {\n    var source = mapping.source === null ? null : this._sources.at(mapping.source);\n    source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n    return {\n      source: source,\n      generatedLine: mapping.generatedLine,\n      generatedColumn: mapping.generatedColumn,\n      originalLine: mapping.originalLine,\n      originalColumn: mapping.originalColumn,\n      name: mapping.name === null ? null : this._names.at(mapping.name)\n    };\n  }, this).forEach(aCallback, context);\n};\n\n/**\r\n * Returns all generated line and column information for the original source,\r\n * line, and column provided. If no column is provided, returns all mappings\r\n * corresponding to a either the line we are searching for or the next\r\n * closest line that has any mappings. Otherwise, returns all mappings\r\n * corresponding to the given line and either the column we are searching for\r\n * or the next closest column that has any offsets.\r\n *\r\n * The only argument is an object with the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number is 1-based.\r\n *   - column: Optional. the column number in the original source.\r\n *    The column number is 0-based.\r\n *\r\n * and an array of objects is returned, each with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *    line number is 1-based.\r\n *   - column: The column number in the generated source, or null.\r\n *    The column number is 0-based.\r\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n  var line = util.getArg(aArgs, 'line');\n\n  // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n  // returns the index of the closest mapping less than the needle. By\n  // setting needle.originalColumn to 0, we thus find the last mapping for\n  // the given line, provided such a mapping exists.\n  var needle = {\n    source: util.getArg(aArgs, 'source'),\n    originalLine: line,\n    originalColumn: util.getArg(aArgs, 'column', 0)\n  };\n  needle.source = this._findSourceIndex(needle.source);\n  if (needle.source < 0) {\n    return [];\n  }\n  var mappings = [];\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n    if (aArgs.column === undefined) {\n      var originalLine = mapping.originalLine;\n\n      // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we found. Since\n      // mappings are sorted, this is guaranteed to find all mappings for\n      // the line we found.\n      while (mapping && mapping.originalLine === originalLine) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    } else {\n      var originalColumn = mapping.originalColumn;\n\n      // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we were searching for.\n      // Since mappings are sorted, this is guaranteed to find all mappings for\n      // the line we are searching for.\n      while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    }\n  }\n  return mappings;\n};\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\r\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\r\n * query for information about the original file positions by giving it a file\r\n * position in the generated source.\r\n *\r\n * The first parameter is the raw source map (either as a JSON string, or\r\n * already parsed to an object). According to the spec, source maps have the\r\n * following attributes:\r\n *\r\n *   - version: Which version of the source map spec this map is following.\r\n *   - sources: An array of URLs to the original source files.\r\n *   - names: An array of identifiers which can be referrenced by individual mappings.\r\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\r\n *   - sourcesContent: Optional. An array of contents of the original source files.\r\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\r\n *   - file: Optional. The generated file this source map is associated with.\r\n *\r\n * Here is an example source map, taken from the source map spec[0]:\r\n *\r\n *     {\r\n *       version : 3,\r\n *       file: \"out.js\",\r\n *       sourceRoot : \"\",\r\n *       sources: [\"foo.js\", \"bar.js\"],\r\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\r\n *       mappings: \"AA,AB;;ABCDE;\"\r\n *     }\r\n *\r\n * The second parameter, if given, is a string whose value is the URL\r\n * at which the source map was found.  This URL is used to compute the\r\n * sources array.\r\n *\r\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\r\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n  sources = sources.map(String)\n  // Some source maps produce relative source paths like \"./foo.js\" instead of\n  // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n  // See bugzil.la/1090768.\n  .map(util.normalize)\n  // Always ensure that absolute sources are internally stored relative to\n  // the source root, if the source root is absolute. Not doing this would\n  // be particularly problematic when the source root is a prefix of the\n  // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n  .map(function (source) {\n    return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n  });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\r\n * Utility function to find the index of a source.  Returns -1 if not\r\n * found.\r\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function (aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\r\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\r\n *\r\n * @param SourceMapGenerator aSourceMap\r\n *        The source map that will be consumed.\r\n * @param String aSourceMapURL\r\n *        The URL at which the source map can be found (optional)\r\n * @returns BasicSourceMapConsumer\r\n */\nBasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n  var smc = Object.create(BasicSourceMapConsumer.prototype);\n  var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n  var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n  smc.sourceRoot = aSourceMap._sourceRoot;\n  smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);\n  smc.file = aSourceMap._file;\n  smc._sourceMapURL = aSourceMapURL;\n  smc._absoluteSources = smc._sources.toArray().map(function (s) {\n    return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n  });\n\n  // Because we are modifying the entries (by converting string sources and\n  // names to indices into the sources and names ArraySets), we have to make\n  // a copy of the entry or else bad things happen. Shared mutable state\n  // strikes again! See github issue #191.\n\n  var generatedMappings = aSourceMap._mappings.toArray().slice();\n  var destGeneratedMappings = smc.__generatedMappings = [];\n  var destOriginalMappings = smc.__originalMappings = [];\n  for (var i = 0, length = generatedMappings.length; i < length; i++) {\n    var srcMapping = generatedMappings[i];\n    var destMapping = new Mapping();\n    destMapping.generatedLine = srcMapping.generatedLine;\n    destMapping.generatedColumn = srcMapping.generatedColumn;\n    if (srcMapping.source) {\n      destMapping.source = sources.indexOf(srcMapping.source);\n      destMapping.originalLine = srcMapping.originalLine;\n      destMapping.originalColumn = srcMapping.originalColumn;\n      if (srcMapping.name) {\n        destMapping.name = names.indexOf(srcMapping.name);\n      }\n      destOriginalMappings.push(destMapping);\n    }\n    destGeneratedMappings.push(destMapping);\n  }\n  quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n  return smc;\n};\n\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\r\n * The list of original sources.\r\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\r\n * Provide the JIT with a nice shape / hidden class.\r\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\nBasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  var generatedLine = 1;\n  var previousGeneratedColumn = 0;\n  var previousOriginalLine = 0;\n  var previousOriginalColumn = 0;\n  var previousSource = 0;\n  var previousName = 0;\n  var length = aStr.length;\n  var index = 0;\n  var cachedSegments = {};\n  var temp = {};\n  var originalMappings = [];\n  var generatedMappings = [];\n  var mapping, str, segment, end, value;\n  while (index < length) {\n    if (aStr.charAt(index) === ';') {\n      generatedLine++;\n      index++;\n      previousGeneratedColumn = 0;\n    } else if (aStr.charAt(index) === ',') {\n      index++;\n    } else {\n      mapping = new Mapping();\n      mapping.generatedLine = generatedLine;\n\n      // Because each offset is encoded relative to the previous one,\n      // many segments often have the same encoding. We can exploit this\n      // fact by caching the parsed variable length fields of each segment,\n      // allowing us to avoid a second parse if we encounter the same\n      // segment again.\n      for (end = index; end < length; end++) {\n        if (this._charIsMappingSeparator(aStr, end)) {\n          break;\n        }\n      }\n      str = aStr.slice(index, end);\n      segment = cachedSegments[str];\n      if (segment) {\n        index += str.length;\n      } else {\n        segment = [];\n        while (index < end) {\n          base64VLQ.decode(aStr, index, temp);\n          value = temp.value;\n          index = temp.rest;\n          segment.push(value);\n        }\n        if (segment.length === 2) {\n          throw new Error('Found a source, but no line and column');\n        }\n        if (segment.length === 3) {\n          throw new Error('Found a source and line, but no column');\n        }\n        cachedSegments[str] = segment;\n      }\n\n      // Generated column.\n      mapping.generatedColumn = previousGeneratedColumn + segment[0];\n      previousGeneratedColumn = mapping.generatedColumn;\n      if (segment.length > 1) {\n        // Original source.\n        mapping.source = previousSource + segment[1];\n        previousSource += segment[1];\n\n        // Original line.\n        mapping.originalLine = previousOriginalLine + segment[2];\n        previousOriginalLine = mapping.originalLine;\n        // Lines are stored 0-based\n        mapping.originalLine += 1;\n\n        // Original column.\n        mapping.originalColumn = previousOriginalColumn + segment[3];\n        previousOriginalColumn = mapping.originalColumn;\n        if (segment.length > 4) {\n          // Original name.\n          mapping.name = previousName + segment[4];\n          previousName += segment[4];\n        }\n      }\n      generatedMappings.push(mapping);\n      if (typeof mapping.originalLine === 'number') {\n        originalMappings.push(mapping);\n      }\n    }\n  }\n  quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n  this.__generatedMappings = generatedMappings;\n  quickSort(originalMappings, util.compareByOriginalPositions);\n  this.__originalMappings = originalMappings;\n};\n\n/**\r\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\r\n * we are searching for in the given \"haystack\" of mappings.\r\n */\nBasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n  // To return the position we are searching for, we must first find the\n  // mapping for the given position and then return the opposite position it\n  // points to. Because the mappings are sorted, we can use binary search to\n  // find the best mapping.\n\n  if (aNeedle[aLineName] <= 0) {\n    throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);\n  }\n  if (aNeedle[aColumnName] < 0) {\n    throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);\n  }\n  return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n};\n\n/**\r\n * Compute the last column for each generated mapping. The last column is\r\n * inclusive.\r\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {\n  for (var index = 0; index < this._generatedMappings.length; ++index) {\n    var mapping = this._generatedMappings[index];\n\n    // Mappings do not contain a field for the last generated columnt. We\n    // can come up with an optimistic estimate, however, by assuming that\n    // mappings are contiguous (i.e. given two consecutive mappings, the\n    // first mapping ends where the second one starts).\n    if (index + 1 < this._generatedMappings.length) {\n      var nextMapping = this._generatedMappings[index + 1];\n      if (mapping.generatedLine === nextMapping.generatedLine) {\n        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n        continue;\n      }\n    }\n\n    // The last mapping for each line spans the entire line.\n    mapping.lastGeneratedColumn = Infinity;\n  }\n};\n\n/**\r\n * Returns the original source, line, and column information for the generated\r\n * source's line and column positions provided. The only argument is an object\r\n * with the following properties:\r\n *\r\n *   - line: The line number in the generated source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the generated source.  The column\r\n *     number is 0-based.\r\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\r\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\r\n *     closest element that is smaller than or greater than the one we are\r\n *     searching for, respectively, if the exact element cannot be found.\r\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - source: The original source file, or null.\r\n *   - line: The line number in the original source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the original source, or null.  The\r\n *     column number is 0-based.\r\n *   - name: The original identifier, or null.\r\n */\nBasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  };\n  var index = this._findMapping(needle, this._generatedMappings, \"generatedLine\", \"generatedColumn\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n  if (index >= 0) {\n    var mapping = this._generatedMappings[index];\n    if (mapping.generatedLine === needle.generatedLine) {\n      var source = util.getArg(mapping, 'source', null);\n      if (source !== null) {\n        source = this._sources.at(source);\n        source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n      }\n      var name = util.getArg(mapping, 'name', null);\n      if (name !== null) {\n        name = this._names.at(name);\n      }\n      return {\n        source: source,\n        line: util.getArg(mapping, 'originalLine', null),\n        column: util.getArg(mapping, 'originalColumn', null),\n        name: name\n      };\n    }\n  }\n  return {\n    source: null,\n    line: null,\n    column: null,\n    name: null\n  };\n};\n\n/**\r\n * Return true if we have the source content for every source in the source\r\n * map, false otherwise.\r\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {\n  if (!this.sourcesContent) {\n    return false;\n  }\n  return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n    return sc == null;\n  });\n};\n\n/**\r\n * Returns the original source content. The only argument is the url of the\r\n * original source file. Returns null if no original source content is\r\n * available.\r\n */\nBasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  if (!this.sourcesContent) {\n    return null;\n  }\n  var index = this._findSourceIndex(aSource);\n  if (index >= 0) {\n    return this.sourcesContent[index];\n  }\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n  var url;\n  if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n    // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n    // many users. We can help them out when they expect file:// URIs to\n    // behave like it would if they were running a local HTTP server. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n    var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n    if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n    }\n    if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n      return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n    }\n  }\n\n  // This function is used recursively from\n  // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n  // don't want to throw if we can't find the source - we just want to\n  // return null, so we provide a flag to exit gracefully.\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n  }\n};\n\n/**\r\n * Returns the generated line and column information for the original source,\r\n * line, and column positions provided. The only argument is an object with\r\n * the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the original source.  The column\r\n *     number is 0-based.\r\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\r\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\r\n *     closest element that is smaller than or greater than the one we are\r\n *     searching for, respectively, if the exact element cannot be found.\r\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the generated source, or null.\r\n *     The column number is 0-based.\r\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {\n  var source = util.getArg(aArgs, 'source');\n  source = this._findSourceIndex(source);\n  if (source < 0) {\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n  var needle = {\n    source: source,\n    originalLine: util.getArg(aArgs, 'line'),\n    originalColumn: util.getArg(aArgs, 'column')\n  };\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n    if (mapping.source === needle.source) {\n      return {\n        line: util.getArg(mapping, 'generatedLine', null),\n        column: util.getArg(mapping, 'generatedColumn', null),\n        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n      };\n    }\n  }\n  return {\n    line: null,\n    column: null,\n    lastColumn: null\n  };\n};\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\r\n * An IndexedSourceMapConsumer instance represents a parsed source map which\r\n * we can query for information. It differs from BasicSourceMapConsumer in\r\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\r\n * input.\r\n *\r\n * The first parameter is a raw source map (either as a JSON string, or already\r\n * parsed to an object). According to the spec for indexed source maps, they\r\n * have the following attributes:\r\n *\r\n *   - version: Which version of the source map spec this map is following.\r\n *   - file: Optional. The generated file this source map is associated with.\r\n *   - sections: A list of section definitions.\r\n *\r\n * Each value under the \"sections\" field has two fields:\r\n *   - offset: The offset into the original specified at which this section\r\n *       begins to apply, defined as an object with a \"line\" and \"column\"\r\n *       field.\r\n *   - map: A source map definition. This source map could also be indexed,\r\n *       but doesn't have to be.\r\n *\r\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\r\n * specifying a URL to retrieve a source map from, but that's currently\r\n * unsupported.\r\n *\r\n * Here's an example source map, taken from the source map spec[0], but\r\n * modified to omit a section which uses the \"url\" field.\r\n *\r\n *  {\r\n *    version : 3,\r\n *    file: \"app.js\",\r\n *    sections: [{\r\n *      offset: {line:100, column:10},\r\n *      map: {\r\n *        version : 3,\r\n *        file: \"section.js\",\r\n *        sources: [\"foo.js\", \"bar.js\"],\r\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\r\n *        mappings: \"AAAA,E;;ABCDE;\"\r\n *      }\r\n *    }],\r\n *  }\r\n *\r\n * The second parameter, if given, is a string whose value is the URL\r\n * at which the source map was found.  This URL is used to compute the\r\n * sources array.\r\n *\r\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\r\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    };\n  });\n}\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\r\n * The list of original sources.\r\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\r\n * Returns the original source, line, and column information for the generated\r\n * source's line and column positions provided. The only argument is an object\r\n * with the following properties:\r\n *\r\n *   - line: The line number in the generated source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the generated source.  The column\r\n *     number is 0-based.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - source: The original source file, or null.\r\n *   - line: The line number in the original source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the original source, or null.  The\r\n *     column number is 0-based.\r\n *   - name: The original identifier, or null.\r\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  };\n\n  // Find the section containing the generated position we're trying to map\n  // to an original position.\n  var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {\n    var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n    if (cmp) {\n      return cmp;\n    }\n    return needle.generatedColumn - section.generatedOffset.generatedColumn;\n  });\n  var section = this._sections[sectionIndex];\n  if (!section) {\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n  return section.consumer.originalPositionFor({\n    line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n    column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n    bias: aArgs.bias\n  });\n};\n\n/**\r\n * Return true if we have the source content for every source in the source\r\n * map, false otherwise.\r\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n  return this._sections.every(function (s) {\n    return s.consumer.hasContentsOfAllSources();\n  });\n};\n\n/**\r\n * Returns the original source content. The only argument is the url of the\r\n * original source file. Returns null if no original source content is\r\n * available.\r\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var content = section.consumer.sourceContentFor(aSource, true);\n    if (content) {\n      return content;\n    }\n  }\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n};\n\n/**\r\n * Returns the generated line and column information for the original source,\r\n * line, and column positions provided. The only argument is an object with\r\n * the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the original source.  The column\r\n *     number is 0-based.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *     line number is 1-based. \r\n *   - column: The column number in the generated source, or null.\r\n *     The column number is 0-based.\r\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n\n    // Only consider this section if the requested source is in the list of\n    // sources of the consumer.\n    if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n      continue;\n    }\n    var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n    if (generatedPosition) {\n      var ret = {\n        line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n        column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n      };\n      return ret;\n    }\n  }\n  return {\n    line: null,\n    column: null\n  };\n};\n\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\nIndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  this.__generatedMappings = [];\n  this.__originalMappings = [];\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var sectionMappings = section.consumer._generatedMappings;\n    for (var j = 0; j < sectionMappings.length; j++) {\n      var mapping = sectionMappings[j];\n      var source = section.consumer._sources.at(mapping.source);\n      source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n      this._sources.add(source);\n      source = this._sources.indexOf(source);\n      var name = null;\n      if (mapping.name) {\n        name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n      }\n\n      // The mappings coming from the consumer for the section have\n      // generated positions relative to the start of the section, so we\n      // need to offset them to be relative to the start of the concatenated\n      // generated file.\n      var adjustedMapping = {\n        source: source,\n        generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n        generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: name\n      };\n      this.__generatedMappings.push(adjustedMapping);\n      if (typeof adjustedMapping.originalLine === 'number') {\n        this.__originalMappings.push(adjustedMapping);\n      }\n    }\n  }\n  quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n  quickSort(this.__originalMappings, util.compareByOriginalPositions);\n};\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;","map":{"version":3,"names":["util","require","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","aSourceMapURL","sourceMap","parseSourceMapInput","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","fromSourceMap","prototype","_version","__generatedMappings","Object","defineProperty","configurable","enumerable","get","_parseMappings","_mappings","sourceRoot","__originalMappings","_charIsMappingSeparator","SourceMapConsumer_charIsMappingSeparator","aStr","index","c","charAt","SourceMapConsumer_parseMappings","aSourceRoot","Error","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","SourceMapConsumer_eachMapping","aCallback","aContext","aOrder","context","order","mappings","_generatedMappings","_originalMappings","map","mapping","source","_sources","at","computeSourceURL","_sourceMapURL","generatedLine","generatedColumn","originalLine","originalColumn","name","_names","forEach","allGeneratedPositionsFor","SourceMapConsumer_allGeneratedPositionsFor","aArgs","line","getArg","needle","_findSourceIndex","_findMapping","compareByOriginalPositions","column","undefined","push","lastColumn","exports","version","sources","names","sourcesContent","file","normalize","String","isAbsolute","relative","fromArray","_absoluteSources","toArray","s","create","consumer","aSource","relativeSource","has","indexOf","i","length","SourceMapConsumer_fromSourceMap","smc","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","Mapping","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","str","segment","end","value","decode","rest","compareByGeneratedPositionsDeflated","SourceMapConsumer_findMapping","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","SourceMapConsumer_computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","SourceMapConsumer_originalPositionFor","hasContentsOfAllSources","BasicSourceMapConsumer_hasContentsOfAllSources","size","some","sc","sourceContentFor","SourceMapConsumer_sourceContentFor","nullOnMissing","url","urlParse","fileUriAbsPath","replace","scheme","path","generatedPositionFor","SourceMapConsumer_generatedPositionFor","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","constructor","j","IndexedSourceMapConsumer_originalPositionFor","sectionIndex","section","cmp","bias","IndexedSourceMapConsumer_hasContentsOfAllSources","every","IndexedSourceMapConsumer_sourceContentFor","content","IndexedSourceMapConsumer_generatedPositionFor","generatedPosition","ret","IndexedSourceMapConsumer_parseMappings","sectionMappings","add","adjustedMapping"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/escodegen/node_modules/source-map/lib/source-map-consumer.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\r\n/*\r\n * Copyright 2011 Mozilla Foundation and contributors\r\n * Licensed under the New BSD license. See LICENSE or:\r\n * http://opensource.org/licenses/BSD-3-Clause\r\n */\r\n\r\nvar util = require('./util');\r\nvar binarySearch = require('./binary-search');\r\nvar ArraySet = require('./array-set').ArraySet;\r\nvar base64VLQ = require('./base64-vlq');\r\nvar quickSort = require('./quick-sort').quickSort;\r\n\r\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\r\n  var sourceMap = aSourceMap;\r\n  if (typeof aSourceMap === 'string') {\r\n    sourceMap = util.parseSourceMapInput(aSourceMap);\r\n  }\r\n\r\n  return sourceMap.sections != null\r\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\r\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\r\n}\r\n\r\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\r\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\r\n}\r\n\r\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\r\nSourceMapConsumer.prototype._version = 3;\r\n\r\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\r\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\r\n// are lazily instantiated, accessed via the `_generatedMappings` and\r\n// `_originalMappings` getters respectively, and we only parse the mappings\r\n// and create these arrays once queried for a source location. We jump through\r\n// these hoops because there can be many thousands of mappings, and parsing\r\n// them is expensive, so we only want to do it if we must.\r\n//\r\n// Each object in the arrays is of the form:\r\n//\r\n//     {\r\n//       generatedLine: The line number in the generated code,\r\n//       generatedColumn: The column number in the generated code,\r\n//       source: The path to the original source file that generated this\r\n//               chunk of code,\r\n//       originalLine: The line number in the original source that\r\n//                     corresponds to this chunk of generated code,\r\n//       originalColumn: The column number in the original source that\r\n//                       corresponds to this chunk of generated code,\r\n//       name: The name of the original symbol which generated this chunk of\r\n//             code.\r\n//     }\r\n//\r\n// All properties except for `generatedLine` and `generatedColumn` can be\r\n// `null`.\r\n//\r\n// `_generatedMappings` is ordered by the generated positions.\r\n//\r\n// `_originalMappings` is ordered by the original positions.\r\n\r\nSourceMapConsumer.prototype.__generatedMappings = null;\r\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: function () {\r\n    if (!this.__generatedMappings) {\r\n      this._parseMappings(this._mappings, this.sourceRoot);\r\n    }\r\n\r\n    return this.__generatedMappings;\r\n  }\r\n});\r\n\r\nSourceMapConsumer.prototype.__originalMappings = null;\r\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: function () {\r\n    if (!this.__originalMappings) {\r\n      this._parseMappings(this._mappings, this.sourceRoot);\r\n    }\r\n\r\n    return this.__originalMappings;\r\n  }\r\n});\r\n\r\nSourceMapConsumer.prototype._charIsMappingSeparator =\r\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\r\n    var c = aStr.charAt(index);\r\n    return c === \";\" || c === \",\";\r\n  };\r\n\r\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\r\nSourceMapConsumer.prototype._parseMappings =\r\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\r\n    throw new Error(\"Subclasses must implement _parseMappings\");\r\n  };\r\n\r\nSourceMapConsumer.GENERATED_ORDER = 1;\r\nSourceMapConsumer.ORIGINAL_ORDER = 2;\r\n\r\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\r\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\r\n\r\n/**\r\n * Iterate over each mapping between an original source/line/column and a\r\n * generated line/column in this source map.\r\n *\r\n * @param Function aCallback\r\n *        The function that is called with each mapping.\r\n * @param Object aContext\r\n *        Optional. If specified, this object will be the value of `this` every\r\n *        time that `aCallback` is called.\r\n * @param aOrder\r\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\r\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\r\n *        iterate over the mappings sorted by the generated file's line/column\r\n *        order or the original's source/line/column order, respectively. Defaults to\r\n *        `SourceMapConsumer.GENERATED_ORDER`.\r\n */\r\nSourceMapConsumer.prototype.eachMapping =\r\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\r\n    var context = aContext || null;\r\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\r\n\r\n    var mappings;\r\n    switch (order) {\r\n    case SourceMapConsumer.GENERATED_ORDER:\r\n      mappings = this._generatedMappings;\r\n      break;\r\n    case SourceMapConsumer.ORIGINAL_ORDER:\r\n      mappings = this._originalMappings;\r\n      break;\r\n    default:\r\n      throw new Error(\"Unknown order of iteration.\");\r\n    }\r\n\r\n    var sourceRoot = this.sourceRoot;\r\n    mappings.map(function (mapping) {\r\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\r\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\r\n      return {\r\n        source: source,\r\n        generatedLine: mapping.generatedLine,\r\n        generatedColumn: mapping.generatedColumn,\r\n        originalLine: mapping.originalLine,\r\n        originalColumn: mapping.originalColumn,\r\n        name: mapping.name === null ? null : this._names.at(mapping.name)\r\n      };\r\n    }, this).forEach(aCallback, context);\r\n  };\r\n\r\n/**\r\n * Returns all generated line and column information for the original source,\r\n * line, and column provided. If no column is provided, returns all mappings\r\n * corresponding to a either the line we are searching for or the next\r\n * closest line that has any mappings. Otherwise, returns all mappings\r\n * corresponding to the given line and either the column we are searching for\r\n * or the next closest column that has any offsets.\r\n *\r\n * The only argument is an object with the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number is 1-based.\r\n *   - column: Optional. the column number in the original source.\r\n *    The column number is 0-based.\r\n *\r\n * and an array of objects is returned, each with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *    line number is 1-based.\r\n *   - column: The column number in the generated source, or null.\r\n *    The column number is 0-based.\r\n */\r\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\r\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\r\n    var line = util.getArg(aArgs, 'line');\r\n\r\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\r\n    // returns the index of the closest mapping less than the needle. By\r\n    // setting needle.originalColumn to 0, we thus find the last mapping for\r\n    // the given line, provided such a mapping exists.\r\n    var needle = {\r\n      source: util.getArg(aArgs, 'source'),\r\n      originalLine: line,\r\n      originalColumn: util.getArg(aArgs, 'column', 0)\r\n    };\r\n\r\n    needle.source = this._findSourceIndex(needle.source);\r\n    if (needle.source < 0) {\r\n      return [];\r\n    }\r\n\r\n    var mappings = [];\r\n\r\n    var index = this._findMapping(needle,\r\n                                  this._originalMappings,\r\n                                  \"originalLine\",\r\n                                  \"originalColumn\",\r\n                                  util.compareByOriginalPositions,\r\n                                  binarySearch.LEAST_UPPER_BOUND);\r\n    if (index >= 0) {\r\n      var mapping = this._originalMappings[index];\r\n\r\n      if (aArgs.column === undefined) {\r\n        var originalLine = mapping.originalLine;\r\n\r\n        // Iterate until either we run out of mappings, or we run into\r\n        // a mapping for a different line than the one we found. Since\r\n        // mappings are sorted, this is guaranteed to find all mappings for\r\n        // the line we found.\r\n        while (mapping && mapping.originalLine === originalLine) {\r\n          mappings.push({\r\n            line: util.getArg(mapping, 'generatedLine', null),\r\n            column: util.getArg(mapping, 'generatedColumn', null),\r\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\r\n          });\r\n\r\n          mapping = this._originalMappings[++index];\r\n        }\r\n      } else {\r\n        var originalColumn = mapping.originalColumn;\r\n\r\n        // Iterate until either we run out of mappings, or we run into\r\n        // a mapping for a different line than the one we were searching for.\r\n        // Since mappings are sorted, this is guaranteed to find all mappings for\r\n        // the line we are searching for.\r\n        while (mapping &&\r\n               mapping.originalLine === line &&\r\n               mapping.originalColumn == originalColumn) {\r\n          mappings.push({\r\n            line: util.getArg(mapping, 'generatedLine', null),\r\n            column: util.getArg(mapping, 'generatedColumn', null),\r\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\r\n          });\r\n\r\n          mapping = this._originalMappings[++index];\r\n        }\r\n      }\r\n    }\r\n\r\n    return mappings;\r\n  };\r\n\r\nexports.SourceMapConsumer = SourceMapConsumer;\r\n\r\n/**\r\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\r\n * query for information about the original file positions by giving it a file\r\n * position in the generated source.\r\n *\r\n * The first parameter is the raw source map (either as a JSON string, or\r\n * already parsed to an object). According to the spec, source maps have the\r\n * following attributes:\r\n *\r\n *   - version: Which version of the source map spec this map is following.\r\n *   - sources: An array of URLs to the original source files.\r\n *   - names: An array of identifiers which can be referrenced by individual mappings.\r\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\r\n *   - sourcesContent: Optional. An array of contents of the original source files.\r\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\r\n *   - file: Optional. The generated file this source map is associated with.\r\n *\r\n * Here is an example source map, taken from the source map spec[0]:\r\n *\r\n *     {\r\n *       version : 3,\r\n *       file: \"out.js\",\r\n *       sourceRoot : \"\",\r\n *       sources: [\"foo.js\", \"bar.js\"],\r\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\r\n *       mappings: \"AA,AB;;ABCDE;\"\r\n *     }\r\n *\r\n * The second parameter, if given, is a string whose value is the URL\r\n * at which the source map was found.  This URL is used to compute the\r\n * sources array.\r\n *\r\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\r\n */\r\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\r\n  var sourceMap = aSourceMap;\r\n  if (typeof aSourceMap === 'string') {\r\n    sourceMap = util.parseSourceMapInput(aSourceMap);\r\n  }\r\n\r\n  var version = util.getArg(sourceMap, 'version');\r\n  var sources = util.getArg(sourceMap, 'sources');\r\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\r\n  // requires the array) to play nice here.\r\n  var names = util.getArg(sourceMap, 'names', []);\r\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\r\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\r\n  var mappings = util.getArg(sourceMap, 'mappings');\r\n  var file = util.getArg(sourceMap, 'file', null);\r\n\r\n  // Once again, Sass deviates from the spec and supplies the version as a\r\n  // string rather than a number, so we use loose equality checking here.\r\n  if (version != this._version) {\r\n    throw new Error('Unsupported version: ' + version);\r\n  }\r\n\r\n  if (sourceRoot) {\r\n    sourceRoot = util.normalize(sourceRoot);\r\n  }\r\n\r\n  sources = sources\r\n    .map(String)\r\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\r\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\r\n    // See bugzil.la/1090768.\r\n    .map(util.normalize)\r\n    // Always ensure that absolute sources are internally stored relative to\r\n    // the source root, if the source root is absolute. Not doing this would\r\n    // be particularly problematic when the source root is a prefix of the\r\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\r\n    .map(function (source) {\r\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\r\n        ? util.relative(sourceRoot, source)\r\n        : source;\r\n    });\r\n\r\n  // Pass `true` below to allow duplicate names and sources. While source maps\r\n  // are intended to be compressed and deduplicated, the TypeScript compiler\r\n  // sometimes generates source maps with duplicates in them. See Github issue\r\n  // #72 and bugzil.la/889492.\r\n  this._names = ArraySet.fromArray(names.map(String), true);\r\n  this._sources = ArraySet.fromArray(sources, true);\r\n\r\n  this._absoluteSources = this._sources.toArray().map(function (s) {\r\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\r\n  });\r\n\r\n  this.sourceRoot = sourceRoot;\r\n  this.sourcesContent = sourcesContent;\r\n  this._mappings = mappings;\r\n  this._sourceMapURL = aSourceMapURL;\r\n  this.file = file;\r\n}\r\n\r\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\r\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\r\n\r\n/**\r\n * Utility function to find the index of a source.  Returns -1 if not\r\n * found.\r\n */\r\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\r\n  var relativeSource = aSource;\r\n  if (this.sourceRoot != null) {\r\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\r\n  }\r\n\r\n  if (this._sources.has(relativeSource)) {\r\n    return this._sources.indexOf(relativeSource);\r\n  }\r\n\r\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\r\n  // this case we can't simply undo the transform.\r\n  var i;\r\n  for (i = 0; i < this._absoluteSources.length; ++i) {\r\n    if (this._absoluteSources[i] == aSource) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n};\r\n\r\n/**\r\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\r\n *\r\n * @param SourceMapGenerator aSourceMap\r\n *        The source map that will be consumed.\r\n * @param String aSourceMapURL\r\n *        The URL at which the source map can be found (optional)\r\n * @returns BasicSourceMapConsumer\r\n */\r\nBasicSourceMapConsumer.fromSourceMap =\r\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\r\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\r\n\r\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\r\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\r\n    smc.sourceRoot = aSourceMap._sourceRoot;\r\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\r\n                                                            smc.sourceRoot);\r\n    smc.file = aSourceMap._file;\r\n    smc._sourceMapURL = aSourceMapURL;\r\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\r\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\r\n    });\r\n\r\n    // Because we are modifying the entries (by converting string sources and\r\n    // names to indices into the sources and names ArraySets), we have to make\r\n    // a copy of the entry or else bad things happen. Shared mutable state\r\n    // strikes again! See github issue #191.\r\n\r\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\r\n    var destGeneratedMappings = smc.__generatedMappings = [];\r\n    var destOriginalMappings = smc.__originalMappings = [];\r\n\r\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\r\n      var srcMapping = generatedMappings[i];\r\n      var destMapping = new Mapping;\r\n      destMapping.generatedLine = srcMapping.generatedLine;\r\n      destMapping.generatedColumn = srcMapping.generatedColumn;\r\n\r\n      if (srcMapping.source) {\r\n        destMapping.source = sources.indexOf(srcMapping.source);\r\n        destMapping.originalLine = srcMapping.originalLine;\r\n        destMapping.originalColumn = srcMapping.originalColumn;\r\n\r\n        if (srcMapping.name) {\r\n          destMapping.name = names.indexOf(srcMapping.name);\r\n        }\r\n\r\n        destOriginalMappings.push(destMapping);\r\n      }\r\n\r\n      destGeneratedMappings.push(destMapping);\r\n    }\r\n\r\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\r\n\r\n    return smc;\r\n  };\r\n\r\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\r\nBasicSourceMapConsumer.prototype._version = 3;\r\n\r\n/**\r\n * The list of original sources.\r\n */\r\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\r\n  get: function () {\r\n    return this._absoluteSources.slice();\r\n  }\r\n});\r\n\r\n/**\r\n * Provide the JIT with a nice shape / hidden class.\r\n */\r\nfunction Mapping() {\r\n  this.generatedLine = 0;\r\n  this.generatedColumn = 0;\r\n  this.source = null;\r\n  this.originalLine = null;\r\n  this.originalColumn = null;\r\n  this.name = null;\r\n}\r\n\r\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\r\nBasicSourceMapConsumer.prototype._parseMappings =\r\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\r\n    var generatedLine = 1;\r\n    var previousGeneratedColumn = 0;\r\n    var previousOriginalLine = 0;\r\n    var previousOriginalColumn = 0;\r\n    var previousSource = 0;\r\n    var previousName = 0;\r\n    var length = aStr.length;\r\n    var index = 0;\r\n    var cachedSegments = {};\r\n    var temp = {};\r\n    var originalMappings = [];\r\n    var generatedMappings = [];\r\n    var mapping, str, segment, end, value;\r\n\r\n    while (index < length) {\r\n      if (aStr.charAt(index) === ';') {\r\n        generatedLine++;\r\n        index++;\r\n        previousGeneratedColumn = 0;\r\n      }\r\n      else if (aStr.charAt(index) === ',') {\r\n        index++;\r\n      }\r\n      else {\r\n        mapping = new Mapping();\r\n        mapping.generatedLine = generatedLine;\r\n\r\n        // Because each offset is encoded relative to the previous one,\r\n        // many segments often have the same encoding. We can exploit this\r\n        // fact by caching the parsed variable length fields of each segment,\r\n        // allowing us to avoid a second parse if we encounter the same\r\n        // segment again.\r\n        for (end = index; end < length; end++) {\r\n          if (this._charIsMappingSeparator(aStr, end)) {\r\n            break;\r\n          }\r\n        }\r\n        str = aStr.slice(index, end);\r\n\r\n        segment = cachedSegments[str];\r\n        if (segment) {\r\n          index += str.length;\r\n        } else {\r\n          segment = [];\r\n          while (index < end) {\r\n            base64VLQ.decode(aStr, index, temp);\r\n            value = temp.value;\r\n            index = temp.rest;\r\n            segment.push(value);\r\n          }\r\n\r\n          if (segment.length === 2) {\r\n            throw new Error('Found a source, but no line and column');\r\n          }\r\n\r\n          if (segment.length === 3) {\r\n            throw new Error('Found a source and line, but no column');\r\n          }\r\n\r\n          cachedSegments[str] = segment;\r\n        }\r\n\r\n        // Generated column.\r\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\r\n        previousGeneratedColumn = mapping.generatedColumn;\r\n\r\n        if (segment.length > 1) {\r\n          // Original source.\r\n          mapping.source = previousSource + segment[1];\r\n          previousSource += segment[1];\r\n\r\n          // Original line.\r\n          mapping.originalLine = previousOriginalLine + segment[2];\r\n          previousOriginalLine = mapping.originalLine;\r\n          // Lines are stored 0-based\r\n          mapping.originalLine += 1;\r\n\r\n          // Original column.\r\n          mapping.originalColumn = previousOriginalColumn + segment[3];\r\n          previousOriginalColumn = mapping.originalColumn;\r\n\r\n          if (segment.length > 4) {\r\n            // Original name.\r\n            mapping.name = previousName + segment[4];\r\n            previousName += segment[4];\r\n          }\r\n        }\r\n\r\n        generatedMappings.push(mapping);\r\n        if (typeof mapping.originalLine === 'number') {\r\n          originalMappings.push(mapping);\r\n        }\r\n      }\r\n    }\r\n\r\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\r\n    this.__generatedMappings = generatedMappings;\r\n\r\n    quickSort(originalMappings, util.compareByOriginalPositions);\r\n    this.__originalMappings = originalMappings;\r\n  };\r\n\r\n/**\r\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\r\n * we are searching for in the given \"haystack\" of mappings.\r\n */\r\nBasicSourceMapConsumer.prototype._findMapping =\r\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\r\n                                         aColumnName, aComparator, aBias) {\r\n    // To return the position we are searching for, we must first find the\r\n    // mapping for the given position and then return the opposite position it\r\n    // points to. Because the mappings are sorted, we can use binary search to\r\n    // find the best mapping.\r\n\r\n    if (aNeedle[aLineName] <= 0) {\r\n      throw new TypeError('Line must be greater than or equal to 1, got '\r\n                          + aNeedle[aLineName]);\r\n    }\r\n    if (aNeedle[aColumnName] < 0) {\r\n      throw new TypeError('Column must be greater than or equal to 0, got '\r\n                          + aNeedle[aColumnName]);\r\n    }\r\n\r\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\r\n  };\r\n\r\n/**\r\n * Compute the last column for each generated mapping. The last column is\r\n * inclusive.\r\n */\r\nBasicSourceMapConsumer.prototype.computeColumnSpans =\r\n  function SourceMapConsumer_computeColumnSpans() {\r\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\r\n      var mapping = this._generatedMappings[index];\r\n\r\n      // Mappings do not contain a field for the last generated columnt. We\r\n      // can come up with an optimistic estimate, however, by assuming that\r\n      // mappings are contiguous (i.e. given two consecutive mappings, the\r\n      // first mapping ends where the second one starts).\r\n      if (index + 1 < this._generatedMappings.length) {\r\n        var nextMapping = this._generatedMappings[index + 1];\r\n\r\n        if (mapping.generatedLine === nextMapping.generatedLine) {\r\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // The last mapping for each line spans the entire line.\r\n      mapping.lastGeneratedColumn = Infinity;\r\n    }\r\n  };\r\n\r\n/**\r\n * Returns the original source, line, and column information for the generated\r\n * source's line and column positions provided. The only argument is an object\r\n * with the following properties:\r\n *\r\n *   - line: The line number in the generated source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the generated source.  The column\r\n *     number is 0-based.\r\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\r\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\r\n *     closest element that is smaller than or greater than the one we are\r\n *     searching for, respectively, if the exact element cannot be found.\r\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - source: The original source file, or null.\r\n *   - line: The line number in the original source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the original source, or null.  The\r\n *     column number is 0-based.\r\n *   - name: The original identifier, or null.\r\n */\r\nBasicSourceMapConsumer.prototype.originalPositionFor =\r\n  function SourceMapConsumer_originalPositionFor(aArgs) {\r\n    var needle = {\r\n      generatedLine: util.getArg(aArgs, 'line'),\r\n      generatedColumn: util.getArg(aArgs, 'column')\r\n    };\r\n\r\n    var index = this._findMapping(\r\n      needle,\r\n      this._generatedMappings,\r\n      \"generatedLine\",\r\n      \"generatedColumn\",\r\n      util.compareByGeneratedPositionsDeflated,\r\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\r\n    );\r\n\r\n    if (index >= 0) {\r\n      var mapping = this._generatedMappings[index];\r\n\r\n      if (mapping.generatedLine === needle.generatedLine) {\r\n        var source = util.getArg(mapping, 'source', null);\r\n        if (source !== null) {\r\n          source = this._sources.at(source);\r\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\r\n        }\r\n        var name = util.getArg(mapping, 'name', null);\r\n        if (name !== null) {\r\n          name = this._names.at(name);\r\n        }\r\n        return {\r\n          source: source,\r\n          line: util.getArg(mapping, 'originalLine', null),\r\n          column: util.getArg(mapping, 'originalColumn', null),\r\n          name: name\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      source: null,\r\n      line: null,\r\n      column: null,\r\n      name: null\r\n    };\r\n  };\r\n\r\n/**\r\n * Return true if we have the source content for every source in the source\r\n * map, false otherwise.\r\n */\r\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\r\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\r\n    if (!this.sourcesContent) {\r\n      return false;\r\n    }\r\n    return this.sourcesContent.length >= this._sources.size() &&\r\n      !this.sourcesContent.some(function (sc) { return sc == null; });\r\n  };\r\n\r\n/**\r\n * Returns the original source content. The only argument is the url of the\r\n * original source file. Returns null if no original source content is\r\n * available.\r\n */\r\nBasicSourceMapConsumer.prototype.sourceContentFor =\r\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\r\n    if (!this.sourcesContent) {\r\n      return null;\r\n    }\r\n\r\n    var index = this._findSourceIndex(aSource);\r\n    if (index >= 0) {\r\n      return this.sourcesContent[index];\r\n    }\r\n\r\n    var relativeSource = aSource;\r\n    if (this.sourceRoot != null) {\r\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\r\n    }\r\n\r\n    var url;\r\n    if (this.sourceRoot != null\r\n        && (url = util.urlParse(this.sourceRoot))) {\r\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\r\n      // many users. We can help them out when they expect file:// URIs to\r\n      // behave like it would if they were running a local HTTP server. See\r\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\r\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\r\n      if (url.scheme == \"file\"\r\n          && this._sources.has(fileUriAbsPath)) {\r\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\r\n      }\r\n\r\n      if ((!url.path || url.path == \"/\")\r\n          && this._sources.has(\"/\" + relativeSource)) {\r\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\r\n      }\r\n    }\r\n\r\n    // This function is used recursively from\r\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\r\n    // don't want to throw if we can't find the source - we just want to\r\n    // return null, so we provide a flag to exit gracefully.\r\n    if (nullOnMissing) {\r\n      return null;\r\n    }\r\n    else {\r\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\r\n    }\r\n  };\r\n\r\n/**\r\n * Returns the generated line and column information for the original source,\r\n * line, and column positions provided. The only argument is an object with\r\n * the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the original source.  The column\r\n *     number is 0-based.\r\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\r\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\r\n *     closest element that is smaller than or greater than the one we are\r\n *     searching for, respectively, if the exact element cannot be found.\r\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the generated source, or null.\r\n *     The column number is 0-based.\r\n */\r\nBasicSourceMapConsumer.prototype.generatedPositionFor =\r\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\r\n    var source = util.getArg(aArgs, 'source');\r\n    source = this._findSourceIndex(source);\r\n    if (source < 0) {\r\n      return {\r\n        line: null,\r\n        column: null,\r\n        lastColumn: null\r\n      };\r\n    }\r\n\r\n    var needle = {\r\n      source: source,\r\n      originalLine: util.getArg(aArgs, 'line'),\r\n      originalColumn: util.getArg(aArgs, 'column')\r\n    };\r\n\r\n    var index = this._findMapping(\r\n      needle,\r\n      this._originalMappings,\r\n      \"originalLine\",\r\n      \"originalColumn\",\r\n      util.compareByOriginalPositions,\r\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\r\n    );\r\n\r\n    if (index >= 0) {\r\n      var mapping = this._originalMappings[index];\r\n\r\n      if (mapping.source === needle.source) {\r\n        return {\r\n          line: util.getArg(mapping, 'generatedLine', null),\r\n          column: util.getArg(mapping, 'generatedColumn', null),\r\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      line: null,\r\n      column: null,\r\n      lastColumn: null\r\n    };\r\n  };\r\n\r\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\r\n\r\n/**\r\n * An IndexedSourceMapConsumer instance represents a parsed source map which\r\n * we can query for information. It differs from BasicSourceMapConsumer in\r\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\r\n * input.\r\n *\r\n * The first parameter is a raw source map (either as a JSON string, or already\r\n * parsed to an object). According to the spec for indexed source maps, they\r\n * have the following attributes:\r\n *\r\n *   - version: Which version of the source map spec this map is following.\r\n *   - file: Optional. The generated file this source map is associated with.\r\n *   - sections: A list of section definitions.\r\n *\r\n * Each value under the \"sections\" field has two fields:\r\n *   - offset: The offset into the original specified at which this section\r\n *       begins to apply, defined as an object with a \"line\" and \"column\"\r\n *       field.\r\n *   - map: A source map definition. This source map could also be indexed,\r\n *       but doesn't have to be.\r\n *\r\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\r\n * specifying a URL to retrieve a source map from, but that's currently\r\n * unsupported.\r\n *\r\n * Here's an example source map, taken from the source map spec[0], but\r\n * modified to omit a section which uses the \"url\" field.\r\n *\r\n *  {\r\n *    version : 3,\r\n *    file: \"app.js\",\r\n *    sections: [{\r\n *      offset: {line:100, column:10},\r\n *      map: {\r\n *        version : 3,\r\n *        file: \"section.js\",\r\n *        sources: [\"foo.js\", \"bar.js\"],\r\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\r\n *        mappings: \"AAAA,E;;ABCDE;\"\r\n *      }\r\n *    }],\r\n *  }\r\n *\r\n * The second parameter, if given, is a string whose value is the URL\r\n * at which the source map was found.  This URL is used to compute the\r\n * sources array.\r\n *\r\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\r\n */\r\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\r\n  var sourceMap = aSourceMap;\r\n  if (typeof aSourceMap === 'string') {\r\n    sourceMap = util.parseSourceMapInput(aSourceMap);\r\n  }\r\n\r\n  var version = util.getArg(sourceMap, 'version');\r\n  var sections = util.getArg(sourceMap, 'sections');\r\n\r\n  if (version != this._version) {\r\n    throw new Error('Unsupported version: ' + version);\r\n  }\r\n\r\n  this._sources = new ArraySet();\r\n  this._names = new ArraySet();\r\n\r\n  var lastOffset = {\r\n    line: -1,\r\n    column: 0\r\n  };\r\n  this._sections = sections.map(function (s) {\r\n    if (s.url) {\r\n      // The url field will require support for asynchronicity.\r\n      // See https://github.com/mozilla/source-map/issues/16\r\n      throw new Error('Support for url field in sections not implemented.');\r\n    }\r\n    var offset = util.getArg(s, 'offset');\r\n    var offsetLine = util.getArg(offset, 'line');\r\n    var offsetColumn = util.getArg(offset, 'column');\r\n\r\n    if (offsetLine < lastOffset.line ||\r\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\r\n      throw new Error('Section offsets must be ordered and non-overlapping.');\r\n    }\r\n    lastOffset = offset;\r\n\r\n    return {\r\n      generatedOffset: {\r\n        // The offset fields are 0-based, but we use 1-based indices when\r\n        // encoding/decoding from VLQ.\r\n        generatedLine: offsetLine + 1,\r\n        generatedColumn: offsetColumn + 1\r\n      },\r\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\r\n    }\r\n  });\r\n}\r\n\r\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\r\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\r\n\r\n/**\r\n * The version of the source mapping spec that we are consuming.\r\n */\r\nIndexedSourceMapConsumer.prototype._version = 3;\r\n\r\n/**\r\n * The list of original sources.\r\n */\r\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\r\n  get: function () {\r\n    var sources = [];\r\n    for (var i = 0; i < this._sections.length; i++) {\r\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\r\n        sources.push(this._sections[i].consumer.sources[j]);\r\n      }\r\n    }\r\n    return sources;\r\n  }\r\n});\r\n\r\n/**\r\n * Returns the original source, line, and column information for the generated\r\n * source's line and column positions provided. The only argument is an object\r\n * with the following properties:\r\n *\r\n *   - line: The line number in the generated source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the generated source.  The column\r\n *     number is 0-based.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - source: The original source file, or null.\r\n *   - line: The line number in the original source, or null.  The\r\n *     line number is 1-based.\r\n *   - column: The column number in the original source, or null.  The\r\n *     column number is 0-based.\r\n *   - name: The original identifier, or null.\r\n */\r\nIndexedSourceMapConsumer.prototype.originalPositionFor =\r\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\r\n    var needle = {\r\n      generatedLine: util.getArg(aArgs, 'line'),\r\n      generatedColumn: util.getArg(aArgs, 'column')\r\n    };\r\n\r\n    // Find the section containing the generated position we're trying to map\r\n    // to an original position.\r\n    var sectionIndex = binarySearch.search(needle, this._sections,\r\n      function(needle, section) {\r\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\r\n        if (cmp) {\r\n          return cmp;\r\n        }\r\n\r\n        return (needle.generatedColumn -\r\n                section.generatedOffset.generatedColumn);\r\n      });\r\n    var section = this._sections[sectionIndex];\r\n\r\n    if (!section) {\r\n      return {\r\n        source: null,\r\n        line: null,\r\n        column: null,\r\n        name: null\r\n      };\r\n    }\r\n\r\n    return section.consumer.originalPositionFor({\r\n      line: needle.generatedLine -\r\n        (section.generatedOffset.generatedLine - 1),\r\n      column: needle.generatedColumn -\r\n        (section.generatedOffset.generatedLine === needle.generatedLine\r\n         ? section.generatedOffset.generatedColumn - 1\r\n         : 0),\r\n      bias: aArgs.bias\r\n    });\r\n  };\r\n\r\n/**\r\n * Return true if we have the source content for every source in the source\r\n * map, false otherwise.\r\n */\r\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\r\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\r\n    return this._sections.every(function (s) {\r\n      return s.consumer.hasContentsOfAllSources();\r\n    });\r\n  };\r\n\r\n/**\r\n * Returns the original source content. The only argument is the url of the\r\n * original source file. Returns null if no original source content is\r\n * available.\r\n */\r\nIndexedSourceMapConsumer.prototype.sourceContentFor =\r\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\r\n    for (var i = 0; i < this._sections.length; i++) {\r\n      var section = this._sections[i];\r\n\r\n      var content = section.consumer.sourceContentFor(aSource, true);\r\n      if (content) {\r\n        return content;\r\n      }\r\n    }\r\n    if (nullOnMissing) {\r\n      return null;\r\n    }\r\n    else {\r\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\r\n    }\r\n  };\r\n\r\n/**\r\n * Returns the generated line and column information for the original source,\r\n * line, and column positions provided. The only argument is an object with\r\n * the following properties:\r\n *\r\n *   - source: The filename of the original source.\r\n *   - line: The line number in the original source.  The line number\r\n *     is 1-based.\r\n *   - column: The column number in the original source.  The column\r\n *     number is 0-based.\r\n *\r\n * and an object is returned with the following properties:\r\n *\r\n *   - line: The line number in the generated source, or null.  The\r\n *     line number is 1-based. \r\n *   - column: The column number in the generated source, or null.\r\n *     The column number is 0-based.\r\n */\r\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\r\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\r\n    for (var i = 0; i < this._sections.length; i++) {\r\n      var section = this._sections[i];\r\n\r\n      // Only consider this section if the requested source is in the list of\r\n      // sources of the consumer.\r\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\r\n        continue;\r\n      }\r\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\r\n      if (generatedPosition) {\r\n        var ret = {\r\n          line: generatedPosition.line +\r\n            (section.generatedOffset.generatedLine - 1),\r\n          column: generatedPosition.column +\r\n            (section.generatedOffset.generatedLine === generatedPosition.line\r\n             ? section.generatedOffset.generatedColumn - 1\r\n             : 0)\r\n        };\r\n        return ret;\r\n      }\r\n    }\r\n\r\n    return {\r\n      line: null,\r\n      column: null\r\n    };\r\n  };\r\n\r\n/**\r\n * Parse the mappings in a string in to a data structure which we can easily\r\n * query (the ordered arrays in the `this.__generatedMappings` and\r\n * `this.__originalMappings` properties).\r\n */\r\nIndexedSourceMapConsumer.prototype._parseMappings =\r\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\r\n    this.__generatedMappings = [];\r\n    this.__originalMappings = [];\r\n    for (var i = 0; i < this._sections.length; i++) {\r\n      var section = this._sections[i];\r\n      var sectionMappings = section.consumer._generatedMappings;\r\n      for (var j = 0; j < sectionMappings.length; j++) {\r\n        var mapping = sectionMappings[j];\r\n\r\n        var source = section.consumer._sources.at(mapping.source);\r\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\r\n        this._sources.add(source);\r\n        source = this._sources.indexOf(source);\r\n\r\n        var name = null;\r\n        if (mapping.name) {\r\n          name = section.consumer._names.at(mapping.name);\r\n          this._names.add(name);\r\n          name = this._names.indexOf(name);\r\n        }\r\n\r\n        // The mappings coming from the consumer for the section have\r\n        // generated positions relative to the start of the section, so we\r\n        // need to offset them to be relative to the start of the concatenated\r\n        // generated file.\r\n        var adjustedMapping = {\r\n          source: source,\r\n          generatedLine: mapping.generatedLine +\r\n            (section.generatedOffset.generatedLine - 1),\r\n          generatedColumn: mapping.generatedColumn +\r\n            (section.generatedOffset.generatedLine === mapping.generatedLine\r\n            ? section.generatedOffset.generatedColumn - 1\r\n            : 0),\r\n          originalLine: mapping.originalLine,\r\n          originalColumn: mapping.originalColumn,\r\n          name: name\r\n        };\r\n\r\n        this.__generatedMappings.push(adjustedMapping);\r\n        if (typeof adjustedMapping.originalLine === 'number') {\r\n          this.__originalMappings.push(adjustedMapping);\r\n        }\r\n      }\r\n    }\r\n\r\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\r\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\r\n  };\r\n\r\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}