{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"./internal-constants\");\nconst {\n  HTML_NS\n} = require(\"./namespaces\");\n\n// All these operate on and return impls, not wrappers!\n\nexports.closest = function (e, localName) {\n  let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === namespace) {\n      return e;\n    }\n    e = domSymbolTree.parent(e);\n  }\n  return null;\n};\nexports.childrenByLocalName = function (parent, localName) {\n  let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.childrenToArray(parent, {\n    filter(node) {\n      return node._localName === localName && node._namespaceURI === namespace;\n    }\n  });\n};\nexports.descendantsByLocalName = function (parent, localName) {\n  let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.treeToArray(parent, {\n    filter(node) {\n      return node._localName === localName && node._namespaceURI === namespace && node !== parent;\n    }\n  });\n};\nexports.childrenByLocalNames = function (parent, localNamesSet) {\n  let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.childrenToArray(parent, {\n    filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === namespace;\n    }\n  });\n};\nexports.descendantsByLocalNames = function (parent, localNamesSet) {\n  let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.treeToArray(parent, {\n    filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === namespace && node !== parent;\n    }\n  });\n};\nexports.firstChildWithLocalName = function (parent, localName) {\n  let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (child._localName === localName && child._namespaceURI === namespace) {\n      return child;\n    }\n  }\n  return null;\n};\nexports.firstChildWithLocalNames = function (parent, localNamesSet) {\n  let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (localNamesSet.has(child._localName) && child._namespaceURI === namespace) {\n      return child;\n    }\n  }\n  return null;\n};\nexports.firstDescendantWithLocalName = function (parent, localName) {\n  let namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  const iterator = domSymbolTree.treeIterator(parent);\n  for (const descendant of iterator) {\n    if (descendant._localName === localName && descendant._namespaceURI === namespace) {\n      return descendant;\n    }\n  }\n  return null;\n};","map":{"version":3,"names":["domSymbolTree","require","HTML_NS","exports","closest","e","localName","namespace","arguments","length","undefined","namespaceURI","parent","childrenByLocalName","childrenToArray","filter","node","_localName","_namespaceURI","descendantsByLocalName","treeToArray","childrenByLocalNames","localNamesSet","has","descendantsByLocalNames","firstChildWithLocalName","iterator","childrenIterator","child","firstChildWithLocalNames","firstDescendantWithLocalName","treeIterator","descendant"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/helpers/traversal.js"],"sourcesContent":["\"use strict\";\r\nconst { domSymbolTree } = require(\"./internal-constants\");\r\nconst { HTML_NS } = require(\"./namespaces\");\r\n\r\n// All these operate on and return impls, not wrappers!\r\n\r\nexports.closest = (e, localName, namespace = HTML_NS) => {\r\n  while (e) {\r\n    if (e.localName === localName && e.namespaceURI === namespace) {\r\n      return e;\r\n    }\r\n    e = domSymbolTree.parent(e);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexports.childrenByLocalName = (parent, localName, namespace = HTML_NS) => {\r\n  return domSymbolTree.childrenToArray(parent, { filter(node) {\r\n    return node._localName === localName && node._namespaceURI === namespace;\r\n  } });\r\n};\r\n\r\nexports.descendantsByLocalName = (parent, localName, namespace = HTML_NS) => {\r\n  return domSymbolTree.treeToArray(parent, { filter(node) {\r\n    return node._localName === localName && node._namespaceURI === namespace && node !== parent;\r\n  } });\r\n};\r\n\r\nexports.childrenByLocalNames = (parent, localNamesSet, namespace = HTML_NS) => {\r\n  return domSymbolTree.childrenToArray(parent, { filter(node) {\r\n    return localNamesSet.has(node._localName) && node._namespaceURI === namespace;\r\n  } });\r\n};\r\n\r\nexports.descendantsByLocalNames = (parent, localNamesSet, namespace = HTML_NS) => {\r\n  return domSymbolTree.treeToArray(parent, { filter(node) {\r\n    return localNamesSet.has(node._localName) &&\r\n           node._namespaceURI === namespace &&\r\n           node !== parent;\r\n  } });\r\n};\r\n\r\nexports.firstChildWithLocalName = (parent, localName, namespace = HTML_NS) => {\r\n  const iterator = domSymbolTree.childrenIterator(parent);\r\n  for (const child of iterator) {\r\n    if (child._localName === localName && child._namespaceURI === namespace) {\r\n      return child;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexports.firstChildWithLocalNames = (parent, localNamesSet, namespace = HTML_NS) => {\r\n  const iterator = domSymbolTree.childrenIterator(parent);\r\n  for (const child of iterator) {\r\n    if (localNamesSet.has(child._localName) && child._namespaceURI === namespace) {\r\n      return child;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexports.firstDescendantWithLocalName = (parent, localName, namespace = HTML_NS) => {\r\n  const iterator = domSymbolTree.treeIterator(parent);\r\n  for (const descendant of iterator) {\r\n    if (descendant._localName === localName && descendant._namespaceURI === namespace) {\r\n      return descendant;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}