{"ast":null,"code":"//.CommonJS\nvar CSSOM = {\n  CSSValue: require('./CSSValue').CSSValue\n};\n///CommonJS\n\n/**\r\n * @constructor\r\n * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx\r\n *\r\n */\nCSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {\n  this._token = token;\n  this._idx = idx;\n};\nCSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();\nCSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;\n\n/**\r\n * parse css expression() value\r\n *\r\n * @return {Object}\r\n *         - error:\r\n *         or\r\n *         - idx:\r\n *         - expression:\r\n *\r\n * Example:\r\n *\r\n * .selector {\r\n *\t\tzoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');\r\n * }\r\n */\nCSSOM.CSSValueExpression.prototype.parse = function () {\n  var token = this._token,\n    idx = this._idx;\n  var character = '',\n    expression = '',\n    error = '',\n    info,\n    paren = [];\n  for (;; ++idx) {\n    character = token.charAt(idx);\n\n    // end of token\n    if (character === '') {\n      error = 'css expression error: unfinished expression!';\n      break;\n    }\n    switch (character) {\n      case '(':\n        paren.push(character);\n        expression += character;\n        break;\n      case ')':\n        paren.pop(character);\n        expression += character;\n        break;\n      case '/':\n        if (info = this._parseJSComment(token, idx)) {\n          // comment?\n          if (info.error) {\n            error = 'css expression error: unfinished comment in expression!';\n          } else {\n            idx = info.idx;\n            // ignore the comment\n          }\n        } else if (info = this._parseJSRexExp(token, idx)) {\n          // regexp\n          idx = info.idx;\n          expression += info.text;\n        } else {\n          // other\n          expression += character;\n        }\n        break;\n      case \"'\":\n      case '\"':\n        info = this._parseJSString(token, idx, character);\n        if (info) {\n          // string\n          idx = info.idx;\n          expression += info.text;\n        } else {\n          expression += character;\n        }\n        break;\n      default:\n        expression += character;\n        break;\n    }\n    if (error) {\n      break;\n    }\n\n    // end of expression\n    if (paren.length === 0) {\n      break;\n    }\n  }\n  var ret;\n  if (error) {\n    ret = {\n      error: error\n    };\n  } else {\n    ret = {\n      idx: idx,\n      expression: expression\n    };\n  }\n  return ret;\n};\n\n/**\r\n *\r\n * @return {Object|false}\r\n *          - idx:\r\n *          - text:\r\n *          or\r\n *          - error:\r\n *          or\r\n *          false\r\n *\r\n */\nCSSOM.CSSValueExpression.prototype._parseJSComment = function (token, idx) {\n  var nextChar = token.charAt(idx + 1),\n    text;\n  if (nextChar === '/' || nextChar === '*') {\n    var startIdx = idx,\n      endIdx,\n      commentEndChar;\n    if (nextChar === '/') {\n      // line comment\n      commentEndChar = '\\n';\n    } else if (nextChar === '*') {\n      // block comment\n      commentEndChar = '*/';\n    }\n    endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);\n    if (endIdx !== -1) {\n      endIdx = endIdx + commentEndChar.length - 1;\n      text = token.substring(idx, endIdx + 1);\n      return {\n        idx: endIdx,\n        text: text\n      };\n    } else {\n      var error = 'css expression error: unfinished comment in expression!';\n      return {\n        error: error\n      };\n    }\n  } else {\n    return false;\n  }\n};\n\n/**\r\n *\r\n * @return {Object|false}\r\n *\t\t\t\t\t- idx:\r\n *\t\t\t\t\t- text:\r\n *\t\t\t\t\tor \r\n *\t\t\t\t\tfalse\r\n *\r\n */\nCSSOM.CSSValueExpression.prototype._parseJSString = function (token, idx, sep) {\n  var endIdx = this._findMatchedIdx(token, idx, sep),\n    text;\n  if (endIdx === -1) {\n    return false;\n  } else {\n    text = token.substring(idx, endIdx + sep.length);\n    return {\n      idx: endIdx,\n      text: text\n    };\n  }\n};\n\n/**\r\n * parse regexp in css expression\r\n *\r\n * @return {Object|false}\r\n *\t\t\t\t- idx:\r\n *\t\t\t\t- regExp:\r\n *\t\t\t\tor \r\n *\t\t\t\tfalse\r\n */\n\n/*\r\n\r\nall legal RegExp\r\n \r\n/a/\r\n(/a/)\r\n[/a/]\r\n[12, /a/]\r\n\r\n!/a/\r\n\r\n+/a/\r\n-/a/\r\n* /a/\r\n/ /a/\r\n%/a/\r\n\r\n===/a/\r\n!==/a/\r\n==/a/\r\n!=/a/\r\n>/a/\r\n>=/a/\r\n</a/\r\n<=/a/\r\n\r\n&/a/\r\n|/a/\r\n^/a/\r\n~/a/\r\n<</a/\r\n>>/a/\r\n>>>/a/\r\n\r\n&&/a/\r\n||/a/\r\n?/a/\r\n=/a/\r\n,/a/\r\n\r\n\t\tdelete /a/\r\n\t\t\t\tin /a/\r\ninstanceof /a/\r\n\t\t\t\tnew /a/\r\n\t\ttypeof /a/\r\n\t\t\tvoid /a/\r\n\r\n*/\nCSSOM.CSSValueExpression.prototype._parseJSRexExp = function (token, idx) {\n  var before = token.substring(0, idx).replace(/\\s+$/, \"\"),\n    legalRegx = [/^$/, /\\($/, /\\[$/, /\\!$/, /\\+$/, /\\-$/, /\\*$/, /\\/\\s+/, /\\%$/, /\\=$/, /\\>$/, /<$/, /\\&$/, /\\|$/, /\\^$/, /\\~$/, /\\?$/, /\\,$/, /delete$/, /in$/, /instanceof$/, /new$/, /typeof$/, /void$/];\n  var isLegal = legalRegx.some(function (reg) {\n    return reg.test(before);\n  });\n  if (!isLegal) {\n    return false;\n  } else {\n    var sep = '/';\n\n    // same logic as string\n    return this._parseJSString(token, idx, sep);\n  }\n};\n\n/**\r\n *\r\n * find next sep(same line) index in `token`\r\n *\r\n * @return {Number}\r\n *\r\n */\nCSSOM.CSSValueExpression.prototype._findMatchedIdx = function (token, idx, sep) {\n  var startIdx = idx,\n    endIdx;\n  var NOT_FOUND = -1;\n  while (true) {\n    endIdx = token.indexOf(sep, startIdx + 1);\n    if (endIdx === -1) {\n      // not found\n      endIdx = NOT_FOUND;\n      break;\n    } else {\n      var text = token.substring(idx + 1, endIdx),\n        matched = text.match(/\\\\+$/);\n      if (!matched || matched[0] % 2 === 0) {\n        // not escaped\n        break;\n      } else {\n        startIdx = endIdx;\n      }\n    }\n  }\n\n  // boundary must be in the same line(js sting or regexp)\n  var nextNewLineIdx = token.indexOf('\\n', idx + 1);\n  if (nextNewLineIdx < endIdx) {\n    endIdx = NOT_FOUND;\n  }\n  return endIdx;\n};\n\n//.CommonJS\nexports.CSSValueExpression = CSSOM.CSSValueExpression;\n///CommonJS","map":{"version":3,"names":["CSSOM","CSSValue","require","CSSValueExpression","token","idx","_token","_idx","prototype","constructor","parse","character","expression","error","info","paren","charAt","push","pop","_parseJSComment","_parseJSRexExp","text","_parseJSString","length","ret","nextChar","startIdx","endIdx","commentEndChar","indexOf","substring","sep","_findMatchedIdx","before","replace","legalRegx","isLegal","some","reg","test","NOT_FOUND","matched","match","nextNewLineIdx","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/cssom/lib/CSSValueExpression.js"],"sourcesContent":["//.CommonJS\r\nvar CSSOM = {\r\n\tCSSValue: require('./CSSValue').CSSValue\r\n};\r\n///CommonJS\r\n\r\n\r\n/**\r\n * @constructor\r\n * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx\r\n *\r\n */\r\nCSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {\r\n\tthis._token = token;\r\n\tthis._idx = idx;\r\n};\r\n\r\nCSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();\r\nCSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;\r\n\r\n/**\r\n * parse css expression() value\r\n *\r\n * @return {Object}\r\n *         - error:\r\n *         or\r\n *         - idx:\r\n *         - expression:\r\n *\r\n * Example:\r\n *\r\n * .selector {\r\n *\t\tzoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');\r\n * }\r\n */\r\nCSSOM.CSSValueExpression.prototype.parse = function() {\r\n\tvar token = this._token,\r\n\t\t\tidx = this._idx;\r\n\r\n\tvar character = '',\r\n\t\t\texpression = '',\r\n\t\t\terror = '',\r\n\t\t\tinfo,\r\n\t\t\tparen = [];\r\n\r\n\r\n\tfor (; ; ++idx) {\r\n\t\tcharacter = token.charAt(idx);\r\n\r\n\t\t// end of token\r\n\t\tif (character === '') {\r\n\t\t\terror = 'css expression error: unfinished expression!';\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tswitch(character) {\r\n\t\t\tcase '(':\r\n\t\t\t\tparen.push(character);\r\n\t\t\t\texpression += character;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tparen.pop(character);\r\n\t\t\t\texpression += character;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase '/':\r\n\t\t\t\tif ((info = this._parseJSComment(token, idx))) { // comment?\r\n\t\t\t\t\tif (info.error) {\r\n\t\t\t\t\t\terror = 'css expression error: unfinished comment in expression!';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tidx = info.idx;\r\n\t\t\t\t\t\t// ignore the comment\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ((info = this._parseJSRexExp(token, idx))) { // regexp\r\n\t\t\t\t\tidx = info.idx;\r\n\t\t\t\t\texpression += info.text;\r\n\t\t\t\t} else { // other\r\n\t\t\t\t\texpression += character;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"'\":\r\n\t\t\tcase '\"':\r\n\t\t\t\tinfo = this._parseJSString(token, idx, character);\r\n\t\t\t\tif (info) { // string\r\n\t\t\t\t\tidx = info.idx;\r\n\t\t\t\t\texpression += info.text;\r\n\t\t\t\t} else {\r\n\t\t\t\t\texpression += character;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\texpression += character;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (error) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// end of expression\r\n\t\tif (paren.length === 0) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tvar ret;\r\n\tif (error) {\r\n\t\tret = {\r\n\t\t\terror: error\r\n\t\t};\r\n\t} else {\r\n\t\tret = {\r\n\t\t\tidx: idx,\r\n\t\t\texpression: expression\r\n\t\t};\r\n\t}\r\n\r\n\treturn ret;\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @return {Object|false}\r\n *          - idx:\r\n *          - text:\r\n *          or\r\n *          - error:\r\n *          or\r\n *          false\r\n *\r\n */\r\nCSSOM.CSSValueExpression.prototype._parseJSComment = function(token, idx) {\r\n\tvar nextChar = token.charAt(idx + 1),\r\n\t\t\ttext;\r\n\r\n\tif (nextChar === '/' || nextChar === '*') {\r\n\t\tvar startIdx = idx,\r\n\t\t\t\tendIdx,\r\n\t\t\t\tcommentEndChar;\r\n\r\n\t\tif (nextChar === '/') { // line comment\r\n\t\t\tcommentEndChar = '\\n';\r\n\t\t} else if (nextChar === '*') { // block comment\r\n\t\t\tcommentEndChar = '*/';\r\n\t\t}\r\n\r\n\t\tendIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);\r\n\t\tif (endIdx !== -1) {\r\n\t\t\tendIdx = endIdx + commentEndChar.length - 1;\r\n\t\t\ttext = token.substring(idx, endIdx + 1);\r\n\t\t\treturn {\r\n\t\t\t\tidx: endIdx,\r\n\t\t\t\ttext: text\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tvar error = 'css expression error: unfinished comment in expression!';\r\n\t\t\treturn {\r\n\t\t\t\terror: error\r\n\t\t\t};\r\n\t\t}\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @return {Object|false}\r\n *\t\t\t\t\t- idx:\r\n *\t\t\t\t\t- text:\r\n *\t\t\t\t\tor \r\n *\t\t\t\t\tfalse\r\n *\r\n */\r\nCSSOM.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {\r\n\tvar endIdx = this._findMatchedIdx(token, idx, sep),\r\n\t\t\ttext;\r\n\r\n\tif (endIdx === -1) {\r\n\t\treturn false;\r\n\t} else {\r\n\t\ttext = token.substring(idx, endIdx + sep.length);\r\n\r\n\t\treturn {\r\n\t\t\tidx: endIdx,\r\n\t\t\ttext: text\r\n\t\t};\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * parse regexp in css expression\r\n *\r\n * @return {Object|false}\r\n *\t\t\t\t- idx:\r\n *\t\t\t\t- regExp:\r\n *\t\t\t\tor \r\n *\t\t\t\tfalse\r\n */\r\n\r\n/*\r\n\r\nall legal RegExp\r\n \r\n/a/\r\n(/a/)\r\n[/a/]\r\n[12, /a/]\r\n\r\n!/a/\r\n\r\n+/a/\r\n-/a/\r\n* /a/\r\n/ /a/\r\n%/a/\r\n\r\n===/a/\r\n!==/a/\r\n==/a/\r\n!=/a/\r\n>/a/\r\n>=/a/\r\n</a/\r\n<=/a/\r\n\r\n&/a/\r\n|/a/\r\n^/a/\r\n~/a/\r\n<</a/\r\n>>/a/\r\n>>>/a/\r\n\r\n&&/a/\r\n||/a/\r\n?/a/\r\n=/a/\r\n,/a/\r\n\r\n\t\tdelete /a/\r\n\t\t\t\tin /a/\r\ninstanceof /a/\r\n\t\t\t\tnew /a/\r\n\t\ttypeof /a/\r\n\t\t\tvoid /a/\r\n\r\n*/\r\nCSSOM.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {\r\n\tvar before = token.substring(0, idx).replace(/\\s+$/, \"\"),\r\n\t\t\tlegalRegx = [\r\n\t\t\t\t/^$/,\r\n\t\t\t\t/\\($/,\r\n\t\t\t\t/\\[$/,\r\n\t\t\t\t/\\!$/,\r\n\t\t\t\t/\\+$/,\r\n\t\t\t\t/\\-$/,\r\n\t\t\t\t/\\*$/,\r\n\t\t\t\t/\\/\\s+/,\r\n\t\t\t\t/\\%$/,\r\n\t\t\t\t/\\=$/,\r\n\t\t\t\t/\\>$/,\r\n\t\t\t\t/<$/,\r\n\t\t\t\t/\\&$/,\r\n\t\t\t\t/\\|$/,\r\n\t\t\t\t/\\^$/,\r\n\t\t\t\t/\\~$/,\r\n\t\t\t\t/\\?$/,\r\n\t\t\t\t/\\,$/,\r\n\t\t\t\t/delete$/,\r\n\t\t\t\t/in$/,\r\n\t\t\t\t/instanceof$/,\r\n\t\t\t\t/new$/,\r\n\t\t\t\t/typeof$/,\r\n\t\t\t\t/void$/\r\n\t\t\t];\r\n\r\n\tvar isLegal = legalRegx.some(function(reg) {\r\n\t\treturn reg.test(before);\r\n\t});\r\n\r\n\tif (!isLegal) {\r\n\t\treturn false;\r\n\t} else {\r\n\t\tvar sep = '/';\r\n\r\n\t\t// same logic as string\r\n\t\treturn this._parseJSString(token, idx, sep);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n *\r\n * find next sep(same line) index in `token`\r\n *\r\n * @return {Number}\r\n *\r\n */\r\nCSSOM.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {\r\n\tvar startIdx = idx,\r\n\t\t\tendIdx;\r\n\r\n\tvar NOT_FOUND = -1;\r\n\r\n\twhile(true) {\r\n\t\tendIdx = token.indexOf(sep, startIdx + 1);\r\n\r\n\t\tif (endIdx === -1) { // not found\r\n\t\t\tendIdx = NOT_FOUND;\r\n\t\t\tbreak;\r\n\t\t} else {\r\n\t\t\tvar text = token.substring(idx + 1, endIdx),\r\n\t\t\t\t\tmatched = text.match(/\\\\+$/);\r\n\t\t\tif (!matched || matched[0] % 2 === 0) { // not escaped\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tstartIdx = endIdx;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// boundary must be in the same line(js sting or regexp)\r\n\tvar nextNewLineIdx = token.indexOf('\\n', idx + 1);\r\n\tif (nextNewLineIdx < endIdx) {\r\n\t\tendIdx = NOT_FOUND;\r\n\t}\r\n\r\n\r\n\treturn endIdx;\r\n};\r\n\r\n\r\n\r\n\r\n//.CommonJS\r\nexports.CSSValueExpression = CSSOM.CSSValueExpression;\r\n///CommonJS\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}