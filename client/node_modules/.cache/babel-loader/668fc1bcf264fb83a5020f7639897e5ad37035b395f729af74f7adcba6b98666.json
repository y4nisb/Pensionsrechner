{"ast":null,"code":"\"use strict\";\n\nconst {\n  hrtime\n} = require(\"./utils\");\n\n// The HR-TIME spec calls for 5-μs accuracy. Check that we have that in both hrtime() and Date.now().\n\nfunction testClockAccuracy() {\n  // Test hrtime() first. The check is simpler and more stable, and we use hrtime() to measure Date.now()'s performance.\n  const roundTrip = hrtime(hrtime());\n  if (roundTrip[0] > 1 || roundTrip[1] > 5e3 * 2) {\n    return false;\n  }\n\n  // Test Date.now() twice: first with a looser bound (10 μs) but with a smaller run time to filter out very bad\n  // Date.now() performance, and then with a tighter bound (5 μs) to check we have the accuracy we need.\n  let times;\n  // eslint-disable-next-line no-unused-vars\n  let cur;\n  let start;\n  let end;\n  times = 100;\n  start = hrtime();\n  while (times-- > 0) {\n    cur = Date.now();\n  }\n  end = hrtime(start);\n  if (end[0] * 1e9 + end[1] > 1000000) {\n    return false;\n  }\n  times = 10000;\n  start = hrtime();\n  while (times-- > 0) {\n    cur = Date.now();\n  }\n  end = hrtime(start);\n  if (end[0] * 1e9 + end[1] > 50000000) {\n    return false;\n  }\n  return true;\n}\n\n// Warm up the function.\ntestClockAccuracy();\ntestClockAccuracy();\ntestClockAccuracy();\nconst TIMES = 5;\nconst THRESHOLD = 0.6 * TIMES;\nlet accurates = 0;\nfor (let i = 0; i < TIMES; i++) {\n  if (testClockAccuracy()) {\n    accurates++;\n  }\n}\nconst isAccurate = accurates >= THRESHOLD;\nmodule.exports = isAccurate;","map":{"version":3,"names":["hrtime","require","testClockAccuracy","roundTrip","times","cur","start","end","Date","now","TIMES","THRESHOLD","accurates","i","isAccurate","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/w3c-hr-time/lib/clock-is-accurate.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst { hrtime } = require(\"./utils\");\r\n\r\n// The HR-TIME spec calls for 5-μs accuracy. Check that we have that in both hrtime() and Date.now().\r\n\r\nfunction testClockAccuracy() {\r\n  // Test hrtime() first. The check is simpler and more stable, and we use hrtime() to measure Date.now()'s performance.\r\n  const roundTrip = hrtime(hrtime());\r\n  if (roundTrip[0] > 1 || roundTrip[1] > 5e3 * 2) {\r\n    return false;\r\n  }\r\n\r\n  // Test Date.now() twice: first with a looser bound (10 μs) but with a smaller run time to filter out very bad\r\n  // Date.now() performance, and then with a tighter bound (5 μs) to check we have the accuracy we need.\r\n  let times;\r\n  // eslint-disable-next-line no-unused-vars\r\n  let cur;\r\n  let start;\r\n  let end;\r\n\r\n  times = 100;\r\n  start = hrtime();\r\n  while (times-- > 0) {\r\n    cur = Date.now();\r\n  }\r\n  end = hrtime(start);\r\n  if ((end[0] * 1e9 + end[1]) > 1000000) {\r\n    return false;\r\n  }\r\n\r\n  times = 10000;\r\n  start = hrtime();\r\n  while (times-- > 0) {\r\n    cur = Date.now();\r\n  }\r\n  end = hrtime(start);\r\n  if ((end[0] * 1e9 + end[1]) > 50000000) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Warm up the function.\r\ntestClockAccuracy();\r\ntestClockAccuracy();\r\ntestClockAccuracy();\r\n\r\nconst TIMES = 5;\r\nconst THRESHOLD = 0.6 * TIMES;\r\nlet accurates = 0;\r\nfor (let i = 0; i < TIMES; i++) {\r\n  if (testClockAccuracy()) {\r\n    accurates++;\r\n  }\r\n}\r\n\r\nconst isAccurate = accurates >= THRESHOLD;\r\n\r\nmodule.exports = isAccurate;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAErC;;AAEA,SAASC,iBAAiBA,CAAA,EAAG;EAC3B;EACA,MAAMC,SAAS,GAAGH,MAAM,CAACA,MAAM,EAAE,CAAC;EAClC,IAAIG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;IAC9C,OAAO,KAAK;EACd;;EAEA;EACA;EACA,IAAIC,KAAK;EACT;EACA,IAAIC,GAAG;EACP,IAAIC,KAAK;EACT,IAAIC,GAAG;EAEPH,KAAK,GAAG,GAAG;EACXE,KAAK,GAAGN,MAAM,EAAE;EAChB,OAAOI,KAAK,EAAE,GAAG,CAAC,EAAE;IAClBC,GAAG,GAAGG,IAAI,CAACC,GAAG,EAAE;EAClB;EACAF,GAAG,GAAGP,MAAM,CAACM,KAAK,CAAC;EACnB,IAAKC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAI,OAAO,EAAE;IACrC,OAAO,KAAK;EACd;EAEAH,KAAK,GAAG,KAAK;EACbE,KAAK,GAAGN,MAAM,EAAE;EAChB,OAAOI,KAAK,EAAE,GAAG,CAAC,EAAE;IAClBC,GAAG,GAAGG,IAAI,CAACC,GAAG,EAAE;EAClB;EACAF,GAAG,GAAGP,MAAM,CAACM,KAAK,CAAC;EACnB,IAAKC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAI,QAAQ,EAAE;IACtC,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb;;AAEA;AACAL,iBAAiB,EAAE;AACnBA,iBAAiB,EAAE;AACnBA,iBAAiB,EAAE;AAEnB,MAAMQ,KAAK,GAAG,CAAC;AACf,MAAMC,SAAS,GAAG,GAAG,GAAGD,KAAK;AAC7B,IAAIE,SAAS,GAAG,CAAC;AACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,EAAEG,CAAC,EAAE,EAAE;EAC9B,IAAIX,iBAAiB,EAAE,EAAE;IACvBU,SAAS,EAAE;EACb;AACF;AAEA,MAAME,UAAU,GAAGF,SAAS,IAAID,SAAS;AAEzCI,MAAM,CAACC,OAAO,GAAGF,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}