{"ast":null,"code":"'use strict';\n\nconst TREE = Symbol();\nconst ROOT = Symbol();\nconst NEXT = Symbol();\nconst ITERATE_FUNC = Symbol();\nclass TreeIterator {\n  constructor(tree, root, firstResult, iterateFunction) {\n    this[TREE] = tree;\n    this[ROOT] = root;\n    this[NEXT] = firstResult;\n    this[ITERATE_FUNC] = iterateFunction;\n  }\n  next() {\n    const tree = this[TREE];\n    const iterateFunc = this[ITERATE_FUNC];\n    const root = this[ROOT];\n    if (!this[NEXT]) {\n      return {\n        done: true,\n        value: root\n      };\n    }\n    const value = this[NEXT];\n    if (iterateFunc === 1) {\n      this[NEXT] = tree._node(value).previousSibling;\n    } else if (iterateFunc === 2) {\n      this[NEXT] = tree._node(value).nextSibling;\n    } else if (iterateFunc === 3) {\n      this[NEXT] = tree._node(value).parent;\n    } else if (iterateFunc === 4) {\n      this[NEXT] = tree.preceding(value, {\n        root: root\n      });\n    } else /* if (iterateFunc === 5)*/{\n        this[NEXT] = tree.following(value, {\n          root: root\n        });\n      }\n    return {\n      done: false,\n      value: value\n    };\n  }\n}\nObject.defineProperty(TreeIterator.prototype, Symbol.iterator, {\n  value: function () {\n    return this;\n  },\n  writable: false\n});\nTreeIterator.PREV = 1;\nTreeIterator.NEXT = 2;\nTreeIterator.PARENT = 3;\nTreeIterator.PRECEDING = 4;\nTreeIterator.FOLLOWING = 5;\nObject.freeze(TreeIterator);\nObject.freeze(TreeIterator.prototype);\nmodule.exports = TreeIterator;","map":{"version":3,"names":["TREE","Symbol","ROOT","NEXT","ITERATE_FUNC","TreeIterator","constructor","tree","root","firstResult","iterateFunction","next","iterateFunc","done","value","_node","previousSibling","nextSibling","parent","preceding","following","Object","defineProperty","prototype","iterator","writable","PREV","PARENT","PRECEDING","FOLLOWING","freeze","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/symbol-tree/lib/TreeIterator.js"],"sourcesContent":["'use strict';\r\n\r\nconst TREE = Symbol();\r\nconst ROOT = Symbol();\r\nconst NEXT = Symbol();\r\nconst ITERATE_FUNC = Symbol();\r\n\r\nclass TreeIterator {\r\n        constructor(tree, root, firstResult, iterateFunction) {\r\n                this[TREE] = tree;\r\n                this[ROOT] = root;\r\n                this[NEXT] = firstResult;\r\n                this[ITERATE_FUNC] = iterateFunction;\r\n        }\r\n\r\n        next() {\r\n                const tree = this[TREE];\r\n                const iterateFunc = this[ITERATE_FUNC];\r\n                const root = this[ROOT];\r\n\r\n                if (!this[NEXT]) {\r\n                        return {\r\n                                done: true,\r\n                                value: root,\r\n                        };\r\n                }\r\n\r\n                const value = this[NEXT];\r\n\r\n                if (iterateFunc === 1) {\r\n                        this[NEXT] = tree._node(value).previousSibling;\r\n                }\r\n                else if (iterateFunc === 2) {\r\n                        this[NEXT] = tree._node(value).nextSibling;\r\n                }\r\n                else if (iterateFunc === 3) {\r\n                        this[NEXT] = tree._node(value).parent;\r\n                }\r\n                else if (iterateFunc === 4) {\r\n                        this[NEXT] = tree.preceding(value, {root: root});\r\n                }\r\n                else /* if (iterateFunc === 5)*/ {\r\n                        this[NEXT] = tree.following(value, {root: root});\r\n                }\r\n\r\n                return {\r\n                        done: false,\r\n                        value: value,\r\n                };\r\n        }\r\n}\r\n\r\nObject.defineProperty(TreeIterator.prototype, Symbol.iterator, {\r\n        value: function() {\r\n                return this;\r\n        },\r\n        writable: false,\r\n});\r\n\r\nTreeIterator.PREV = 1;\r\nTreeIterator.NEXT = 2;\r\nTreeIterator.PARENT = 3;\r\nTreeIterator.PRECEDING = 4;\r\nTreeIterator.FOLLOWING = 5;\r\n\r\nObject.freeze(TreeIterator);\r\nObject.freeze(TreeIterator.prototype);\r\n\r\nmodule.exports = TreeIterator;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,MAAM,EAAE;AACrB,MAAMC,IAAI,GAAGD,MAAM,EAAE;AACrB,MAAME,IAAI,GAAGF,MAAM,EAAE;AACrB,MAAMG,YAAY,GAAGH,MAAM,EAAE;AAE7B,MAAMI,YAAY,CAAC;EACXC,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,WAAW,EAAEC,eAAe,EAAE;IAC9C,IAAI,CAACV,IAAI,CAAC,GAAGO,IAAI;IACjB,IAAI,CAACL,IAAI,CAAC,GAAGM,IAAI;IACjB,IAAI,CAACL,IAAI,CAAC,GAAGM,WAAW;IACxB,IAAI,CAACL,YAAY,CAAC,GAAGM,eAAe;EAC5C;EAEAC,IAAIA,CAAA,EAAG;IACC,MAAMJ,IAAI,GAAG,IAAI,CAACP,IAAI,CAAC;IACvB,MAAMY,WAAW,GAAG,IAAI,CAACR,YAAY,CAAC;IACtC,MAAMI,IAAI,GAAG,IAAI,CAACN,IAAI,CAAC;IAEvB,IAAI,CAAC,IAAI,CAACC,IAAI,CAAC,EAAE;MACT,OAAO;QACCU,IAAI,EAAE,IAAI;QACVC,KAAK,EAAEN;MACf,CAAC;IACT;IAEA,MAAMM,KAAK,GAAG,IAAI,CAACX,IAAI,CAAC;IAExB,IAAIS,WAAW,KAAK,CAAC,EAAE;MACf,IAAI,CAACT,IAAI,CAAC,GAAGI,IAAI,CAACQ,KAAK,CAACD,KAAK,CAAC,CAACE,eAAe;IACtD,CAAC,MACI,IAAIJ,WAAW,KAAK,CAAC,EAAE;MACpB,IAAI,CAACT,IAAI,CAAC,GAAGI,IAAI,CAACQ,KAAK,CAACD,KAAK,CAAC,CAACG,WAAW;IAClD,CAAC,MACI,IAAIL,WAAW,KAAK,CAAC,EAAE;MACpB,IAAI,CAACT,IAAI,CAAC,GAAGI,IAAI,CAACQ,KAAK,CAACD,KAAK,CAAC,CAACI,MAAM;IAC7C,CAAC,MACI,IAAIN,WAAW,KAAK,CAAC,EAAE;MACpB,IAAI,CAACT,IAAI,CAAC,GAAGI,IAAI,CAACY,SAAS,CAACL,KAAK,EAAE;QAACN,IAAI,EAAEA;MAAI,CAAC,CAAC;IACxD,CAAC,MACI,2BAA4B;QACzB,IAAI,CAACL,IAAI,CAAC,GAAGI,IAAI,CAACa,SAAS,CAACN,KAAK,EAAE;UAACN,IAAI,EAAEA;QAAI,CAAC,CAAC;MACxD;IAEA,OAAO;MACCK,IAAI,EAAE,KAAK;MACXC,KAAK,EAAEA;IACf,CAAC;EACT;AACR;AAEAO,MAAM,CAACC,cAAc,CAACjB,YAAY,CAACkB,SAAS,EAAEtB,MAAM,CAACuB,QAAQ,EAAE;EACvDV,KAAK,EAAE,SAAAA,CAAA,EAAW;IACV,OAAO,IAAI;EACnB,CAAC;EACDW,QAAQ,EAAE;AAClB,CAAC,CAAC;AAEFpB,YAAY,CAACqB,IAAI,GAAG,CAAC;AACrBrB,YAAY,CAACF,IAAI,GAAG,CAAC;AACrBE,YAAY,CAACsB,MAAM,GAAG,CAAC;AACvBtB,YAAY,CAACuB,SAAS,GAAG,CAAC;AAC1BvB,YAAY,CAACwB,SAAS,GAAG,CAAC;AAE1BR,MAAM,CAACS,MAAM,CAACzB,YAAY,CAAC;AAC3BgB,MAAM,CAACS,MAAM,CAACzB,YAAY,CAACkB,SAAS,CAAC;AAErCQ,MAAM,CAACC,OAAO,GAAG3B,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}