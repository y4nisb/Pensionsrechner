{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst {\n  setAttributeValue,\n  removeAttributeByName\n} = require(\"../attributes\");\nconst validateName = require(\"../helpers/validate-names\").name;\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst dataAttrRe = /^data-([^A-Z]*)$/;\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n}\nexports.implementation = class DOMStringMapImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._element = privateData.element;\n  }\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const {\n      attributes\n    } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n    return result;\n  }\n  [idlUtils.namedGet](name) {\n    const {\n      attributes\n    } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n    return undefined;\n  }\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw DOMException.create(this._globalObject, [`'${name}' is not a valid property name`, \"SyntaxError\"]);\n    }\n    name = `data-${attrSnakeCase(name)}`;\n    validateName(this._globalObject, name);\n    setAttributeValue(this._element, name, value);\n  }\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n  [idlUtils.namedDelete](name) {\n    name = `data-${attrSnakeCase(name)}`;\n    removeAttributeByName(this._element, name);\n  }\n};","map":{"version":3,"names":["idlUtils","require","setAttributeValue","removeAttributeByName","validateName","name","DOMException","dataAttrRe","attrCamelCase","replace","match","alpha","toUpperCase","attrSnakeCase","toLowerCase","exports","implementation","DOMStringMapImpl","constructor","globalObject","args","privateData","_globalObject","_element","element","supportedPropertyNames","result","Set","attributes","i","length","attr","item","matches","exec","localName","add","namedGet","value","undefined","namedSetNew","test","create","namedSetExisting","namedDelete"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/nodes/DOMStringMap-impl.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst idlUtils = require(\"../generated/utils.js\");\r\nconst { setAttributeValue, removeAttributeByName } = require(\"../attributes\");\r\nconst validateName = require(\"../helpers/validate-names\").name;\r\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\r\n\r\nconst dataAttrRe = /^data-([^A-Z]*)$/;\r\n\r\nfunction attrCamelCase(name) {\r\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\r\n}\r\n\r\nfunction attrSnakeCase(name) {\r\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\r\n}\r\n\r\nexports.implementation = class DOMStringMapImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    this._globalObject = globalObject;\r\n    this._element = privateData.element;\r\n  }\r\n  get [idlUtils.supportedPropertyNames]() {\r\n    const result = new Set();\r\n    const { attributes } = this._element;\r\n    for (let i = 0; i < attributes.length; i++) {\r\n      const attr = attributes.item(i);\r\n      const matches = dataAttrRe.exec(attr.localName);\r\n      if (matches) {\r\n        result.add(attrCamelCase(matches[1]));\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  [idlUtils.namedGet](name) {\r\n    const { attributes } = this._element;\r\n    for (let i = 0; i < attributes.length; i++) {\r\n      const attr = attributes.item(i);\r\n      const matches = dataAttrRe.exec(attr.localName);\r\n      if (matches && attrCamelCase(matches[1]) === name) {\r\n        return attr.value;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  [idlUtils.namedSetNew](name, value) {\r\n    if (/-[a-z]/.test(name)) {\r\n      throw DOMException.create(this._globalObject, [\r\n        `'${name}' is not a valid property name`,\r\n        \"SyntaxError\"\r\n      ]);\r\n    }\r\n    name = `data-${attrSnakeCase(name)}`;\r\n    validateName(this._globalObject, name);\r\n    setAttributeValue(this._element, name, value);\r\n  }\r\n  [idlUtils.namedSetExisting](name, value) {\r\n    this[idlUtils.namedSetNew](name, value);\r\n  }\r\n  [idlUtils.namedDelete](name) {\r\n    name = `data-${attrSnakeCase(name)}`;\r\n    removeAttributeByName(this._element, name);\r\n  }\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACjD,MAAM;EAAEC,iBAAiB;EAAEC;AAAsB,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC7E,MAAMG,YAAY,GAAGH,OAAO,CAAC,2BAA2B,CAAC,CAACI,IAAI;AAC9D,MAAMC,YAAY,GAAGL,OAAO,CAAC,gCAAgC,CAAC;AAE9D,MAAMM,UAAU,GAAG,kBAAkB;AAErC,SAASC,aAAaA,CAACH,IAAI,EAAE;EAC3B,OAAOA,IAAI,CAACI,OAAO,CAAC,WAAW,EAAE,CAACC,KAAK,EAAEC,KAAK,KAAKA,KAAK,CAACC,WAAW,EAAE,CAAC;AACzE;AAEA,SAASC,aAAaA,CAACR,IAAI,EAAE;EAC3B,OAAOA,IAAI,CAACI,OAAO,CAAC,QAAQ,EAAEC,KAAK,IAAK,IAAGA,KAAK,CAACI,WAAW,EAAG,EAAC,CAAC;AACnE;AAEAC,OAAO,CAACC,cAAc,GAAG,MAAMC,gBAAgB,CAAC;EAC9CC,WAAWA,CAACC,YAAY,EAAEC,IAAI,EAAEC,WAAW,EAAE;IAC3C,IAAI,CAACC,aAAa,GAAGH,YAAY;IACjC,IAAI,CAACI,QAAQ,GAAGF,WAAW,CAACG,OAAO;EACrC;EACA,KAAKxB,QAAQ,CAACyB,sBAAsB,IAAI;IACtC,MAAMC,MAAM,GAAG,IAAIC,GAAG,EAAE;IACxB,MAAM;MAAEC;IAAW,CAAC,GAAG,IAAI,CAACL,QAAQ;IACpC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C,MAAME,IAAI,GAAGH,UAAU,CAACI,IAAI,CAACH,CAAC,CAAC;MAC/B,MAAMI,OAAO,GAAG1B,UAAU,CAAC2B,IAAI,CAACH,IAAI,CAACI,SAAS,CAAC;MAC/C,IAAIF,OAAO,EAAE;QACXP,MAAM,CAACU,GAAG,CAAC5B,aAAa,CAACyB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;MACvC;IACF;IACA,OAAOP,MAAM;EACf;EACA,CAAC1B,QAAQ,CAACqC,QAAQ,EAAEhC,IAAI,EAAE;IACxB,MAAM;MAAEuB;IAAW,CAAC,GAAG,IAAI,CAACL,QAAQ;IACpC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C,MAAME,IAAI,GAAGH,UAAU,CAACI,IAAI,CAACH,CAAC,CAAC;MAC/B,MAAMI,OAAO,GAAG1B,UAAU,CAAC2B,IAAI,CAACH,IAAI,CAACI,SAAS,CAAC;MAC/C,IAAIF,OAAO,IAAIzB,aAAa,CAACyB,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK5B,IAAI,EAAE;QACjD,OAAO0B,IAAI,CAACO,KAAK;MACnB;IACF;IACA,OAAOC,SAAS;EAClB;EACA,CAACvC,QAAQ,CAACwC,WAAW,EAAEnC,IAAI,EAAEiC,KAAK,EAAE;IAClC,IAAI,QAAQ,CAACG,IAAI,CAACpC,IAAI,CAAC,EAAE;MACvB,MAAMC,YAAY,CAACoC,MAAM,CAAC,IAAI,CAACpB,aAAa,EAAE,CAC3C,IAAGjB,IAAK,gCAA+B,EACxC,aAAa,CACd,CAAC;IACJ;IACAA,IAAI,GAAI,QAAOQ,aAAa,CAACR,IAAI,CAAE,EAAC;IACpCD,YAAY,CAAC,IAAI,CAACkB,aAAa,EAAEjB,IAAI,CAAC;IACtCH,iBAAiB,CAAC,IAAI,CAACqB,QAAQ,EAAElB,IAAI,EAAEiC,KAAK,CAAC;EAC/C;EACA,CAACtC,QAAQ,CAAC2C,gBAAgB,EAAEtC,IAAI,EAAEiC,KAAK,EAAE;IACvC,IAAI,CAACtC,QAAQ,CAACwC,WAAW,CAAC,CAACnC,IAAI,EAAEiC,KAAK,CAAC;EACzC;EACA,CAACtC,QAAQ,CAAC4C,WAAW,EAAEvC,IAAI,EAAE;IAC3BA,IAAI,GAAI,QAAOQ,aAAa,CAACR,IAAI,CAAE,EAAC;IACpCF,qBAAqB,CAAC,IAAI,CAACoB,QAAQ,EAAElB,IAAI,CAAC;EAC5C;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}