{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\n// https://html.spec.whatwg.org/#encoding-sniffing-algorithm\nmodule.exports = function (buffer) {\n  let {\n    transportLayerEncodingLabel,\n    defaultEncoding = \"windows-1252\"\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\n\n  if (encoding === null && transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(transportLayerEncodingLabel);\n  }\n  if (encoding === null) {\n    encoding = prescanMetaCharset(buffer);\n  }\n  if (encoding === null) {\n    encoding = defaultEncoding;\n  }\n  return encoding;\n};\n\n// https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\nfunction prescanMetaCharset(buffer) {\n  const l = Math.min(buffer.length, 1024);\n  for (let i = 0; i < l; i++) {\n    let c = buffer[i];\n    if (c === 0x3C) {\n      // \"<\"\n      const c1 = buffer[i + 1];\n      const c2 = buffer[i + 2];\n      const c3 = buffer[i + 3];\n      const c4 = buffer[i + 4];\n      const c5 = buffer[i + 5];\n      // !-- (comment start)\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n        for (; i < l; i++) {\n          c = buffer[i];\n          const cMinus1 = buffer[i - 1];\n          const cMinus2 = buffer[i - 2];\n          // --> (comment end)\n          if (c === 0x3E && cMinus1 === 0x2D && cMinus2 === 0x2D) {\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) && (c2 === 0x45 || c2 === 0x65) && (c3 === 0x54 || c3 === 0x74) && (c4 === 0x41 || c4 === 0x61) && (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        const attributeList = new Set();\n        let gotPragma = false;\n        let needPragma = null;\n        let charset = null;\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          if (attrRes.attr && !attributeList.has(attrRes.attr.name)) {\n            attributeList.add(attrRes.attr.name);\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n          i = attrRes.i;\n        } while (attrRes.attr);\n        if (needPragma === null) {\n          continue;\n        }\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n        if (charset === null) {\n          continue;\n        }\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n        return charset;\n      } else if (c1 >= 0x41 && c1 <= 0x5A || c1 >= 0x61 && c1 <= 0x7A) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // space or >\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          i = attrRes.i;\n        } while (attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // >\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\n// https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\nfunction getAttribute(buffer, i, l) {\n  for (; i < l; i++) {\n    let c = buffer[i];\n    // space or /\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    }\n    // \">\"\n    if (c === 0x3E) {\n      break;\n    }\n    let name = \"\";\n    let value = \"\";\n    nameLoop: for (; i < l; i++) {\n      c = buffer[i];\n      // \"=\"\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      }\n      // space\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = buffer[i];\n          // space\n          if (isSpaceCharacter(c)) {\n            continue;\n          }\n          // not \"=\"\n          if (c !== 0x3D) {\n            return {\n              attr: {\n                name,\n                value\n              },\n              i\n            };\n          }\n          i++;\n          break nameLoop;\n        }\n        break;\n      }\n      // / or >\n      if (c === 0x2F || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      }\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n    c = buffer[i];\n    // space\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = buffer[i];\n        // space\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    }\n    // \" or '\n    if (c === 0x22 || c === 0x27) {\n      const quote = c;\n      for (i++; i < l; i++) {\n        c = buffer[i];\n        if (c === quote) {\n          i++;\n          return {\n            attr: {\n              name,\n              value\n            },\n            i\n          };\n        }\n\n        // A-Z\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    }\n\n    // >\n    if (c === 0x3E) {\n      return {\n        attr: {\n          name,\n          value\n        },\n        i\n      };\n    }\n\n    // A-Z\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n    for (i++; i < l; i++) {\n      c = buffer[i];\n\n      // space or >\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      }\n\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n  return {\n    i\n  };\n}\nfunction extractCharacterEncodingFromMeta(string) {\n  let position = 0;\n  while (true) {\n    const indexOfCharset = string.substring(position).search(/charset/i);\n    if (indexOfCharset === -1) {\n      return null;\n    }\n    let subPosition = position + indexOfCharset + \"charset\".length;\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n    ++subPosition;\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n    position = subPosition;\n    break;\n  }\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    const nextIndex = string.indexOf(string[position], position + 1);\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    }\n\n    // It is an unmatched quotation mark\n    return null;\n  }\n  if (string.length === position + 1) {\n    return null;\n  }\n  const indexOfASCIIWhitespaceOrSemicolon = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\n  const end = indexOfASCIIWhitespaceOrSemicolon === -1 ? string.length : position + indexOfASCIIWhitespaceOrSemicolon + 1;\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}","map":{"version":3,"names":["whatwgEncoding","require","module","exports","buffer","transportLayerEncodingLabel","defaultEncoding","arguments","length","undefined","encoding","getBOMEncoding","labelToName","prescanMetaCharset","l","Math","min","i","c","c1","c2","c3","c4","c5","cMinus1","cMinus2","isSpaceCharacter","attributeList","Set","gotPragma","needPragma","charset","attrRes","getAttribute","attr","has","name","add","value","extractCharacterEncodingFromMeta","nameLoop","String","fromCharCode","quote","string","position","indexOfCharset","substring","search","subPosition","charCodeAt","nextIndex","indexOf","indexOfASCIIWhitespaceOrSemicolon","end"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/html-encoding-sniffer/lib/html-encoding-sniffer.js"],"sourcesContent":["\"use strict\";\r\nconst whatwgEncoding = require(\"whatwg-encoding\");\r\n\r\n// https://html.spec.whatwg.org/#encoding-sniffing-algorithm\r\nmodule.exports = (buffer, { transportLayerEncodingLabel, defaultEncoding = \"windows-1252\" } = {}) => {\r\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\r\n\r\n  if (encoding === null && transportLayerEncodingLabel !== undefined) {\r\n    encoding = whatwgEncoding.labelToName(transportLayerEncodingLabel);\r\n  }\r\n\r\n  if (encoding === null) {\r\n    encoding = prescanMetaCharset(buffer);\r\n  }\r\n\r\n  if (encoding === null) {\r\n    encoding = defaultEncoding;\r\n  }\r\n\r\n  return encoding;\r\n};\r\n\r\n// https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\r\nfunction prescanMetaCharset(buffer) {\r\n  const l = Math.min(buffer.length, 1024);\r\n  for (let i = 0; i < l; i++) {\r\n    let c = buffer[i];\r\n    if (c === 0x3C) {\r\n      // \"<\"\r\n      const c1 = buffer[i + 1];\r\n      const c2 = buffer[i + 2];\r\n      const c3 = buffer[i + 3];\r\n      const c4 = buffer[i + 4];\r\n      const c5 = buffer[i + 5];\r\n      // !-- (comment start)\r\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\r\n        i += 4;\r\n        for (; i < l; i++) {\r\n          c = buffer[i];\r\n          const cMinus1 = buffer[i - 1];\r\n          const cMinus2 = buffer[i - 2];\r\n          // --> (comment end)\r\n          if (c === 0x3E && cMinus1 === 0x2D && cMinus2 === 0x2D) {\r\n            break;\r\n          }\r\n        }\r\n      } else if ((c1 === 0x4D || c1 === 0x6D) &&\r\n         (c2 === 0x45 || c2 === 0x65) &&\r\n         (c3 === 0x54 || c3 === 0x74) &&\r\n         (c4 === 0x41 || c4 === 0x61) &&\r\n         (isSpaceCharacter(c5) || c5 === 0x2F)) {\r\n        // \"meta\" + space or /\r\n        i += 6;\r\n        const attributeList = new Set();\r\n        let gotPragma = false;\r\n        let needPragma = null;\r\n        let charset = null;\r\n\r\n        let attrRes;\r\n        do {\r\n          attrRes = getAttribute(buffer, i, l);\r\n          if (attrRes.attr && !attributeList.has(attrRes.attr.name)) {\r\n            attributeList.add(attrRes.attr.name);\r\n            if (attrRes.attr.name === \"http-equiv\") {\r\n              gotPragma = attrRes.attr.value === \"content-type\";\r\n            } else if (attrRes.attr.name === \"content\" && !charset) {\r\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\r\n              if (charset !== null) {\r\n                needPragma = true;\r\n              }\r\n            } else if (attrRes.attr.name === \"charset\") {\r\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\r\n              needPragma = false;\r\n            }\r\n          }\r\n          i = attrRes.i;\r\n        } while (attrRes.attr);\r\n\r\n        if (needPragma === null) {\r\n          continue;\r\n        }\r\n        if (needPragma === true && gotPragma === false) {\r\n          continue;\r\n        }\r\n        if (charset === null) {\r\n          continue;\r\n        }\r\n\r\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\r\n          charset = \"UTF-8\";\r\n        }\r\n        if (charset === \"x-user-defined\") {\r\n          charset = \"windows-1252\";\r\n        }\r\n\r\n        return charset;\r\n      } else if ((c1 >= 0x41 && c1 <= 0x5A) || (c1 >= 0x61 && c1 <= 0x7A)) {\r\n        // a-z or A-Z\r\n        for (i += 2; i < l; i++) {\r\n          c = buffer[i];\r\n          // space or >\r\n          if (isSpaceCharacter(c) || c === 0x3E) {\r\n            break;\r\n          }\r\n        }\r\n        let attrRes;\r\n        do {\r\n          attrRes = getAttribute(buffer, i, l);\r\n          i = attrRes.i;\r\n        } while (attrRes.attr);\r\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\r\n        // ! or / or ?\r\n        for (i += 2; i < l; i++) {\r\n          c = buffer[i];\r\n          // >\r\n          if (c === 0x3E) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\r\nfunction getAttribute(buffer, i, l) {\r\n  for (; i < l; i++) {\r\n    let c = buffer[i];\r\n    // space or /\r\n    if (isSpaceCharacter(c) || c === 0x2F) {\r\n      continue;\r\n    }\r\n    // \">\"\r\n    if (c === 0x3E) {\r\n      break;\r\n    }\r\n    let name = \"\";\r\n    let value = \"\";\r\n    nameLoop:for (; i < l; i++) {\r\n      c = buffer[i];\r\n      // \"=\"\r\n      if (c === 0x3D && name !== \"\") {\r\n        i++;\r\n        break;\r\n      }\r\n      // space\r\n      if (isSpaceCharacter(c)) {\r\n        for (i++; i < l; i++) {\r\n          c = buffer[i];\r\n          // space\r\n          if (isSpaceCharacter(c)) {\r\n            continue;\r\n          }\r\n          // not \"=\"\r\n          if (c !== 0x3D) {\r\n            return { attr: { name, value }, i };\r\n          }\r\n\r\n          i++;\r\n          break nameLoop;\r\n        }\r\n        break;\r\n      }\r\n      // / or >\r\n      if (c === 0x2F || c === 0x3E) {\r\n        return { attr: { name, value }, i };\r\n      }\r\n      // A-Z\r\n      if (c >= 0x41 && c <= 0x5A) {\r\n        name += String.fromCharCode(c + 0x20); // lowercase\r\n      } else {\r\n        name += String.fromCharCode(c);\r\n      }\r\n    }\r\n    c = buffer[i];\r\n    // space\r\n    if (isSpaceCharacter(c)) {\r\n      for (i++; i < l; i++) {\r\n        c = buffer[i];\r\n        // space\r\n        if (isSpaceCharacter(c)) {\r\n          continue;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    // \" or '\r\n    if (c === 0x22 || c === 0x27) {\r\n      const quote = c;\r\n      for (i++; i < l; i++) {\r\n        c = buffer[i];\r\n\r\n        if (c === quote) {\r\n          i++;\r\n          return { attr: { name, value }, i };\r\n        }\r\n\r\n        // A-Z\r\n        if (c >= 0x41 && c <= 0x5A) {\r\n          value += String.fromCharCode(c + 0x20); // lowercase\r\n        } else {\r\n          value += String.fromCharCode(c);\r\n        }\r\n      }\r\n    }\r\n\r\n    // >\r\n    if (c === 0x3E) {\r\n      return { attr: { name, value }, i };\r\n    }\r\n\r\n    // A-Z\r\n    if (c >= 0x41 && c <= 0x5A) {\r\n      value += String.fromCharCode(c + 0x20); // lowercase\r\n    } else {\r\n      value += String.fromCharCode(c);\r\n    }\r\n\r\n    for (i++; i < l; i++) {\r\n      c = buffer[i];\r\n\r\n      // space or >\r\n      if (isSpaceCharacter(c) || c === 0x3E) {\r\n        return { attr: { name, value }, i };\r\n      }\r\n\r\n      // A-Z\r\n      if (c >= 0x41 && c <= 0x5A) {\r\n        value += String.fromCharCode(c + 0x20); // lowercase\r\n      } else {\r\n        value += String.fromCharCode(c);\r\n      }\r\n    }\r\n  }\r\n  return { i };\r\n}\r\n\r\nfunction extractCharacterEncodingFromMeta(string) {\r\n  let position = 0;\r\n\r\n  while (true) {\r\n    const indexOfCharset = string.substring(position).search(/charset/i);\r\n\r\n    if (indexOfCharset === -1) {\r\n      return null;\r\n    }\r\n    let subPosition = position + indexOfCharset + \"charset\".length;\r\n\r\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\r\n      ++subPosition;\r\n    }\r\n\r\n    if (string[subPosition] !== \"=\") {\r\n      position = subPosition - 1;\r\n      continue;\r\n    }\r\n\r\n    ++subPosition;\r\n\r\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\r\n      ++subPosition;\r\n    }\r\n\r\n    position = subPosition;\r\n    break;\r\n  }\r\n\r\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\r\n    const nextIndex = string.indexOf(string[position], position + 1);\r\n\r\n    if (nextIndex !== -1) {\r\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\r\n    }\r\n\r\n    // It is an unmatched quotation mark\r\n    return null;\r\n  }\r\n\r\n  if (string.length === position + 1) {\r\n    return null;\r\n  }\r\n\r\n  const indexOfASCIIWhitespaceOrSemicolon = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\r\n  const end = indexOfASCIIWhitespaceOrSemicolon === -1 ?\r\n    string.length :\r\n    position + indexOfASCIIWhitespaceOrSemicolon + 1;\r\n\r\n  return whatwgEncoding.labelToName(string.substring(position, end));\r\n}\r\n\r\nfunction isSpaceCharacter(c) {\r\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}