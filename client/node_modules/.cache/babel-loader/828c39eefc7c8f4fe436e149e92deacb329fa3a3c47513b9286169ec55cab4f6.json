{"ast":null,"code":"\"use strict\";\n\nconst {\n  wrapperForImpl\n} = require(\"../generated/utils\");\n\n// If we were to implement the MutationObserver by spec, the MutationObservers will not be collected by the GC because\n// all the MO are kept in a mutation observer list (https://github.com/jsdom/jsdom/pull/2398/files#r238123889). The\n// mutation observer list is primarily used to invoke the mutation observer callback in the same order than the\n// mutation observer creation.\n// In order to get around this issue, we will assign an increasing id for each mutation observer, this way we would be\n// able to invoke the callback in the creation order without having to keep a list of all the mutation observers.\nlet mutationObserverId = 0;\n\n// https://dom.spec.whatwg.org/#mutationobserver\nclass MutationObserverImpl {\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-mutationobserver\n  constructor(globalObject, args) {\n    const [callback] = args;\n    this._callback = callback;\n    this._nodeList = [];\n    this._recordQueue = [];\n    this._id = ++mutationObserverId;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-observe\n  observe(target, options) {\n    if ((\"attributeOldValue\" in options || \"attributeFilter\" in options) && !(\"attributes\" in options)) {\n      options.attributes = true;\n    }\n    if (\"characterDataOldValue\" in options & !(\"characterData\" in options)) {\n      options.characterData = true;\n    }\n    if (!options.childList && !options.attributes && !options.characterData) {\n      throw new TypeError(\"The options object must set at least one of 'attributes', 'characterData', or 'childList' \" + \"to true.\");\n    } else if (options.attributeOldValue && !options.attributes) {\n      throw new TypeError(\"The options object may only set 'attributeOldValue' to true when 'attributes' is true or \" + \"not present.\");\n    } else if (\"attributeFilter\" in options && !options.attributes) {\n      throw new TypeError(\"The options object may only set 'attributeFilter' when 'attributes' is true or not \" + \"present.\");\n    } else if (options.characterDataOldValue && !options.characterData) {\n      throw new TypeError(\"The options object may only set 'characterDataOldValue' to true when 'characterData' is \" + \"true or not present.\");\n    }\n    const existingRegisteredObserver = target._registeredObserverList.find(registeredObserver => {\n      return registeredObserver.observer === this;\n    });\n    if (existingRegisteredObserver) {\n      for (const node of this._nodeList) {\n        node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n          return registeredObserver.source !== existingRegisteredObserver;\n        });\n      }\n      existingRegisteredObserver.options = options;\n    } else {\n      target._registeredObserverList.push({\n        observer: this,\n        options\n      });\n      this._nodeList.push(target);\n    }\n  }\n\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-disconnect\n  disconnect() {\n    for (const node of this._nodeList) {\n      node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n        return registeredObserver.observer !== this;\n      });\n    }\n    this._recordQueue = [];\n  }\n\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-takerecords\n  takeRecords() {\n    // TODO: revisit if https://github.com/jsdom/webidl2js/pull/108 gets fixed.\n    const records = this._recordQueue.map(wrapperForImpl);\n    this._recordQueue = [];\n    return records;\n  }\n}\nmodule.exports = {\n  implementation: MutationObserverImpl\n};","map":{"version":3,"names":["wrapperForImpl","require","mutationObserverId","MutationObserverImpl","constructor","globalObject","args","callback","_callback","_nodeList","_recordQueue","_id","observe","target","options","attributes","characterData","childList","TypeError","attributeOldValue","characterDataOldValue","existingRegisteredObserver","_registeredObserverList","find","registeredObserver","observer","node","filter","source","push","disconnect","takeRecords","records","map","module","exports","implementation"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/mutation-observer/MutationObserver-impl.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst { wrapperForImpl } = require(\"../generated/utils\");\r\n\r\n// If we were to implement the MutationObserver by spec, the MutationObservers will not be collected by the GC because\r\n// all the MO are kept in a mutation observer list (https://github.com/jsdom/jsdom/pull/2398/files#r238123889). The\r\n// mutation observer list is primarily used to invoke the mutation observer callback in the same order than the\r\n// mutation observer creation.\r\n// In order to get around this issue, we will assign an increasing id for each mutation observer, this way we would be\r\n// able to invoke the callback in the creation order without having to keep a list of all the mutation observers.\r\nlet mutationObserverId = 0;\r\n\r\n// https://dom.spec.whatwg.org/#mutationobserver\r\nclass MutationObserverImpl {\r\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-mutationobserver\r\n  constructor(globalObject, args) {\r\n    const [callback] = args;\r\n\r\n    this._callback = callback;\r\n    this._nodeList = [];\r\n    this._recordQueue = [];\r\n\r\n    this._id = ++mutationObserverId;\r\n  }\r\n\r\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-observe\r\n  observe(target, options) {\r\n    if ((\"attributeOldValue\" in options || \"attributeFilter\" in options) && !(\"attributes\" in options)) {\r\n      options.attributes = true;\r\n    }\r\n\r\n    if (\"characterDataOldValue\" in options & !(\"characterData\" in options)) {\r\n      options.characterData = true;\r\n    }\r\n\r\n    if (!options.childList && !options.attributes && !options.characterData) {\r\n      throw new TypeError(\"The options object must set at least one of 'attributes', 'characterData', or 'childList' \" +\r\n        \"to true.\");\r\n    } else if (options.attributeOldValue && !options.attributes) {\r\n      throw new TypeError(\"The options object may only set 'attributeOldValue' to true when 'attributes' is true or \" +\r\n        \"not present.\");\r\n    } else if ((\"attributeFilter\" in options) && !options.attributes) {\r\n      throw new TypeError(\"The options object may only set 'attributeFilter' when 'attributes' is true or not \" +\r\n        \"present.\");\r\n    } else if (options.characterDataOldValue && !options.characterData) {\r\n      throw new TypeError(\"The options object may only set 'characterDataOldValue' to true when 'characterData' is \" +\r\n        \"true or not present.\");\r\n    }\r\n\r\n    const existingRegisteredObserver = target._registeredObserverList.find(registeredObserver => {\r\n      return registeredObserver.observer === this;\r\n    });\r\n\r\n    if (existingRegisteredObserver) {\r\n      for (const node of this._nodeList) {\r\n        node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\r\n          return registeredObserver.source !== existingRegisteredObserver;\r\n        });\r\n      }\r\n\r\n      existingRegisteredObserver.options = options;\r\n    } else {\r\n      target._registeredObserverList.push({\r\n        observer: this,\r\n        options\r\n      });\r\n\r\n      this._nodeList.push(target);\r\n    }\r\n  }\r\n\r\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-disconnect\r\n  disconnect() {\r\n    for (const node of this._nodeList) {\r\n      node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\r\n        return registeredObserver.observer !== this;\r\n      });\r\n    }\r\n\r\n    this._recordQueue = [];\r\n  }\r\n\r\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-takerecords\r\n  takeRecords() {\r\n    // TODO: revisit if https://github.com/jsdom/webidl2js/pull/108 gets fixed.\r\n    const records = this._recordQueue.map(wrapperForImpl);\r\n    this._recordQueue = [];\r\n\r\n    return records;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  implementation: MutationObserverImpl\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}