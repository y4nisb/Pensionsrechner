{"ast":null,"code":"'use strict';\n\nconst Preprocessor = require('./preprocessor');\nconst unicode = require('../common/unicode');\nconst neTree = require('./named-entity-data');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n  0x80: 0x20ac,\n  0x82: 0x201a,\n  0x83: 0x0192,\n  0x84: 0x201e,\n  0x85: 0x2026,\n  0x86: 0x2020,\n  0x87: 0x2021,\n  0x88: 0x02c6,\n  0x89: 0x2030,\n  0x8a: 0x0160,\n  0x8b: 0x2039,\n  0x8c: 0x0152,\n  0x8e: 0x017d,\n  0x91: 0x2018,\n  0x92: 0x2019,\n  0x93: 0x201c,\n  0x94: 0x201d,\n  0x95: 0x2022,\n  0x96: 0x2013,\n  0x97: 0x2014,\n  0x98: 0x02dc,\n  0x99: 0x2122,\n  0x9a: 0x0161,\n  0x9b: 0x203a,\n  0x9c: 0x0153,\n  0x9e: 0x017e,\n  0x9f: 0x0178\n};\n\n// Named entity tree flags\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isAsciiDigit(cp) {\n  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLowerCodePoint(cp) {\n  return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n  if (cp <= 0xffff) {\n    return String.fromCharCode(cp);\n  }\n  cp -= 0x10000;\n  return String.fromCharCode(cp >>> 10 & 0x3ff | 0xd800) + String.fromCharCode(0xdc00 | cp & 0x3ff);\n}\nfunction toAsciiLowerChar(cp) {\n  return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n  const branchCount = neTree[++nodeIx];\n  let lo = ++nodeIx;\n  let hi = lo + branchCount - 1;\n  while (lo <= hi) {\n    const mid = lo + hi >>> 1;\n    const midCp = neTree[mid];\n    if (midCp < cp) {\n      lo = mid + 1;\n    } else if (midCp > cp) {\n      hi = mid - 1;\n    } else {\n      return neTree[mid + branchCount];\n    }\n  }\n  return -1;\n}\n\n//Tokenizer\nclass Tokenizer {\n  constructor() {\n    this.preprocessor = new Preprocessor();\n    this.tokenQueue = [];\n    this.allowCDATA = false;\n    this.state = DATA_STATE;\n    this.returnState = '';\n    this.charRefCode = -1;\n    this.tempBuff = [];\n    this.lastStartTagName = '';\n    this.consumedAfterSnapshot = -1;\n    this.active = false;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = null;\n  }\n\n  //Errors\n  _err() {\n    // NOTE: err reporting is noop by default. Enabled by mixin.\n  }\n  _errOnNextCodePoint(err) {\n    this._consume();\n    this._err(err);\n    this._unconsume();\n  }\n\n  //API\n  getNextToken() {\n    while (!this.tokenQueue.length && this.active) {\n      this.consumedAfterSnapshot = 0;\n      const cp = this._consume();\n      if (!this._ensureHibernation()) {\n        this[this.state](cp);\n      }\n    }\n    return this.tokenQueue.shift();\n  }\n  write(chunk, isLastChunk) {\n    this.active = true;\n    this.preprocessor.write(chunk, isLastChunk);\n  }\n  insertHtmlAtCurrentPos(chunk) {\n    this.active = true;\n    this.preprocessor.insertHtmlAtCurrentPos(chunk);\n  }\n\n  //Hibernation\n  _ensureHibernation() {\n    if (this.preprocessor.endOfChunkHit) {\n      for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n        this.preprocessor.retreat();\n      }\n      this.active = false;\n      this.tokenQueue.push({\n        type: Tokenizer.HIBERNATION_TOKEN\n      });\n      return true;\n    }\n    return false;\n  }\n\n  //Consumption\n  _consume() {\n    this.consumedAfterSnapshot++;\n    return this.preprocessor.advance();\n  }\n  _unconsume() {\n    this.consumedAfterSnapshot--;\n    this.preprocessor.retreat();\n  }\n  _reconsumeInState(state) {\n    this.state = state;\n    this._unconsume();\n  }\n  _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n    let consumedCount = 0;\n    let isMatch = true;\n    const patternLength = pattern.length;\n    let patternPos = 0;\n    let cp = startCp;\n    let patternCp = void 0;\n    for (; patternPos < patternLength; patternPos++) {\n      if (patternPos > 0) {\n        cp = this._consume();\n        consumedCount++;\n      }\n      if (cp === $.EOF) {\n        isMatch = false;\n        break;\n      }\n      patternCp = pattern[patternPos];\n      if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n        isMatch = false;\n        break;\n      }\n    }\n    if (!isMatch) {\n      while (consumedCount--) {\n        this._unconsume();\n      }\n    }\n    return isMatch;\n  }\n\n  //Temp buffer\n  _isTempBufferEqualToScriptString() {\n    if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n      return false;\n    }\n    for (let i = 0; i < this.tempBuff.length; i++) {\n      if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  //Token creation\n  _createStartTagToken() {\n    this.currentToken = {\n      type: Tokenizer.START_TAG_TOKEN,\n      tagName: '',\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: []\n    };\n  }\n  _createEndTagToken() {\n    this.currentToken = {\n      type: Tokenizer.END_TAG_TOKEN,\n      tagName: '',\n      selfClosing: false,\n      attrs: []\n    };\n  }\n  _createCommentToken() {\n    this.currentToken = {\n      type: Tokenizer.COMMENT_TOKEN,\n      data: ''\n    };\n  }\n  _createDoctypeToken(initialName) {\n    this.currentToken = {\n      type: Tokenizer.DOCTYPE_TOKEN,\n      name: initialName,\n      forceQuirks: false,\n      publicId: null,\n      systemId: null\n    };\n  }\n  _createCharacterToken(type, ch) {\n    this.currentCharacterToken = {\n      type: type,\n      chars: ch\n    };\n  }\n  _createEOFToken() {\n    this.currentToken = {\n      type: Tokenizer.EOF_TOKEN\n    };\n  }\n\n  //Tag attributes\n  _createAttr(attrNameFirstCh) {\n    this.currentAttr = {\n      name: attrNameFirstCh,\n      value: ''\n    };\n  }\n  _leaveAttrName(toState) {\n    if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n      this.currentToken.attrs.push(this.currentAttr);\n    } else {\n      this._err(ERR.duplicateAttribute);\n    }\n    this.state = toState;\n  }\n  _leaveAttrValue(toState) {\n    this.state = toState;\n  }\n\n  //Token emission\n  _emitCurrentToken() {\n    this._emitCurrentCharacterToken();\n    const ct = this.currentToken;\n    this.currentToken = null;\n\n    //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n    if (ct.type === Tokenizer.START_TAG_TOKEN) {\n      this.lastStartTagName = ct.tagName;\n    } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n      if (ct.attrs.length > 0) {\n        this._err(ERR.endTagWithAttributes);\n      }\n      if (ct.selfClosing) {\n        this._err(ERR.endTagWithTrailingSolidus);\n      }\n    }\n    this.tokenQueue.push(ct);\n  }\n  _emitCurrentCharacterToken() {\n    if (this.currentCharacterToken) {\n      this.tokenQueue.push(this.currentCharacterToken);\n      this.currentCharacterToken = null;\n    }\n  }\n  _emitEOFToken() {\n    this._createEOFToken();\n    this._emitCurrentToken();\n  }\n\n  //Characters emission\n\n  //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n  //If we have a sequence of characters that belong to the same group, parser can process it\n  //as a single solid character token.\n  //So, there are 3 types of character tokens in parse5:\n  //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n  //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n  //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n  _appendCharToCurrentCharacterToken(type, ch) {\n    if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n      this._emitCurrentCharacterToken();\n    }\n    if (this.currentCharacterToken) {\n      this.currentCharacterToken.chars += ch;\n    } else {\n      this._createCharacterToken(type, ch);\n    }\n  }\n  _emitCodePoint(cp) {\n    let type = Tokenizer.CHARACTER_TOKEN;\n    if (isWhitespace(cp)) {\n      type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n    } else if (cp === $.NULL) {\n      type = Tokenizer.NULL_CHARACTER_TOKEN;\n    }\n    this._appendCharToCurrentCharacterToken(type, toChar(cp));\n  }\n  _emitSeveralCodePoints(codePoints) {\n    for (let i = 0; i < codePoints.length; i++) {\n      this._emitCodePoint(codePoints[i]);\n    }\n  }\n\n  //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n  //So we can avoid additional checks here.\n  _emitChars(ch) {\n    this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n  }\n\n  // Character reference helpers\n  _matchNamedCharacterReference(startCp) {\n    let result = null;\n    let excess = 1;\n    let i = findNamedEntityTreeBranch(0, startCp);\n    this.tempBuff.push(startCp);\n    while (i > -1) {\n      const current = neTree[i];\n      const inNode = current < MAX_BRANCH_MARKER_VALUE;\n      const nodeWithData = inNode && current & HAS_DATA_FLAG;\n      if (nodeWithData) {\n        //NOTE: we use greedy search, so we continue lookup at this point\n        result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n        excess = 0;\n      }\n      const cp = this._consume();\n      this.tempBuff.push(cp);\n      excess++;\n      if (cp === $.EOF) {\n        break;\n      }\n      if (inNode) {\n        i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n      } else {\n        i = cp === current ? ++i : -1;\n      }\n    }\n    while (excess--) {\n      this.tempBuff.pop();\n      this._unconsume();\n    }\n    return result;\n  }\n  _isCharacterReferenceInAttribute() {\n    return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;\n  }\n  _isCharacterReferenceAttributeQuirk(withSemicolon) {\n    if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n      const nextCp = this._consume();\n      this._unconsume();\n      return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n    }\n    return false;\n  }\n  _flushCodePointsConsumedAsCharacterReference() {\n    if (this._isCharacterReferenceInAttribute()) {\n      for (let i = 0; i < this.tempBuff.length; i++) {\n        this.currentAttr.value += toChar(this.tempBuff[i]);\n      }\n    } else {\n      this._emitSeveralCodePoints(this.tempBuff);\n    }\n    this.tempBuff = [];\n  }\n\n  // State machine\n\n  // Data state\n  //------------------------------------------------------------------\n  [DATA_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n    if (cp === $.LESS_THAN_SIGN) {\n      this.state = TAG_OPEN_STATE;\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = DATA_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this._emitCodePoint(cp);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n\n  //  RCDATA state\n  //------------------------------------------------------------------\n  [RCDATA_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n    if (cp === $.AMPERSAND) {\n      this.returnState = RCDATA_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = RCDATA_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // RAWTEXT state\n  //------------------------------------------------------------------\n  [RAWTEXT_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n    if (cp === $.LESS_THAN_SIGN) {\n      this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // Script data state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n    if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // PLAINTEXT state\n  //------------------------------------------------------------------\n  [PLAINTEXT_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n    if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // Tag open state\n  //------------------------------------------------------------------\n  [TAG_OPEN_STATE](cp) {\n    if (cp === $.EXCLAMATION_MARK) {\n      this.state = MARKUP_DECLARATION_OPEN_STATE;\n    } else if (cp === $.SOLIDUS) {\n      this.state = END_TAG_OPEN_STATE;\n    } else if (isAsciiLetter(cp)) {\n      this._createStartTagToken();\n      this._reconsumeInState(TAG_NAME_STATE);\n    } else if (cp === $.QUESTION_MARK) {\n      this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n      this._createCommentToken();\n      this._reconsumeInState(BOGUS_COMMENT_STATE);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofBeforeTagName);\n      this._emitChars('<');\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.invalidFirstCharacterOfTagName);\n      this._emitChars('<');\n      this._reconsumeInState(DATA_STATE);\n    }\n  }\n\n  // End tag open state\n  //------------------------------------------------------------------\n  [END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n      this._reconsumeInState(TAG_NAME_STATE);\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingEndTagName);\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofBeforeTagName);\n      this._emitChars('</');\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.invalidFirstCharacterOfTagName);\n      this._createCommentToken();\n      this._reconsumeInState(BOGUS_COMMENT_STATE);\n    }\n  }\n\n  // Tag name state\n  //------------------------------------------------------------------\n  [TAG_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n    } else if (cp === $.SOLIDUS) {\n      this.state = SELF_CLOSING_START_TAG_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n      this._emitEOFToken();\n    } else {\n      this.currentToken.tagName += toChar(cp);\n    }\n  }\n\n  // RCDATA less-than sign state\n  //------------------------------------------------------------------\n  [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = RCDATA_END_TAG_OPEN_STATE;\n    } else {\n      this._emitChars('<');\n      this._reconsumeInState(RCDATA_STATE);\n    }\n  }\n\n  // RCDATA end tag open state\n  //------------------------------------------------------------------\n  [RCDATA_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n      this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n      this._reconsumeInState(RCDATA_STATE);\n    }\n  }\n\n  // RCDATA end tag name state\n  //------------------------------------------------------------------\n  [RCDATA_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        }\n        if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        }\n        if (cp === $.GREATER_THAN_SIGN) {\n          this.state = DATA_STATE;\n          this._emitCurrentToken();\n          return;\n        }\n      }\n      this._emitChars('</');\n      this._emitSeveralCodePoints(this.tempBuff);\n      this._reconsumeInState(RCDATA_STATE);\n    }\n  }\n\n  // RAWTEXT less-than sign state\n  //------------------------------------------------------------------\n  [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = RAWTEXT_END_TAG_OPEN_STATE;\n    } else {\n      this._emitChars('<');\n      this._reconsumeInState(RAWTEXT_STATE);\n    }\n  }\n\n  // RAWTEXT end tag open state\n  //------------------------------------------------------------------\n  [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n      this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n      this._reconsumeInState(RAWTEXT_STATE);\n    }\n  }\n\n  // RAWTEXT end tag name state\n  //------------------------------------------------------------------\n  [RAWTEXT_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        }\n        if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        }\n        if (cp === $.GREATER_THAN_SIGN) {\n          this._emitCurrentToken();\n          this.state = DATA_STATE;\n          return;\n        }\n      }\n      this._emitChars('</');\n      this._emitSeveralCodePoints(this.tempBuff);\n      this._reconsumeInState(RAWTEXT_STATE);\n    }\n  }\n\n  // Script data less-than sign state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n    } else if (cp === $.EXCLAMATION_MARK) {\n      this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n      this._emitChars('<!');\n    } else {\n      this._emitChars('<');\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  }\n\n  // Script data end tag open state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n      this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  }\n\n  // Script data end tag name state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        } else if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n          this._emitCurrentToken();\n          this.state = DATA_STATE;\n          return;\n        }\n      }\n      this._emitChars('</');\n      this._emitSeveralCodePoints(this.tempBuff);\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  }\n\n  // Script data escape start state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n      this._emitChars('-');\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  }\n\n  // Script data escape start dash state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n      this._emitChars('-');\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  }\n\n  // Script data escaped state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_ESCAPED_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // Script data escaped dash state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // Script data escaped dash dash state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = SCRIPT_DATA_STATE;\n      this._emitChars('>');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // Script data escaped less-than sign state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n    } else if (isAsciiLetter(cp)) {\n      this.tempBuff = [];\n      this._emitChars('<');\n      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n    } else {\n      this._emitChars('<');\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  }\n\n  // Script data escaped end tag open state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  }\n\n  // Script data escaped end tag name state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        }\n        if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        }\n        if (cp === $.GREATER_THAN_SIGN) {\n          this._emitCurrentToken();\n          this.state = DATA_STATE;\n          return;\n        }\n      }\n      this._emitChars('</');\n      this._emitSeveralCodePoints(this.tempBuff);\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  }\n\n  // Script data double escape start state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n      this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;\n      this._emitCodePoint(cp);\n    } else if (isAsciiUpper(cp)) {\n      this.tempBuff.push(toAsciiLowerCodePoint(cp));\n      this._emitCodePoint(cp);\n    } else if (isAsciiLower(cp)) {\n      this.tempBuff.push(cp);\n      this._emitCodePoint(cp);\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  }\n\n  // Script data double escaped state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n      this._emitChars('<');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // Script data double escaped dash state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n      this._emitChars('<');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // Script data double escaped dash dash state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n      this._emitChars('<');\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = SCRIPT_DATA_STATE;\n      this._emitChars('>');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // Script data double escaped less-than sign state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n      this._emitChars('/');\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n    }\n  }\n\n  // Script data double escape end state\n  //------------------------------------------------------------------\n  [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n      this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n      this._emitCodePoint(cp);\n    } else if (isAsciiUpper(cp)) {\n      this.tempBuff.push(toAsciiLowerCodePoint(cp));\n      this._emitCodePoint(cp);\n    } else if (isAsciiLower(cp)) {\n      this.tempBuff.push(cp);\n      this._emitCodePoint(cp);\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n    }\n  }\n\n  // Before attribute name state\n  //------------------------------------------------------------------\n  [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n    if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n      this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n    } else if (cp === $.EQUALS_SIGN) {\n      this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n      this._createAttr('=');\n      this.state = ATTRIBUTE_NAME_STATE;\n    } else {\n      this._createAttr('');\n      this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n    }\n  }\n\n  // Attribute name state\n  //------------------------------------------------------------------\n  [ATTRIBUTE_NAME_STATE](cp) {\n    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n      this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n      this._unconsume();\n    } else if (cp === $.EQUALS_SIGN) {\n      this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n    } else if (isAsciiUpper(cp)) {\n      this.currentAttr.name += toAsciiLowerChar(cp);\n    } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n      this._err(ERR.unexpectedCharacterInAttributeName);\n      this.currentAttr.name += toChar(cp);\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n    } else {\n      this.currentAttr.name += toChar(cp);\n    }\n  }\n\n  // After attribute name state\n  //------------------------------------------------------------------\n  [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n    if (cp === $.SOLIDUS) {\n      this.state = SELF_CLOSING_START_TAG_STATE;\n    } else if (cp === $.EQUALS_SIGN) {\n      this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n      this._emitEOFToken();\n    } else {\n      this._createAttr('');\n      this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n    }\n  }\n\n  // Before attribute value state\n  //------------------------------------------------------------------\n  [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n    if (cp === $.QUOTATION_MARK) {\n      this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingAttributeValue);\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else {\n      this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n    }\n  }\n\n  // Attribute value (double-quoted) state\n  //------------------------------------------------------------------\n  [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n    if (cp === $.QUOTATION_MARK) {\n      this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n      this._emitEOFToken();\n    } else {\n      this.currentAttr.value += toChar(cp);\n    }\n  }\n\n  // Attribute value (single-quoted) state\n  //------------------------------------------------------------------\n  [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n    if (cp === $.APOSTROPHE) {\n      this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n      this._emitEOFToken();\n    } else {\n      this.currentAttr.value += toChar(cp);\n    }\n  }\n\n  // Attribute value (unquoted) state\n  //------------------------------------------------------------------\n  [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._leaveAttrValue(DATA_STATE);\n      this._emitCurrentToken();\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {\n      this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n      this.currentAttr.value += toChar(cp);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n      this._emitEOFToken();\n    } else {\n      this.currentAttr.value += toChar(cp);\n    }\n  }\n\n  // After attribute value (quoted) state\n  //------------------------------------------------------------------\n  [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n    } else if (cp === $.SOLIDUS) {\n      this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._leaveAttrValue(DATA_STATE);\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingWhitespaceBetweenAttributes);\n      this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n    }\n  }\n\n  // Self-closing start tag state\n  //------------------------------------------------------------------\n  [SELF_CLOSING_START_TAG_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.currentToken.selfClosing = true;\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.unexpectedSolidusInTag);\n      this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n    }\n  }\n\n  // Bogus comment state\n  //------------------------------------------------------------------\n  [BOGUS_COMMENT_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n    } else {\n      this.currentToken.data += toChar(cp);\n    }\n  }\n\n  // Markup declaration open state\n  //------------------------------------------------------------------\n  [MARKUP_DECLARATION_OPEN_STATE](cp) {\n    if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n      this._createCommentToken();\n      this.state = COMMENT_START_STATE;\n    } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n      this.state = DOCTYPE_STATE;\n    } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n      if (this.allowCDATA) {\n        this.state = CDATA_SECTION_STATE;\n      } else {\n        this._err(ERR.cdataInHtmlContent);\n        this._createCommentToken();\n        this.currentToken.data = '[CDATA[';\n        this.state = BOGUS_COMMENT_STATE;\n      }\n    }\n\n    //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(ERR.incorrectlyOpenedComment);\n      this._createCommentToken();\n      this._reconsumeInState(BOGUS_COMMENT_STATE);\n    }\n  }\n\n  // Comment start state\n  //------------------------------------------------------------------\n  [COMMENT_START_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_START_DASH_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptClosingOfEmptyComment);\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else {\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  }\n\n  // Comment start dash state\n  //------------------------------------------------------------------\n  [COMMENT_START_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_END_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptClosingOfEmptyComment);\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '-';\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  }\n\n  // Comment state\n  //------------------------------------------------------------------\n  [COMMENT_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_END_DASH_STATE;\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.currentToken.data += '<';\n      this.state = COMMENT_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += toChar(cp);\n    }\n  }\n\n  // Comment less-than sign state\n  //------------------------------------------------------------------\n  [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.EXCLAMATION_MARK) {\n      this.currentToken.data += '!';\n      this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.currentToken.data += '!';\n    } else {\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  }\n\n  // Comment less-than sign bang state\n  //------------------------------------------------------------------\n  [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n    } else {\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  }\n\n  // Comment less-than sign bang dash state\n  //------------------------------------------------------------------\n  [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n    } else {\n      this._reconsumeInState(COMMENT_END_DASH_STATE);\n    }\n  }\n\n  // Comment less-than sign bang dash dash state\n  //------------------------------------------------------------------\n  [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n    if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n      this._err(ERR.nestedComment);\n    }\n    this._reconsumeInState(COMMENT_END_STATE);\n  }\n\n  // Comment end dash state\n  //------------------------------------------------------------------\n  [COMMENT_END_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_END_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '-';\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  }\n\n  // Comment end state\n  //------------------------------------------------------------------\n  [COMMENT_END_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EXCLAMATION_MARK) {\n      this.state = COMMENT_END_BANG_STATE;\n    } else if (cp === $.HYPHEN_MINUS) {\n      this.currentToken.data += '-';\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '--';\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  }\n\n  // Comment end bang state\n  //------------------------------------------------------------------\n  [COMMENT_END_BANG_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.currentToken.data += '--!';\n      this.state = COMMENT_END_DASH_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.incorrectlyClosedComment);\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '--!';\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  }\n\n  // DOCTYPE state\n  //------------------------------------------------------------------\n  [DOCTYPE_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_DOCTYPE_NAME_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this._createDoctypeToken(null);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingWhitespaceBeforeDoctypeName);\n      this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n    }\n  }\n\n  // Before DOCTYPE name state\n  //------------------------------------------------------------------\n  [BEFORE_DOCTYPE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n    if (isAsciiUpper(cp)) {\n      this._createDoctypeToken(toAsciiLowerChar(cp));\n      this.state = DOCTYPE_NAME_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n      this.state = DOCTYPE_NAME_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypeName);\n      this._createDoctypeToken(null);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this._createDoctypeToken(null);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this._createDoctypeToken(toChar(cp));\n      this.state = DOCTYPE_NAME_STATE;\n    }\n  }\n\n  // DOCTYPE name state\n  //------------------------------------------------------------------\n  [DOCTYPE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = AFTER_DOCTYPE_NAME_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (isAsciiUpper(cp)) {\n      this.currentToken.name += toAsciiLowerChar(cp);\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.name += toChar(cp);\n    }\n  }\n\n  // After DOCTYPE name state\n  //------------------------------------------------------------------\n  [AFTER_DOCTYPE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n      this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n    } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n      this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n    }\n    //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n      this.currentToken.forceQuirks = true;\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  }\n\n  // After DOCTYPE public keyword state\n  //------------------------------------------------------------------\n  [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n    } else if (cp === $.QUOTATION_MARK) {\n      this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypePublicIdentifier);\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  }\n\n  // Before DOCTYPE public identifier state\n  //------------------------------------------------------------------\n  [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n    if (cp === $.QUOTATION_MARK) {\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypePublicIdentifier);\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  }\n\n  // DOCTYPE public identifier (double-quoted) state\n  //------------------------------------------------------------------\n  [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n    if (cp === $.QUOTATION_MARK) {\n      this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypePublicIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.publicId += toChar(cp);\n    }\n  }\n\n  // DOCTYPE public identifier (single-quoted) state\n  //------------------------------------------------------------------\n  [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n    if (cp === $.APOSTROPHE) {\n      this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypePublicIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.publicId += toChar(cp);\n    }\n  }\n\n  // After DOCTYPE public identifier state\n  //------------------------------------------------------------------\n  [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.QUOTATION_MARK) {\n      this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  }\n\n  // Between DOCTYPE public and system identifiers state\n  //------------------------------------------------------------------\n  [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n    if (cp === $.GREATER_THAN_SIGN) {\n      this._emitCurrentToken();\n      this.state = DATA_STATE;\n    } else if (cp === $.QUOTATION_MARK) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  }\n\n  // After DOCTYPE system keyword state\n  //------------------------------------------------------------------\n  [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n    } else if (cp === $.QUOTATION_MARK) {\n      this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypeSystemIdentifier);\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  }\n\n  // Before DOCTYPE system identifier state\n  //------------------------------------------------------------------\n  [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n    if (cp === $.QUOTATION_MARK) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypeSystemIdentifier);\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  }\n\n  // DOCTYPE system identifier (double-quoted) state\n  //------------------------------------------------------------------\n  [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n    if (cp === $.QUOTATION_MARK) {\n      this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypeSystemIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.systemId += toChar(cp);\n    }\n  }\n\n  // DOCTYPE system identifier (single-quoted) state\n  //------------------------------------------------------------------\n  [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n    if (cp === $.APOSTROPHE) {\n      this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n      this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypeSystemIdentifier);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this.currentToken.systemId += toChar(cp);\n    }\n  }\n\n  // After DOCTYPE system identifier state\n  //------------------------------------------------------------------\n  [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n    if (cp === $.GREATER_THAN_SIGN) {\n      this._emitCurrentToken();\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n      this.currentToken.forceQuirks = true;\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  }\n\n  // Bogus DOCTYPE state\n  //------------------------------------------------------------------\n  [BOGUS_DOCTYPE_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this._emitCurrentToken();\n      this.state = DATA_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n    } else if (cp === $.EOF) {\n      this._emitCurrentToken();\n      this._emitEOFToken();\n    }\n  }\n\n  // CDATA section state\n  //------------------------------------------------------------------\n  [CDATA_SECTION_STATE](cp) {\n    if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this.state = CDATA_SECTION_BRACKET_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInCdata);\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n\n  // CDATA section bracket state\n  //------------------------------------------------------------------\n  [CDATA_SECTION_BRACKET_STATE](cp) {\n    if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this.state = CDATA_SECTION_END_STATE;\n    } else {\n      this._emitChars(']');\n      this._reconsumeInState(CDATA_SECTION_STATE);\n    }\n  }\n\n  // CDATA section end state\n  //------------------------------------------------------------------\n  [CDATA_SECTION_END_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n    } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this._emitChars(']');\n    } else {\n      this._emitChars(']]');\n      this._reconsumeInState(CDATA_SECTION_STATE);\n    }\n  }\n\n  // Character reference state\n  //------------------------------------------------------------------\n  [CHARACTER_REFERENCE_STATE](cp) {\n    this.tempBuff = [$.AMPERSAND];\n    if (cp === $.NUMBER_SIGN) {\n      this.tempBuff.push(cp);\n      this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n    } else if (isAsciiAlphaNumeric(cp)) {\n      this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n    } else {\n      this._flushCodePointsConsumedAsCharacterReference();\n      this._reconsumeInState(this.returnState);\n    }\n  }\n\n  // Named character reference state\n  //------------------------------------------------------------------\n  [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n    const matchResult = this._matchNamedCharacterReference(cp);\n\n    //NOTE: matching can be abrupted by hibernation. In that case match\n    //results are no longer valid and we will need to start over.\n    if (this._ensureHibernation()) {\n      this.tempBuff = [$.AMPERSAND];\n    } else if (matchResult) {\n      const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n      if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n        if (!withSemicolon) {\n          this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n        }\n        this.tempBuff = matchResult;\n      }\n      this._flushCodePointsConsumedAsCharacterReference();\n      this.state = this.returnState;\n    } else {\n      this._flushCodePointsConsumedAsCharacterReference();\n      this.state = AMBIGUOUS_AMPERSAND_STATE;\n    }\n  }\n\n  // Ambiguos ampersand state\n  //------------------------------------------------------------------\n  [AMBIGUOUS_AMPERSAND_STATE](cp) {\n    if (isAsciiAlphaNumeric(cp)) {\n      if (this._isCharacterReferenceInAttribute()) {\n        this.currentAttr.value += toChar(cp);\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } else {\n      if (cp === $.SEMICOLON) {\n        this._err(ERR.unknownNamedCharacterReference);\n      }\n      this._reconsumeInState(this.returnState);\n    }\n  }\n\n  // Numeric character reference state\n  //------------------------------------------------------------------\n  [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n    this.charRefCode = 0;\n    if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n      this.tempBuff.push(cp);\n      this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n    } else {\n      this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n    }\n  }\n\n  // Hexademical character reference start state\n  //------------------------------------------------------------------\n  [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n    if (isAsciiHexDigit(cp)) {\n      this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n    } else {\n      this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n      this._flushCodePointsConsumedAsCharacterReference();\n      this._reconsumeInState(this.returnState);\n    }\n  }\n\n  // Decimal character reference start state\n  //------------------------------------------------------------------\n  [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n    if (isAsciiDigit(cp)) {\n      this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n    } else {\n      this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n      this._flushCodePointsConsumedAsCharacterReference();\n      this._reconsumeInState(this.returnState);\n    }\n  }\n\n  // Hexademical character reference state\n  //------------------------------------------------------------------\n  [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n    if (isAsciiUpperHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n    } else if (isAsciiLowerHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n    } else if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n    } else if (cp === $.SEMICOLON) {\n      this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n    } else {\n      this._err(ERR.missingSemicolonAfterCharacterReference);\n      this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n    }\n  }\n\n  // Decimal character reference state\n  //------------------------------------------------------------------\n  [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n    if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n    } else if (cp === $.SEMICOLON) {\n      this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n    } else {\n      this._err(ERR.missingSemicolonAfterCharacterReference);\n      this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n    }\n  }\n\n  // Numeric character reference end state\n  //------------------------------------------------------------------\n  [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n    if (this.charRefCode === $.NULL) {\n      this._err(ERR.nullCharacterReference);\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (this.charRefCode > 0x10ffff) {\n      this._err(ERR.characterReferenceOutsideUnicodeRange);\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (unicode.isSurrogate(this.charRefCode)) {\n      this._err(ERR.surrogateCharacterReference);\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n      this._err(ERR.noncharacterCharacterReference);\n    } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n      this._err(ERR.controlCharacterReference);\n      const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n      if (replacement) {\n        this.charRefCode = replacement;\n      }\n    }\n    this.tempBuff = [this.charRefCode];\n    this._flushCodePointsConsumedAsCharacterReference();\n    this._reconsumeInState(this.returnState);\n  }\n}\n\n//Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n  DATA: DATA_STATE,\n  RCDATA: RCDATA_STATE,\n  RAWTEXT: RAWTEXT_STATE,\n  SCRIPT_DATA: SCRIPT_DATA_STATE,\n  PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function (token, attrName) {\n  for (let i = token.attrs.length - 1; i >= 0; i--) {\n    if (token.attrs[i].name === attrName) {\n      return token.attrs[i].value;\n    }\n  }\n  return null;\n};\nmodule.exports = Tokenizer;","map":{"version":3,"names":["Preprocessor","require","unicode","neTree","ERR","$","CODE_POINTS","$$","CODE_POINT_SEQUENCES","C1_CONTROLS_REFERENCE_REPLACEMENTS","HAS_DATA_FLAG","DATA_DUPLET_FLAG","HAS_BRANCHES_FLAG","MAX_BRANCH_MARKER_VALUE","DATA_STATE","RCDATA_STATE","RAWTEXT_STATE","SCRIPT_DATA_STATE","PLAINTEXT_STATE","TAG_OPEN_STATE","END_TAG_OPEN_STATE","TAG_NAME_STATE","RCDATA_LESS_THAN_SIGN_STATE","RCDATA_END_TAG_OPEN_STATE","RCDATA_END_TAG_NAME_STATE","RAWTEXT_LESS_THAN_SIGN_STATE","RAWTEXT_END_TAG_OPEN_STATE","RAWTEXT_END_TAG_NAME_STATE","SCRIPT_DATA_LESS_THAN_SIGN_STATE","SCRIPT_DATA_END_TAG_OPEN_STATE","SCRIPT_DATA_END_TAG_NAME_STATE","SCRIPT_DATA_ESCAPE_START_STATE","SCRIPT_DATA_ESCAPE_START_DASH_STATE","SCRIPT_DATA_ESCAPED_STATE","SCRIPT_DATA_ESCAPED_DASH_STATE","SCRIPT_DATA_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE","BEFORE_ATTRIBUTE_NAME_STATE","ATTRIBUTE_NAME_STATE","AFTER_ATTRIBUTE_NAME_STATE","BEFORE_ATTRIBUTE_VALUE_STATE","ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE","ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE","ATTRIBUTE_VALUE_UNQUOTED_STATE","AFTER_ATTRIBUTE_VALUE_QUOTED_STATE","SELF_CLOSING_START_TAG_STATE","BOGUS_COMMENT_STATE","MARKUP_DECLARATION_OPEN_STATE","COMMENT_START_STATE","COMMENT_START_DASH_STATE","COMMENT_STATE","COMMENT_LESS_THAN_SIGN_STATE","COMMENT_LESS_THAN_SIGN_BANG_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE","COMMENT_END_DASH_STATE","COMMENT_END_STATE","COMMENT_END_BANG_STATE","DOCTYPE_STATE","BEFORE_DOCTYPE_NAME_STATE","DOCTYPE_NAME_STATE","AFTER_DOCTYPE_NAME_STATE","AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE","AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE","BOGUS_DOCTYPE_STATE","CDATA_SECTION_STATE","CDATA_SECTION_BRACKET_STATE","CDATA_SECTION_END_STATE","CHARACTER_REFERENCE_STATE","NAMED_CHARACTER_REFERENCE_STATE","AMBIGUOUS_AMPERSAND_STATE","NUMERIC_CHARACTER_REFERENCE_STATE","HEXADEMICAL_CHARACTER_REFERENCE_START_STATE","DECIMAL_CHARACTER_REFERENCE_START_STATE","HEXADEMICAL_CHARACTER_REFERENCE_STATE","DECIMAL_CHARACTER_REFERENCE_STATE","NUMERIC_CHARACTER_REFERENCE_END_STATE","isWhitespace","cp","SPACE","LINE_FEED","TABULATION","FORM_FEED","isAsciiDigit","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","isAsciiHexDigit","toAsciiLowerCodePoint","toChar","String","fromCharCode","toAsciiLowerChar","findNamedEntityTreeBranch","nodeIx","branchCount","lo","hi","mid","midCp","Tokenizer","constructor","preprocessor","tokenQueue","allowCDATA","state","returnState","charRefCode","tempBuff","lastStartTagName","consumedAfterSnapshot","active","currentCharacterToken","currentToken","currentAttr","_err","_errOnNextCodePoint","err","_consume","_unconsume","getNextToken","length","_ensureHibernation","shift","write","chunk","isLastChunk","insertHtmlAtCurrentPos","endOfChunkHit","retreat","push","type","HIBERNATION_TOKEN","advance","_reconsumeInState","_consumeSequenceIfMatch","pattern","startCp","caseSensitive","consumedCount","isMatch","patternLength","patternPos","patternCp","EOF","_isTempBufferEqualToScriptString","SCRIPT_STRING","i","_createStartTagToken","START_TAG_TOKEN","tagName","selfClosing","ackSelfClosing","attrs","_createEndTagToken","END_TAG_TOKEN","_createCommentToken","COMMENT_TOKEN","data","_createDoctypeToken","initialName","DOCTYPE_TOKEN","name","forceQuirks","publicId","systemId","_createCharacterToken","ch","chars","_createEOFToken","EOF_TOKEN","_createAttr","attrNameFirstCh","value","_leaveAttrName","toState","getTokenAttr","duplicateAttribute","_leaveAttrValue","_emitCurrentToken","_emitCurrentCharacterToken","ct","endTagWithAttributes","endTagWithTrailingSolidus","_emitEOFToken","_appendCharToCurrentCharacterToken","_emitCodePoint","CHARACTER_TOKEN","WHITESPACE_CHARACTER_TOKEN","NULL","NULL_CHARACTER_TOKEN","_emitSeveralCodePoints","codePoints","_emitChars","_matchNamedCharacterReference","result","excess","current","inNode","nodeWithData","pop","_isCharacterReferenceInAttribute","_isCharacterReferenceAttributeQuirk","withSemicolon","nextCp","EQUALS_SIGN","_flushCodePointsConsumedAsCharacterReference","dropParsedChunk","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","REPLACEMENT_CHARACTER","EXCLAMATION_MARK","SOLIDUS","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","GREATER_THAN_SIGN","missingEndTagName","eofInTag","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","DASH_DASH_STRING","DOCTYPE_STRING","CDATA_START_STRING","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","missingDoctypeName","PUBLIC_STRING","SYSTEM_STRING","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","matchResult","SEMICOLON","missingSemicolonAfterCharacterReference","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","absenceOfDigitsInNumericCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","isSurrogate","surrogateCharacterReference","isUndefinedCodePoint","noncharacterCharacterReference","isControlCodePoint","CARRIAGE_RETURN","controlCharacterReference","replacement","MODE","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","token","attrName","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/parse5/lib/tokenizer/index.js"],"sourcesContent":["'use strict';\r\n\r\nconst Preprocessor = require('./preprocessor');\r\nconst unicode = require('../common/unicode');\r\nconst neTree = require('./named-entity-data');\r\nconst ERR = require('../common/error-codes');\r\n\r\n//Aliases\r\nconst $ = unicode.CODE_POINTS;\r\nconst $$ = unicode.CODE_POINT_SEQUENCES;\r\n\r\n//C1 Unicode control character reference replacements\r\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\r\n    0x80: 0x20ac,\r\n    0x82: 0x201a,\r\n    0x83: 0x0192,\r\n    0x84: 0x201e,\r\n    0x85: 0x2026,\r\n    0x86: 0x2020,\r\n    0x87: 0x2021,\r\n    0x88: 0x02c6,\r\n    0x89: 0x2030,\r\n    0x8a: 0x0160,\r\n    0x8b: 0x2039,\r\n    0x8c: 0x0152,\r\n    0x8e: 0x017d,\r\n    0x91: 0x2018,\r\n    0x92: 0x2019,\r\n    0x93: 0x201c,\r\n    0x94: 0x201d,\r\n    0x95: 0x2022,\r\n    0x96: 0x2013,\r\n    0x97: 0x2014,\r\n    0x98: 0x02dc,\r\n    0x99: 0x2122,\r\n    0x9a: 0x0161,\r\n    0x9b: 0x203a,\r\n    0x9c: 0x0153,\r\n    0x9e: 0x017e,\r\n    0x9f: 0x0178\r\n};\r\n\r\n// Named entity tree flags\r\nconst HAS_DATA_FLAG = 1 << 0;\r\nconst DATA_DUPLET_FLAG = 1 << 1;\r\nconst HAS_BRANCHES_FLAG = 1 << 2;\r\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\r\n\r\n//States\r\nconst DATA_STATE = 'DATA_STATE';\r\nconst RCDATA_STATE = 'RCDATA_STATE';\r\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\r\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\r\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\r\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\r\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\r\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\r\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\r\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\r\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\r\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\r\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\r\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\r\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\r\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\r\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\r\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\r\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\r\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\r\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\r\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\r\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\r\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\r\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\r\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\r\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\r\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\r\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\r\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\r\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\r\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\r\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\r\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\r\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\r\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\r\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\r\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\r\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\r\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\r\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\r\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\r\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\r\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\r\nconst COMMENT_STATE = 'COMMENT_STATE';\r\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\r\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\r\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\r\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\r\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\r\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\r\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\r\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\r\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\r\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\r\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\r\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\r\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\r\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\r\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\r\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\r\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\r\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\r\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\r\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\r\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\r\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\r\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\r\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\r\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\r\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\r\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\r\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\r\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\r\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\r\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\r\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\r\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\r\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\r\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\r\n\r\n//Utils\r\n\r\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\r\n//this functions if they will be situated in another module due to context switch.\r\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\r\nfunction isWhitespace(cp) {\r\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\r\n}\r\n\r\nfunction isAsciiDigit(cp) {\r\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\r\n}\r\n\r\nfunction isAsciiUpper(cp) {\r\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\r\n}\r\n\r\nfunction isAsciiLower(cp) {\r\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\r\n}\r\n\r\nfunction isAsciiLetter(cp) {\r\n    return isAsciiLower(cp) || isAsciiUpper(cp);\r\n}\r\n\r\nfunction isAsciiAlphaNumeric(cp) {\r\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\r\n}\r\n\r\nfunction isAsciiUpperHexDigit(cp) {\r\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\r\n}\r\n\r\nfunction isAsciiLowerHexDigit(cp) {\r\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\r\n}\r\n\r\nfunction isAsciiHexDigit(cp) {\r\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\r\n}\r\n\r\nfunction toAsciiLowerCodePoint(cp) {\r\n    return cp + 0x0020;\r\n}\r\n\r\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\r\n//So, we need to workaround this manually.\r\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\r\nfunction toChar(cp) {\r\n    if (cp <= 0xffff) {\r\n        return String.fromCharCode(cp);\r\n    }\r\n\r\n    cp -= 0x10000;\r\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\r\n}\r\n\r\nfunction toAsciiLowerChar(cp) {\r\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\r\n}\r\n\r\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\r\n    const branchCount = neTree[++nodeIx];\r\n    let lo = ++nodeIx;\r\n    let hi = lo + branchCount - 1;\r\n\r\n    while (lo <= hi) {\r\n        const mid = (lo + hi) >>> 1;\r\n        const midCp = neTree[mid];\r\n\r\n        if (midCp < cp) {\r\n            lo = mid + 1;\r\n        } else if (midCp > cp) {\r\n            hi = mid - 1;\r\n        } else {\r\n            return neTree[mid + branchCount];\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\n//Tokenizer\r\nclass Tokenizer {\r\n    constructor() {\r\n        this.preprocessor = new Preprocessor();\r\n\r\n        this.tokenQueue = [];\r\n\r\n        this.allowCDATA = false;\r\n\r\n        this.state = DATA_STATE;\r\n        this.returnState = '';\r\n\r\n        this.charRefCode = -1;\r\n        this.tempBuff = [];\r\n        this.lastStartTagName = '';\r\n\r\n        this.consumedAfterSnapshot = -1;\r\n        this.active = false;\r\n\r\n        this.currentCharacterToken = null;\r\n        this.currentToken = null;\r\n        this.currentAttr = null;\r\n    }\r\n\r\n    //Errors\r\n    _err() {\r\n        // NOTE: err reporting is noop by default. Enabled by mixin.\r\n    }\r\n\r\n    _errOnNextCodePoint(err) {\r\n        this._consume();\r\n        this._err(err);\r\n        this._unconsume();\r\n    }\r\n\r\n    //API\r\n    getNextToken() {\r\n        while (!this.tokenQueue.length && this.active) {\r\n            this.consumedAfterSnapshot = 0;\r\n\r\n            const cp = this._consume();\r\n\r\n            if (!this._ensureHibernation()) {\r\n                this[this.state](cp);\r\n            }\r\n        }\r\n\r\n        return this.tokenQueue.shift();\r\n    }\r\n\r\n    write(chunk, isLastChunk) {\r\n        this.active = true;\r\n        this.preprocessor.write(chunk, isLastChunk);\r\n    }\r\n\r\n    insertHtmlAtCurrentPos(chunk) {\r\n        this.active = true;\r\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\r\n    }\r\n\r\n    //Hibernation\r\n    _ensureHibernation() {\r\n        if (this.preprocessor.endOfChunkHit) {\r\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\r\n                this.preprocessor.retreat();\r\n            }\r\n\r\n            this.active = false;\r\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    //Consumption\r\n    _consume() {\r\n        this.consumedAfterSnapshot++;\r\n        return this.preprocessor.advance();\r\n    }\r\n\r\n    _unconsume() {\r\n        this.consumedAfterSnapshot--;\r\n        this.preprocessor.retreat();\r\n    }\r\n\r\n    _reconsumeInState(state) {\r\n        this.state = state;\r\n        this._unconsume();\r\n    }\r\n\r\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\r\n        let consumedCount = 0;\r\n        let isMatch = true;\r\n        const patternLength = pattern.length;\r\n        let patternPos = 0;\r\n        let cp = startCp;\r\n        let patternCp = void 0;\r\n\r\n        for (; patternPos < patternLength; patternPos++) {\r\n            if (patternPos > 0) {\r\n                cp = this._consume();\r\n                consumedCount++;\r\n            }\r\n\r\n            if (cp === $.EOF) {\r\n                isMatch = false;\r\n                break;\r\n            }\r\n\r\n            patternCp = pattern[patternPos];\r\n\r\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\r\n                isMatch = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!isMatch) {\r\n            while (consumedCount--) {\r\n                this._unconsume();\r\n            }\r\n        }\r\n\r\n        return isMatch;\r\n    }\r\n\r\n    //Temp buffer\r\n    _isTempBufferEqualToScriptString() {\r\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < this.tempBuff.length; i++) {\r\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //Token creation\r\n    _createStartTagToken() {\r\n        this.currentToken = {\r\n            type: Tokenizer.START_TAG_TOKEN,\r\n            tagName: '',\r\n            selfClosing: false,\r\n            ackSelfClosing: false,\r\n            attrs: []\r\n        };\r\n    }\r\n\r\n    _createEndTagToken() {\r\n        this.currentToken = {\r\n            type: Tokenizer.END_TAG_TOKEN,\r\n            tagName: '',\r\n            selfClosing: false,\r\n            attrs: []\r\n        };\r\n    }\r\n\r\n    _createCommentToken() {\r\n        this.currentToken = {\r\n            type: Tokenizer.COMMENT_TOKEN,\r\n            data: ''\r\n        };\r\n    }\r\n\r\n    _createDoctypeToken(initialName) {\r\n        this.currentToken = {\r\n            type: Tokenizer.DOCTYPE_TOKEN,\r\n            name: initialName,\r\n            forceQuirks: false,\r\n            publicId: null,\r\n            systemId: null\r\n        };\r\n    }\r\n\r\n    _createCharacterToken(type, ch) {\r\n        this.currentCharacterToken = {\r\n            type: type,\r\n            chars: ch\r\n        };\r\n    }\r\n\r\n    _createEOFToken() {\r\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\r\n    }\r\n\r\n    //Tag attributes\r\n    _createAttr(attrNameFirstCh) {\r\n        this.currentAttr = {\r\n            name: attrNameFirstCh,\r\n            value: ''\r\n        };\r\n    }\r\n\r\n    _leaveAttrName(toState) {\r\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\r\n            this.currentToken.attrs.push(this.currentAttr);\r\n        } else {\r\n            this._err(ERR.duplicateAttribute);\r\n        }\r\n\r\n        this.state = toState;\r\n    }\r\n\r\n    _leaveAttrValue(toState) {\r\n        this.state = toState;\r\n    }\r\n\r\n    //Token emission\r\n    _emitCurrentToken() {\r\n        this._emitCurrentCharacterToken();\r\n\r\n        const ct = this.currentToken;\r\n\r\n        this.currentToken = null;\r\n\r\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\r\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\r\n            this.lastStartTagName = ct.tagName;\r\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\r\n            if (ct.attrs.length > 0) {\r\n                this._err(ERR.endTagWithAttributes);\r\n            }\r\n\r\n            if (ct.selfClosing) {\r\n                this._err(ERR.endTagWithTrailingSolidus);\r\n            }\r\n        }\r\n\r\n        this.tokenQueue.push(ct);\r\n    }\r\n\r\n    _emitCurrentCharacterToken() {\r\n        if (this.currentCharacterToken) {\r\n            this.tokenQueue.push(this.currentCharacterToken);\r\n            this.currentCharacterToken = null;\r\n        }\r\n    }\r\n\r\n    _emitEOFToken() {\r\n        this._createEOFToken();\r\n        this._emitCurrentToken();\r\n    }\r\n\r\n    //Characters emission\r\n\r\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\r\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\r\n    //If we have a sequence of characters that belong to the same group, parser can process it\r\n    //as a single solid character token.\r\n    //So, there are 3 types of character tokens in parse5:\r\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\r\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\r\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\r\n    _appendCharToCurrentCharacterToken(type, ch) {\r\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\r\n            this._emitCurrentCharacterToken();\r\n        }\r\n\r\n        if (this.currentCharacterToken) {\r\n            this.currentCharacterToken.chars += ch;\r\n        } else {\r\n            this._createCharacterToken(type, ch);\r\n        }\r\n    }\r\n\r\n    _emitCodePoint(cp) {\r\n        let type = Tokenizer.CHARACTER_TOKEN;\r\n\r\n        if (isWhitespace(cp)) {\r\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\r\n        } else if (cp === $.NULL) {\r\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\r\n        }\r\n\r\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\r\n    }\r\n\r\n    _emitSeveralCodePoints(codePoints) {\r\n        for (let i = 0; i < codePoints.length; i++) {\r\n            this._emitCodePoint(codePoints[i]);\r\n        }\r\n    }\r\n\r\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\r\n    //So we can avoid additional checks here.\r\n    _emitChars(ch) {\r\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\r\n    }\r\n\r\n    // Character reference helpers\r\n    _matchNamedCharacterReference(startCp) {\r\n        let result = null;\r\n        let excess = 1;\r\n        let i = findNamedEntityTreeBranch(0, startCp);\r\n\r\n        this.tempBuff.push(startCp);\r\n\r\n        while (i > -1) {\r\n            const current = neTree[i];\r\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\r\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\r\n\r\n            if (nodeWithData) {\r\n                //NOTE: we use greedy search, so we continue lookup at this point\r\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\r\n                excess = 0;\r\n            }\r\n\r\n            const cp = this._consume();\r\n\r\n            this.tempBuff.push(cp);\r\n            excess++;\r\n\r\n            if (cp === $.EOF) {\r\n                break;\r\n            }\r\n\r\n            if (inNode) {\r\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\r\n            } else {\r\n                i = cp === current ? ++i : -1;\r\n            }\r\n        }\r\n\r\n        while (excess--) {\r\n            this.tempBuff.pop();\r\n            this._unconsume();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    _isCharacterReferenceInAttribute() {\r\n        return (\r\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\r\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\r\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\r\n        );\r\n    }\r\n\r\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\r\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\r\n            const nextCp = this._consume();\r\n\r\n            this._unconsume();\r\n\r\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    _flushCodePointsConsumedAsCharacterReference() {\r\n        if (this._isCharacterReferenceInAttribute()) {\r\n            for (let i = 0; i < this.tempBuff.length; i++) {\r\n                this.currentAttr.value += toChar(this.tempBuff[i]);\r\n            }\r\n        } else {\r\n            this._emitSeveralCodePoints(this.tempBuff);\r\n        }\r\n\r\n        this.tempBuff = [];\r\n    }\r\n\r\n    // State machine\r\n\r\n    // Data state\r\n    //------------------------------------------------------------------\r\n    [DATA_STATE](cp) {\r\n        this.preprocessor.dropParsedChunk();\r\n\r\n        if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = TAG_OPEN_STATE;\r\n        } else if (cp === $.AMPERSAND) {\r\n            this.returnState = DATA_STATE;\r\n            this.state = CHARACTER_REFERENCE_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this._emitCodePoint(cp);\r\n        } else if (cp === $.EOF) {\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    //  RCDATA state\r\n    //------------------------------------------------------------------\r\n    [RCDATA_STATE](cp) {\r\n        this.preprocessor.dropParsedChunk();\r\n\r\n        if (cp === $.AMPERSAND) {\r\n            this.returnState = RCDATA_STATE;\r\n            this.state = CHARACTER_REFERENCE_STATE;\r\n        } else if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // RAWTEXT state\r\n    //------------------------------------------------------------------\r\n    [RAWTEXT_STATE](cp) {\r\n        this.preprocessor.dropParsedChunk();\r\n\r\n        if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // Script data state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_STATE](cp) {\r\n        this.preprocessor.dropParsedChunk();\r\n\r\n        if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // PLAINTEXT state\r\n    //------------------------------------------------------------------\r\n    [PLAINTEXT_STATE](cp) {\r\n        this.preprocessor.dropParsedChunk();\r\n\r\n        if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // Tag open state\r\n    //------------------------------------------------------------------\r\n    [TAG_OPEN_STATE](cp) {\r\n        if (cp === $.EXCLAMATION_MARK) {\r\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\r\n        } else if (cp === $.SOLIDUS) {\r\n            this.state = END_TAG_OPEN_STATE;\r\n        } else if (isAsciiLetter(cp)) {\r\n            this._createStartTagToken();\r\n            this._reconsumeInState(TAG_NAME_STATE);\r\n        } else if (cp === $.QUESTION_MARK) {\r\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\r\n            this._createCommentToken();\r\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofBeforeTagName);\r\n            this._emitChars('<');\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.invalidFirstCharacterOfTagName);\r\n            this._emitChars('<');\r\n            this._reconsumeInState(DATA_STATE);\r\n        }\r\n    }\r\n\r\n    // End tag open state\r\n    //------------------------------------------------------------------\r\n    [END_TAG_OPEN_STATE](cp) {\r\n        if (isAsciiLetter(cp)) {\r\n            this._createEndTagToken();\r\n            this._reconsumeInState(TAG_NAME_STATE);\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.missingEndTagName);\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofBeforeTagName);\r\n            this._emitChars('</');\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.invalidFirstCharacterOfTagName);\r\n            this._createCommentToken();\r\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\r\n        }\r\n    }\r\n\r\n    // Tag name state\r\n    //------------------------------------------------------------------\r\n    [TAG_NAME_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\r\n        } else if (cp === $.SOLIDUS) {\r\n            this.state = SELF_CLOSING_START_TAG_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (isAsciiUpper(cp)) {\r\n            this.currentToken.tagName += toAsciiLowerChar(cp);\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInTag);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.tagName += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // RCDATA less-than sign state\r\n    //------------------------------------------------------------------\r\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\r\n        if (cp === $.SOLIDUS) {\r\n            this.tempBuff = [];\r\n            this.state = RCDATA_END_TAG_OPEN_STATE;\r\n        } else {\r\n            this._emitChars('<');\r\n            this._reconsumeInState(RCDATA_STATE);\r\n        }\r\n    }\r\n\r\n    // RCDATA end tag open state\r\n    //------------------------------------------------------------------\r\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\r\n        if (isAsciiLetter(cp)) {\r\n            this._createEndTagToken();\r\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\r\n        } else {\r\n            this._emitChars('</');\r\n            this._reconsumeInState(RCDATA_STATE);\r\n        }\r\n    }\r\n\r\n    // RCDATA end tag name state\r\n    //------------------------------------------------------------------\r\n    [RCDATA_END_TAG_NAME_STATE](cp) {\r\n        if (isAsciiUpper(cp)) {\r\n            this.currentToken.tagName += toAsciiLowerChar(cp);\r\n            this.tempBuff.push(cp);\r\n        } else if (isAsciiLower(cp)) {\r\n            this.currentToken.tagName += toChar(cp);\r\n            this.tempBuff.push(cp);\r\n        } else {\r\n            if (this.lastStartTagName === this.currentToken.tagName) {\r\n                if (isWhitespace(cp)) {\r\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\r\n                    return;\r\n                }\r\n\r\n                if (cp === $.SOLIDUS) {\r\n                    this.state = SELF_CLOSING_START_TAG_STATE;\r\n                    return;\r\n                }\r\n\r\n                if (cp === $.GREATER_THAN_SIGN) {\r\n                    this.state = DATA_STATE;\r\n                    this._emitCurrentToken();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._emitChars('</');\r\n            this._emitSeveralCodePoints(this.tempBuff);\r\n            this._reconsumeInState(RCDATA_STATE);\r\n        }\r\n    }\r\n\r\n    // RAWTEXT less-than sign state\r\n    //------------------------------------------------------------------\r\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\r\n        if (cp === $.SOLIDUS) {\r\n            this.tempBuff = [];\r\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\r\n        } else {\r\n            this._emitChars('<');\r\n            this._reconsumeInState(RAWTEXT_STATE);\r\n        }\r\n    }\r\n\r\n    // RAWTEXT end tag open state\r\n    //------------------------------------------------------------------\r\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\r\n        if (isAsciiLetter(cp)) {\r\n            this._createEndTagToken();\r\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\r\n        } else {\r\n            this._emitChars('</');\r\n            this._reconsumeInState(RAWTEXT_STATE);\r\n        }\r\n    }\r\n\r\n    // RAWTEXT end tag name state\r\n    //------------------------------------------------------------------\r\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\r\n        if (isAsciiUpper(cp)) {\r\n            this.currentToken.tagName += toAsciiLowerChar(cp);\r\n            this.tempBuff.push(cp);\r\n        } else if (isAsciiLower(cp)) {\r\n            this.currentToken.tagName += toChar(cp);\r\n            this.tempBuff.push(cp);\r\n        } else {\r\n            if (this.lastStartTagName === this.currentToken.tagName) {\r\n                if (isWhitespace(cp)) {\r\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\r\n                    return;\r\n                }\r\n\r\n                if (cp === $.SOLIDUS) {\r\n                    this.state = SELF_CLOSING_START_TAG_STATE;\r\n                    return;\r\n                }\r\n\r\n                if (cp === $.GREATER_THAN_SIGN) {\r\n                    this._emitCurrentToken();\r\n                    this.state = DATA_STATE;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._emitChars('</');\r\n            this._emitSeveralCodePoints(this.tempBuff);\r\n            this._reconsumeInState(RAWTEXT_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data less-than sign state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\r\n        if (cp === $.SOLIDUS) {\r\n            this.tempBuff = [];\r\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\r\n        } else if (cp === $.EXCLAMATION_MARK) {\r\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\r\n            this._emitChars('<!');\r\n        } else {\r\n            this._emitChars('<');\r\n            this._reconsumeInState(SCRIPT_DATA_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data end tag open state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\r\n        if (isAsciiLetter(cp)) {\r\n            this._createEndTagToken();\r\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\r\n        } else {\r\n            this._emitChars('</');\r\n            this._reconsumeInState(SCRIPT_DATA_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data end tag name state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\r\n        if (isAsciiUpper(cp)) {\r\n            this.currentToken.tagName += toAsciiLowerChar(cp);\r\n            this.tempBuff.push(cp);\r\n        } else if (isAsciiLower(cp)) {\r\n            this.currentToken.tagName += toChar(cp);\r\n            this.tempBuff.push(cp);\r\n        } else {\r\n            if (this.lastStartTagName === this.currentToken.tagName) {\r\n                if (isWhitespace(cp)) {\r\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\r\n                    return;\r\n                } else if (cp === $.SOLIDUS) {\r\n                    this.state = SELF_CLOSING_START_TAG_STATE;\r\n                    return;\r\n                } else if (cp === $.GREATER_THAN_SIGN) {\r\n                    this._emitCurrentToken();\r\n                    this.state = DATA_STATE;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._emitChars('</');\r\n            this._emitSeveralCodePoints(this.tempBuff);\r\n            this._reconsumeInState(SCRIPT_DATA_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data escape start state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\r\n            this._emitChars('-');\r\n        } else {\r\n            this._reconsumeInState(SCRIPT_DATA_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data escape start dash state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\r\n            this._emitChars('-');\r\n        } else {\r\n            this._reconsumeInState(SCRIPT_DATA_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data escaped state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\r\n            this._emitChars('-');\r\n        } else if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // Script data escaped dash state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\r\n            this._emitChars('-');\r\n        } else if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // Script data escaped dash dash state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this._emitChars('-');\r\n        } else if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = SCRIPT_DATA_STATE;\r\n            this._emitChars('>');\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // Script data escaped less-than sign state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\r\n        if (cp === $.SOLIDUS) {\r\n            this.tempBuff = [];\r\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\r\n        } else if (isAsciiLetter(cp)) {\r\n            this.tempBuff = [];\r\n            this._emitChars('<');\r\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\r\n        } else {\r\n            this._emitChars('<');\r\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data escaped end tag open state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\r\n        if (isAsciiLetter(cp)) {\r\n            this._createEndTagToken();\r\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\r\n        } else {\r\n            this._emitChars('</');\r\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data escaped end tag name state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\r\n        if (isAsciiUpper(cp)) {\r\n            this.currentToken.tagName += toAsciiLowerChar(cp);\r\n            this.tempBuff.push(cp);\r\n        } else if (isAsciiLower(cp)) {\r\n            this.currentToken.tagName += toChar(cp);\r\n            this.tempBuff.push(cp);\r\n        } else {\r\n            if (this.lastStartTagName === this.currentToken.tagName) {\r\n                if (isWhitespace(cp)) {\r\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\r\n                    return;\r\n                }\r\n\r\n                if (cp === $.SOLIDUS) {\r\n                    this.state = SELF_CLOSING_START_TAG_STATE;\r\n                    return;\r\n                }\r\n\r\n                if (cp === $.GREATER_THAN_SIGN) {\r\n                    this._emitCurrentToken();\r\n                    this.state = DATA_STATE;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._emitChars('</');\r\n            this._emitSeveralCodePoints(this.tempBuff);\r\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data double escape start state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\r\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\r\n            this.state = this._isTempBufferEqualToScriptString()\r\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\r\n                : SCRIPT_DATA_ESCAPED_STATE;\r\n            this._emitCodePoint(cp);\r\n        } else if (isAsciiUpper(cp)) {\r\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\r\n            this._emitCodePoint(cp);\r\n        } else if (isAsciiLower(cp)) {\r\n            this.tempBuff.push(cp);\r\n            this._emitCodePoint(cp);\r\n        } else {\r\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data double escaped state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\r\n            this._emitChars('-');\r\n        } else if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\r\n            this._emitChars('<');\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // Script data double escaped dash state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\r\n            this._emitChars('-');\r\n        } else if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\r\n            this._emitChars('<');\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // Script data double escaped dash dash state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this._emitChars('-');\r\n        } else if (cp === $.LESS_THAN_SIGN) {\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\r\n            this._emitChars('<');\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = SCRIPT_DATA_STATE;\r\n            this._emitChars('>');\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\r\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // Script data double escaped less-than sign state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\r\n        if (cp === $.SOLIDUS) {\r\n            this.tempBuff = [];\r\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\r\n            this._emitChars('/');\r\n        } else {\r\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\r\n        }\r\n    }\r\n\r\n    // Script data double escape end state\r\n    //------------------------------------------------------------------\r\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\r\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\r\n            this.state = this._isTempBufferEqualToScriptString()\r\n                ? SCRIPT_DATA_ESCAPED_STATE\r\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\r\n\r\n            this._emitCodePoint(cp);\r\n        } else if (isAsciiUpper(cp)) {\r\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\r\n            this._emitCodePoint(cp);\r\n        } else if (isAsciiLower(cp)) {\r\n            this.tempBuff.push(cp);\r\n            this._emitCodePoint(cp);\r\n        } else {\r\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\r\n        }\r\n    }\r\n\r\n    // Before attribute name state\r\n    //------------------------------------------------------------------\r\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            return;\r\n        }\r\n\r\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\r\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\r\n        } else if (cp === $.EQUALS_SIGN) {\r\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\r\n            this._createAttr('=');\r\n            this.state = ATTRIBUTE_NAME_STATE;\r\n        } else {\r\n            this._createAttr('');\r\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\r\n        }\r\n    }\r\n\r\n    // Attribute name state\r\n    //------------------------------------------------------------------\r\n    [ATTRIBUTE_NAME_STATE](cp) {\r\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\r\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\r\n            this._unconsume();\r\n        } else if (cp === $.EQUALS_SIGN) {\r\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\r\n        } else if (isAsciiUpper(cp)) {\r\n            this.currentAttr.name += toAsciiLowerChar(cp);\r\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\r\n            this._err(ERR.unexpectedCharacterInAttributeName);\r\n            this.currentAttr.name += toChar(cp);\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\r\n        } else {\r\n            this.currentAttr.name += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // After attribute name state\r\n    //------------------------------------------------------------------\r\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            return;\r\n        }\r\n\r\n        if (cp === $.SOLIDUS) {\r\n            this.state = SELF_CLOSING_START_TAG_STATE;\r\n        } else if (cp === $.EQUALS_SIGN) {\r\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInTag);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._createAttr('');\r\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\r\n        }\r\n    }\r\n\r\n    // Before attribute value state\r\n    //------------------------------------------------------------------\r\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            return;\r\n        }\r\n\r\n        if (cp === $.QUOTATION_MARK) {\r\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\r\n        } else if (cp === $.APOSTROPHE) {\r\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.missingAttributeValue);\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else {\r\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\r\n        }\r\n    }\r\n\r\n    // Attribute value (double-quoted) state\r\n    //------------------------------------------------------------------\r\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\r\n        if (cp === $.QUOTATION_MARK) {\r\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\r\n        } else if (cp === $.AMPERSAND) {\r\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\r\n            this.state = CHARACTER_REFERENCE_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInTag);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentAttr.value += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // Attribute value (single-quoted) state\r\n    //------------------------------------------------------------------\r\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\r\n        if (cp === $.APOSTROPHE) {\r\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\r\n        } else if (cp === $.AMPERSAND) {\r\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\r\n            this.state = CHARACTER_REFERENCE_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInTag);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentAttr.value += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // Attribute value (unquoted) state\r\n    //------------------------------------------------------------------\r\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\r\n        } else if (cp === $.AMPERSAND) {\r\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\r\n            this.state = CHARACTER_REFERENCE_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._leaveAttrValue(DATA_STATE);\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (\r\n            cp === $.QUOTATION_MARK ||\r\n            cp === $.APOSTROPHE ||\r\n            cp === $.LESS_THAN_SIGN ||\r\n            cp === $.EQUALS_SIGN ||\r\n            cp === $.GRAVE_ACCENT\r\n        ) {\r\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\r\n            this.currentAttr.value += toChar(cp);\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInTag);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentAttr.value += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // After attribute value (quoted) state\r\n    //------------------------------------------------------------------\r\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\r\n        } else if (cp === $.SOLIDUS) {\r\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._leaveAttrValue(DATA_STATE);\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInTag);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.missingWhitespaceBetweenAttributes);\r\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\r\n        }\r\n    }\r\n\r\n    // Self-closing start tag state\r\n    //------------------------------------------------------------------\r\n    [SELF_CLOSING_START_TAG_STATE](cp) {\r\n        if (cp === $.GREATER_THAN_SIGN) {\r\n            this.currentToken.selfClosing = true;\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInTag);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.unexpectedSolidusInTag);\r\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\r\n        }\r\n    }\r\n\r\n    // Bogus comment state\r\n    //------------------------------------------------------------------\r\n    [BOGUS_COMMENT_STATE](cp) {\r\n        if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\r\n        } else {\r\n            this.currentToken.data += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // Markup declaration open state\r\n    //------------------------------------------------------------------\r\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\r\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\r\n            this._createCommentToken();\r\n            this.state = COMMENT_START_STATE;\r\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\r\n            this.state = DOCTYPE_STATE;\r\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\r\n            if (this.allowCDATA) {\r\n                this.state = CDATA_SECTION_STATE;\r\n            } else {\r\n                this._err(ERR.cdataInHtmlContent);\r\n                this._createCommentToken();\r\n                this.currentToken.data = '[CDATA[';\r\n                this.state = BOGUS_COMMENT_STATE;\r\n            }\r\n        }\r\n\r\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\r\n        //results are no longer valid and we will need to start over.\r\n        else if (!this._ensureHibernation()) {\r\n            this._err(ERR.incorrectlyOpenedComment);\r\n            this._createCommentToken();\r\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\r\n        }\r\n    }\r\n\r\n    // Comment start state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_START_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = COMMENT_START_DASH_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.abruptClosingOfEmptyComment);\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else {\r\n            this._reconsumeInState(COMMENT_STATE);\r\n        }\r\n    }\r\n\r\n    // Comment start dash state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_START_DASH_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = COMMENT_END_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.abruptClosingOfEmptyComment);\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInComment);\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.data += '-';\r\n            this._reconsumeInState(COMMENT_STATE);\r\n        }\r\n    }\r\n\r\n    // Comment state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = COMMENT_END_DASH_STATE;\r\n        } else if (cp === $.LESS_THAN_SIGN) {\r\n            this.currentToken.data += '<';\r\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInComment);\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.data += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // Comment less-than sign state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\r\n        if (cp === $.EXCLAMATION_MARK) {\r\n            this.currentToken.data += '!';\r\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\r\n        } else if (cp === $.LESS_THAN_SIGN) {\r\n            this.currentToken.data += '!';\r\n        } else {\r\n            this._reconsumeInState(COMMENT_STATE);\r\n        }\r\n    }\r\n\r\n    // Comment less-than sign bang state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\r\n        } else {\r\n            this._reconsumeInState(COMMENT_STATE);\r\n        }\r\n    }\r\n\r\n    // Comment less-than sign bang dash state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\r\n        } else {\r\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\r\n        }\r\n    }\r\n\r\n    // Comment less-than sign bang dash dash state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\r\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\r\n            this._err(ERR.nestedComment);\r\n        }\r\n\r\n        this._reconsumeInState(COMMENT_END_STATE);\r\n    }\r\n\r\n    // Comment end dash state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_END_DASH_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.state = COMMENT_END_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInComment);\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.data += '-';\r\n            this._reconsumeInState(COMMENT_STATE);\r\n        }\r\n    }\r\n\r\n    // Comment end state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_END_STATE](cp) {\r\n        if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EXCLAMATION_MARK) {\r\n            this.state = COMMENT_END_BANG_STATE;\r\n        } else if (cp === $.HYPHEN_MINUS) {\r\n            this.currentToken.data += '-';\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInComment);\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.data += '--';\r\n            this._reconsumeInState(COMMENT_STATE);\r\n        }\r\n    }\r\n\r\n    // Comment end bang state\r\n    //------------------------------------------------------------------\r\n    [COMMENT_END_BANG_STATE](cp) {\r\n        if (cp === $.HYPHEN_MINUS) {\r\n            this.currentToken.data += '--!';\r\n            this.state = COMMENT_END_DASH_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.incorrectlyClosedComment);\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInComment);\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.data += '--!';\r\n            this._reconsumeInState(COMMENT_STATE);\r\n        }\r\n    }\r\n\r\n    // DOCTYPE state\r\n    //------------------------------------------------------------------\r\n    [DOCTYPE_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this._createDoctypeToken(null);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\r\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\r\n        }\r\n    }\r\n\r\n    // Before DOCTYPE name state\r\n    //------------------------------------------------------------------\r\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            return;\r\n        }\r\n\r\n        if (isAsciiUpper(cp)) {\r\n            this._createDoctypeToken(toAsciiLowerChar(cp));\r\n            this.state = DOCTYPE_NAME_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\r\n            this.state = DOCTYPE_NAME_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.missingDoctypeName);\r\n            this._createDoctypeToken(null);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this._createDoctypeToken(null);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._createDoctypeToken(toChar(cp));\r\n            this.state = DOCTYPE_NAME_STATE;\r\n        }\r\n    }\r\n\r\n    // DOCTYPE name state\r\n    //------------------------------------------------------------------\r\n    [DOCTYPE_NAME_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            this.state = AFTER_DOCTYPE_NAME_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (isAsciiUpper(cp)) {\r\n            this.currentToken.name += toAsciiLowerChar(cp);\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.name += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // After DOCTYPE name state\r\n    //------------------------------------------------------------------\r\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            return;\r\n        }\r\n\r\n        if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\r\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\r\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\r\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\r\n        }\r\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\r\n        //results are no longer valid and we will need to start over.\r\n        else if (!this._ensureHibernation()) {\r\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\r\n            this.currentToken.forceQuirks = true;\r\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\r\n        }\r\n    }\r\n\r\n    // After DOCTYPE public keyword state\r\n    //------------------------------------------------------------------\r\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\r\n        } else if (cp === $.QUOTATION_MARK) {\r\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\r\n            this.currentToken.publicId = '';\r\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\r\n        } else if (cp === $.APOSTROPHE) {\r\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\r\n            this.currentToken.publicId = '';\r\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.missingDoctypePublicIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\r\n        }\r\n    }\r\n\r\n    // Before DOCTYPE public identifier state\r\n    //------------------------------------------------------------------\r\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            return;\r\n        }\r\n\r\n        if (cp === $.QUOTATION_MARK) {\r\n            this.currentToken.publicId = '';\r\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\r\n        } else if (cp === $.APOSTROPHE) {\r\n            this.currentToken.publicId = '';\r\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.missingDoctypePublicIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\r\n        }\r\n    }\r\n\r\n    // DOCTYPE public identifier (double-quoted) state\r\n    //------------------------------------------------------------------\r\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\r\n        if (cp === $.QUOTATION_MARK) {\r\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.abruptDoctypePublicIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.publicId += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // DOCTYPE public identifier (single-quoted) state\r\n    //------------------------------------------------------------------\r\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\r\n        if (cp === $.APOSTROPHE) {\r\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.abruptDoctypePublicIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.publicId += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // After DOCTYPE public identifier state\r\n    //------------------------------------------------------------------\r\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.QUOTATION_MARK) {\r\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\r\n            this.currentToken.systemId = '';\r\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\r\n        } else if (cp === $.APOSTROPHE) {\r\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\r\n            this.currentToken.systemId = '';\r\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\r\n        }\r\n    }\r\n\r\n    // Between DOCTYPE public and system identifiers state\r\n    //------------------------------------------------------------------\r\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            return;\r\n        }\r\n\r\n        if (cp === $.GREATER_THAN_SIGN) {\r\n            this._emitCurrentToken();\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.QUOTATION_MARK) {\r\n            this.currentToken.systemId = '';\r\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\r\n        } else if (cp === $.APOSTROPHE) {\r\n            this.currentToken.systemId = '';\r\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\r\n        }\r\n    }\r\n\r\n    // After DOCTYPE system keyword state\r\n    //------------------------------------------------------------------\r\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\r\n        } else if (cp === $.QUOTATION_MARK) {\r\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\r\n            this.currentToken.systemId = '';\r\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\r\n        } else if (cp === $.APOSTROPHE) {\r\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\r\n            this.currentToken.systemId = '';\r\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.missingDoctypeSystemIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\r\n        }\r\n    }\r\n\r\n    // Before DOCTYPE system identifier state\r\n    //------------------------------------------------------------------\r\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            return;\r\n        }\r\n\r\n        if (cp === $.QUOTATION_MARK) {\r\n            this.currentToken.systemId = '';\r\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\r\n        } else if (cp === $.APOSTROPHE) {\r\n            this.currentToken.systemId = '';\r\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.missingDoctypeSystemIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this.state = DATA_STATE;\r\n            this._emitCurrentToken();\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\r\n        }\r\n    }\r\n\r\n    // DOCTYPE system identifier (double-quoted) state\r\n    //------------------------------------------------------------------\r\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\r\n        if (cp === $.QUOTATION_MARK) {\r\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.abruptDoctypeSystemIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.systemId += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // DOCTYPE system identifier (single-quoted) state\r\n    //------------------------------------------------------------------\r\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\r\n        if (cp === $.APOSTROPHE) {\r\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\r\n        } else if (cp === $.GREATER_THAN_SIGN) {\r\n            this._err(ERR.abruptDoctypeSystemIdentifier);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this.currentToken.systemId += toChar(cp);\r\n        }\r\n    }\r\n\r\n    // After DOCTYPE system identifier state\r\n    //------------------------------------------------------------------\r\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\r\n        if (isWhitespace(cp)) {\r\n            return;\r\n        }\r\n\r\n        if (cp === $.GREATER_THAN_SIGN) {\r\n            this._emitCurrentToken();\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInDoctype);\r\n            this.currentToken.forceQuirks = true;\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\r\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\r\n        }\r\n    }\r\n\r\n    // Bogus DOCTYPE state\r\n    //------------------------------------------------------------------\r\n    [BOGUS_DOCTYPE_STATE](cp) {\r\n        if (cp === $.GREATER_THAN_SIGN) {\r\n            this._emitCurrentToken();\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.NULL) {\r\n            this._err(ERR.unexpectedNullCharacter);\r\n        } else if (cp === $.EOF) {\r\n            this._emitCurrentToken();\r\n            this._emitEOFToken();\r\n        }\r\n    }\r\n\r\n    // CDATA section state\r\n    //------------------------------------------------------------------\r\n    [CDATA_SECTION_STATE](cp) {\r\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\r\n            this.state = CDATA_SECTION_BRACKET_STATE;\r\n        } else if (cp === $.EOF) {\r\n            this._err(ERR.eofInCdata);\r\n            this._emitEOFToken();\r\n        } else {\r\n            this._emitCodePoint(cp);\r\n        }\r\n    }\r\n\r\n    // CDATA section bracket state\r\n    //------------------------------------------------------------------\r\n    [CDATA_SECTION_BRACKET_STATE](cp) {\r\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\r\n            this.state = CDATA_SECTION_END_STATE;\r\n        } else {\r\n            this._emitChars(']');\r\n            this._reconsumeInState(CDATA_SECTION_STATE);\r\n        }\r\n    }\r\n\r\n    // CDATA section end state\r\n    //------------------------------------------------------------------\r\n    [CDATA_SECTION_END_STATE](cp) {\r\n        if (cp === $.GREATER_THAN_SIGN) {\r\n            this.state = DATA_STATE;\r\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\r\n            this._emitChars(']');\r\n        } else {\r\n            this._emitChars(']]');\r\n            this._reconsumeInState(CDATA_SECTION_STATE);\r\n        }\r\n    }\r\n\r\n    // Character reference state\r\n    //------------------------------------------------------------------\r\n    [CHARACTER_REFERENCE_STATE](cp) {\r\n        this.tempBuff = [$.AMPERSAND];\r\n\r\n        if (cp === $.NUMBER_SIGN) {\r\n            this.tempBuff.push(cp);\r\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\r\n        } else if (isAsciiAlphaNumeric(cp)) {\r\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\r\n        } else {\r\n            this._flushCodePointsConsumedAsCharacterReference();\r\n            this._reconsumeInState(this.returnState);\r\n        }\r\n    }\r\n\r\n    // Named character reference state\r\n    //------------------------------------------------------------------\r\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\r\n        const matchResult = this._matchNamedCharacterReference(cp);\r\n\r\n        //NOTE: matching can be abrupted by hibernation. In that case match\r\n        //results are no longer valid and we will need to start over.\r\n        if (this._ensureHibernation()) {\r\n            this.tempBuff = [$.AMPERSAND];\r\n        } else if (matchResult) {\r\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\r\n\r\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\r\n                if (!withSemicolon) {\r\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\r\n                }\r\n\r\n                this.tempBuff = matchResult;\r\n            }\r\n\r\n            this._flushCodePointsConsumedAsCharacterReference();\r\n            this.state = this.returnState;\r\n        } else {\r\n            this._flushCodePointsConsumedAsCharacterReference();\r\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\r\n        }\r\n    }\r\n\r\n    // Ambiguos ampersand state\r\n    //------------------------------------------------------------------\r\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\r\n        if (isAsciiAlphaNumeric(cp)) {\r\n            if (this._isCharacterReferenceInAttribute()) {\r\n                this.currentAttr.value += toChar(cp);\r\n            } else {\r\n                this._emitCodePoint(cp);\r\n            }\r\n        } else {\r\n            if (cp === $.SEMICOLON) {\r\n                this._err(ERR.unknownNamedCharacterReference);\r\n            }\r\n\r\n            this._reconsumeInState(this.returnState);\r\n        }\r\n    }\r\n\r\n    // Numeric character reference state\r\n    //------------------------------------------------------------------\r\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\r\n        this.charRefCode = 0;\r\n\r\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\r\n            this.tempBuff.push(cp);\r\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\r\n        } else {\r\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\r\n        }\r\n    }\r\n\r\n    // Hexademical character reference start state\r\n    //------------------------------------------------------------------\r\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\r\n        if (isAsciiHexDigit(cp)) {\r\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\r\n        } else {\r\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\r\n            this._flushCodePointsConsumedAsCharacterReference();\r\n            this._reconsumeInState(this.returnState);\r\n        }\r\n    }\r\n\r\n    // Decimal character reference start state\r\n    //------------------------------------------------------------------\r\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\r\n        if (isAsciiDigit(cp)) {\r\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\r\n        } else {\r\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\r\n            this._flushCodePointsConsumedAsCharacterReference();\r\n            this._reconsumeInState(this.returnState);\r\n        }\r\n    }\r\n\r\n    // Hexademical character reference state\r\n    //------------------------------------------------------------------\r\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\r\n        if (isAsciiUpperHexDigit(cp)) {\r\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\r\n        } else if (isAsciiLowerHexDigit(cp)) {\r\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\r\n        } else if (isAsciiDigit(cp)) {\r\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\r\n        } else if (cp === $.SEMICOLON) {\r\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\r\n        } else {\r\n            this._err(ERR.missingSemicolonAfterCharacterReference);\r\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\r\n        }\r\n    }\r\n\r\n    // Decimal character reference state\r\n    //------------------------------------------------------------------\r\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\r\n        if (isAsciiDigit(cp)) {\r\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\r\n        } else if (cp === $.SEMICOLON) {\r\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\r\n        } else {\r\n            this._err(ERR.missingSemicolonAfterCharacterReference);\r\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\r\n        }\r\n    }\r\n\r\n    // Numeric character reference end state\r\n    //------------------------------------------------------------------\r\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\r\n        if (this.charRefCode === $.NULL) {\r\n            this._err(ERR.nullCharacterReference);\r\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\r\n        } else if (this.charRefCode > 0x10ffff) {\r\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\r\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\r\n        } else if (unicode.isSurrogate(this.charRefCode)) {\r\n            this._err(ERR.surrogateCharacterReference);\r\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\r\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\r\n            this._err(ERR.noncharacterCharacterReference);\r\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\r\n            this._err(ERR.controlCharacterReference);\r\n\r\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\r\n\r\n            if (replacement) {\r\n                this.charRefCode = replacement;\r\n            }\r\n        }\r\n\r\n        this.tempBuff = [this.charRefCode];\r\n\r\n        this._flushCodePointsConsumedAsCharacterReference();\r\n        this._reconsumeInState(this.returnState);\r\n    }\r\n}\r\n\r\n//Token types\r\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\r\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\r\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\r\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\r\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\r\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\r\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\r\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\r\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\r\n\r\n//Tokenizer initial states for different modes\r\nTokenizer.MODE = {\r\n    DATA: DATA_STATE,\r\n    RCDATA: RCDATA_STATE,\r\n    RAWTEXT: RAWTEXT_STATE,\r\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\r\n    PLAINTEXT: PLAINTEXT_STATE\r\n};\r\n\r\n//Static\r\nTokenizer.getTokenAttr = function(token, attrName) {\r\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\r\n        if (token.attrs[i].name === attrName) {\r\n            return token.attrs[i].value;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nmodule.exports = Tokenizer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}