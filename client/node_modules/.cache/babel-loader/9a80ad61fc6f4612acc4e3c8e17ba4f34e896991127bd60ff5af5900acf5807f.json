{"ast":null,"code":"'use strict';\n\nconst Mixin = require('../../utils/mixin');\nconst Tokenizer = require('../../tokenizer');\nconst LocationInfoTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoOpenElementStackMixin = require('./open-element-stack-mixin');\nconst HTML = require('../../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nclass LocationInfoParserMixin extends Mixin {\n  constructor(parser) {\n    super(parser);\n    this.parser = parser;\n    this.treeAdapter = this.parser.treeAdapter;\n    this.posTracker = null;\n    this.lastStartTagToken = null;\n    this.lastFosterParentingLocation = null;\n    this.currentToken = null;\n  }\n  _setStartLocation(element) {\n    let loc = null;\n    if (this.lastStartTagToken) {\n      loc = Object.assign({}, this.lastStartTagToken.location);\n      loc.startTag = this.lastStartTagToken.location;\n    }\n    this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n  }\n  _setEndLocation(element, closingToken) {\n    const loc = this.treeAdapter.getNodeSourceCodeLocation(element);\n    if (loc) {\n      if (closingToken.location) {\n        const ctLoc = closingToken.location;\n        const tn = this.treeAdapter.getTagName(element);\n\n        // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n        // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n        const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;\n        const endLoc = {};\n        if (isClosingEndTag) {\n          endLoc.endTag = Object.assign({}, ctLoc);\n          endLoc.endLine = ctLoc.endLine;\n          endLoc.endCol = ctLoc.endCol;\n          endLoc.endOffset = ctLoc.endOffset;\n        } else {\n          endLoc.endLine = ctLoc.startLine;\n          endLoc.endCol = ctLoc.startCol;\n          endLoc.endOffset = ctLoc.startOffset;\n        }\n        this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n      }\n    }\n  }\n  _getOverriddenMethods(mxn, orig) {\n    return {\n      _bootstrap(document, fragmentContext) {\n        orig._bootstrap.call(this, document, fragmentContext);\n        mxn.lastStartTagToken = null;\n        mxn.lastFosterParentingLocation = null;\n        mxn.currentToken = null;\n        const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n        mxn.posTracker = tokenizerMixin.posTracker;\n        Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {\n          onItemPop: function (element) {\n            mxn._setEndLocation(element, mxn.currentToken);\n          }\n        });\n      },\n      _runParsingLoop(scriptHandler) {\n        orig._runParsingLoop.call(this, scriptHandler);\n\n        // NOTE: generate location info for elements\n        // that remains on open element stack\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n          mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);\n        }\n      },\n      //Token processing\n      _processTokenInForeignContent(token) {\n        mxn.currentToken = token;\n        orig._processTokenInForeignContent.call(this, token);\n      },\n      _processToken(token) {\n        mxn.currentToken = token;\n        orig._processToken.call(this, token);\n\n        //NOTE: <body> and <html> are never popped from the stack, so we need to updated\n        //their end location explicitly.\n        const requireExplicitUpdate = token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY));\n        if (requireExplicitUpdate) {\n          for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const element = this.openElements.items[i];\n            if (this.treeAdapter.getTagName(element) === token.tagName) {\n              mxn._setEndLocation(element, token);\n              break;\n            }\n          }\n        }\n      },\n      //Doctype\n      _setDocumentType(token) {\n        orig._setDocumentType.call(this, token);\n        const documentChildren = this.treeAdapter.getChildNodes(this.document);\n        const cnLength = documentChildren.length;\n        for (let i = 0; i < cnLength; i++) {\n          const node = documentChildren[i];\n          if (this.treeAdapter.isDocumentTypeNode(node)) {\n            this.treeAdapter.setNodeSourceCodeLocation(node, token.location);\n            break;\n          }\n        }\n      },\n      //Elements\n      _attachElementToTree(element) {\n        //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.\n        //So we will use token location stored in this methods for the element.\n        mxn._setStartLocation(element);\n        mxn.lastStartTagToken = null;\n        orig._attachElementToTree.call(this, element);\n      },\n      _appendElement(token, namespaceURI) {\n        mxn.lastStartTagToken = token;\n        orig._appendElement.call(this, token, namespaceURI);\n      },\n      _insertElement(token, namespaceURI) {\n        mxn.lastStartTagToken = token;\n        orig._insertElement.call(this, token, namespaceURI);\n      },\n      _insertTemplate(token) {\n        mxn.lastStartTagToken = token;\n        orig._insertTemplate.call(this, token);\n        const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);\n        this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);\n      },\n      _insertFakeRootElement() {\n        orig._insertFakeRootElement.call(this);\n        this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);\n      },\n      //Comments\n      _appendCommentNode(token, parent) {\n        orig._appendCommentNode.call(this, token, parent);\n        const children = this.treeAdapter.getChildNodes(parent);\n        const commentNode = children[children.length - 1];\n        this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n      },\n      //Text\n      _findFosterParentingLocation() {\n        //NOTE: store last foster parenting location, so we will be able to find inserted text\n        //in case of foster parenting\n        mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);\n        return mxn.lastFosterParentingLocation;\n      },\n      _insertCharacters(token) {\n        orig._insertCharacters.call(this, token);\n        const hasFosterParent = this._shouldFosterParentOnInsertion();\n        const parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1;\n        const textNode = siblings[textNodeIdx];\n\n        //NOTE: if we have location assigned by another token, then just update end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n          const {\n            endLine,\n            endCol,\n            endOffset\n          } = token.location;\n          this.treeAdapter.updateNodeSourceCodeLocation(textNode, {\n            endLine,\n            endCol,\n            endOffset\n          });\n        } else {\n          this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n      }\n    };\n  }\n}\nmodule.exports = LocationInfoParserMixin;","map":{"version":3,"names":["Mixin","require","Tokenizer","LocationInfoTokenizerMixin","LocationInfoOpenElementStackMixin","HTML","$","TAG_NAMES","LocationInfoParserMixin","constructor","parser","treeAdapter","posTracker","lastStartTagToken","lastFosterParentingLocation","currentToken","_setStartLocation","element","loc","Object","assign","location","startTag","setNodeSourceCodeLocation","_setEndLocation","closingToken","getNodeSourceCodeLocation","ctLoc","tn","getTagName","isClosingEndTag","type","END_TAG_TOKEN","tagName","endLoc","endTag","endLine","endCol","endOffset","startLine","startCol","startOffset","updateNodeSourceCodeLocation","_getOverriddenMethods","mxn","orig","_bootstrap","document","fragmentContext","call","tokenizerMixin","install","tokenizer","openElements","onItemPop","_runParsingLoop","scriptHandler","i","stackTop","items","_processTokenInForeignContent","token","_processToken","requireExplicitUpdate","BODY","hasInScope","_setDocumentType","documentChildren","getChildNodes","cnLength","length","node","isDocumentTypeNode","_attachElementToTree","_appendElement","namespaceURI","_insertElement","_insertTemplate","tmplContent","getTemplateContent","current","_insertFakeRootElement","_appendCommentNode","parent","children","commentNode","_findFosterParentingLocation","_insertCharacters","hasFosterParent","_shouldFosterParentOnInsertion","currentTmplContent","siblings","textNodeIdx","beforeElement","indexOf","textNode","tnLoc","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/parse5/lib/extensions/location-info/parser-mixin.js"],"sourcesContent":["'use strict';\r\n\r\nconst Mixin = require('../../utils/mixin');\r\nconst Tokenizer = require('../../tokenizer');\r\nconst LocationInfoTokenizerMixin = require('./tokenizer-mixin');\r\nconst LocationInfoOpenElementStackMixin = require('./open-element-stack-mixin');\r\nconst HTML = require('../../common/html');\r\n\r\n//Aliases\r\nconst $ = HTML.TAG_NAMES;\r\n\r\nclass LocationInfoParserMixin extends Mixin {\r\n    constructor(parser) {\r\n        super(parser);\r\n\r\n        this.parser = parser;\r\n        this.treeAdapter = this.parser.treeAdapter;\r\n        this.posTracker = null;\r\n        this.lastStartTagToken = null;\r\n        this.lastFosterParentingLocation = null;\r\n        this.currentToken = null;\r\n    }\r\n\r\n    _setStartLocation(element) {\r\n        let loc = null;\r\n\r\n        if (this.lastStartTagToken) {\r\n            loc = Object.assign({}, this.lastStartTagToken.location);\r\n            loc.startTag = this.lastStartTagToken.location;\r\n        }\r\n\r\n        this.treeAdapter.setNodeSourceCodeLocation(element, loc);\r\n    }\r\n\r\n    _setEndLocation(element, closingToken) {\r\n        const loc = this.treeAdapter.getNodeSourceCodeLocation(element);\r\n\r\n        if (loc) {\r\n            if (closingToken.location) {\r\n                const ctLoc = closingToken.location;\r\n                const tn = this.treeAdapter.getTagName(element);\r\n\r\n                // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\r\n                // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\r\n                const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;\r\n                const endLoc = {};\r\n                if (isClosingEndTag) {\r\n                    endLoc.endTag = Object.assign({}, ctLoc);\r\n                    endLoc.endLine = ctLoc.endLine;\r\n                    endLoc.endCol = ctLoc.endCol;\r\n                    endLoc.endOffset = ctLoc.endOffset;\r\n                } else {\r\n                    endLoc.endLine = ctLoc.startLine;\r\n                    endLoc.endCol = ctLoc.startCol;\r\n                    endLoc.endOffset = ctLoc.startOffset;\r\n                }\r\n\r\n                this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\r\n            }\r\n        }\r\n    }\r\n\r\n    _getOverriddenMethods(mxn, orig) {\r\n        return {\r\n            _bootstrap(document, fragmentContext) {\r\n                orig._bootstrap.call(this, document, fragmentContext);\r\n\r\n                mxn.lastStartTagToken = null;\r\n                mxn.lastFosterParentingLocation = null;\r\n                mxn.currentToken = null;\r\n\r\n                const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\r\n\r\n                mxn.posTracker = tokenizerMixin.posTracker;\r\n\r\n                Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {\r\n                    onItemPop: function(element) {\r\n                        mxn._setEndLocation(element, mxn.currentToken);\r\n                    }\r\n                });\r\n            },\r\n\r\n            _runParsingLoop(scriptHandler) {\r\n                orig._runParsingLoop.call(this, scriptHandler);\r\n\r\n                // NOTE: generate location info for elements\r\n                // that remains on open element stack\r\n                for (let i = this.openElements.stackTop; i >= 0; i--) {\r\n                    mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);\r\n                }\r\n            },\r\n\r\n            //Token processing\r\n            _processTokenInForeignContent(token) {\r\n                mxn.currentToken = token;\r\n                orig._processTokenInForeignContent.call(this, token);\r\n            },\r\n\r\n            _processToken(token) {\r\n                mxn.currentToken = token;\r\n                orig._processToken.call(this, token);\r\n\r\n                //NOTE: <body> and <html> are never popped from the stack, so we need to updated\r\n                //their end location explicitly.\r\n                const requireExplicitUpdate =\r\n                    token.type === Tokenizer.END_TAG_TOKEN &&\r\n                    (token.tagName === $.HTML || (token.tagName === $.BODY && this.openElements.hasInScope($.BODY)));\r\n\r\n                if (requireExplicitUpdate) {\r\n                    for (let i = this.openElements.stackTop; i >= 0; i--) {\r\n                        const element = this.openElements.items[i];\r\n\r\n                        if (this.treeAdapter.getTagName(element) === token.tagName) {\r\n                            mxn._setEndLocation(element, token);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            //Doctype\r\n            _setDocumentType(token) {\r\n                orig._setDocumentType.call(this, token);\r\n\r\n                const documentChildren = this.treeAdapter.getChildNodes(this.document);\r\n                const cnLength = documentChildren.length;\r\n\r\n                for (let i = 0; i < cnLength; i++) {\r\n                    const node = documentChildren[i];\r\n\r\n                    if (this.treeAdapter.isDocumentTypeNode(node)) {\r\n                        this.treeAdapter.setNodeSourceCodeLocation(node, token.location);\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n\r\n            //Elements\r\n            _attachElementToTree(element) {\r\n                //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.\r\n                //So we will use token location stored in this methods for the element.\r\n                mxn._setStartLocation(element);\r\n                mxn.lastStartTagToken = null;\r\n                orig._attachElementToTree.call(this, element);\r\n            },\r\n\r\n            _appendElement(token, namespaceURI) {\r\n                mxn.lastStartTagToken = token;\r\n                orig._appendElement.call(this, token, namespaceURI);\r\n            },\r\n\r\n            _insertElement(token, namespaceURI) {\r\n                mxn.lastStartTagToken = token;\r\n                orig._insertElement.call(this, token, namespaceURI);\r\n            },\r\n\r\n            _insertTemplate(token) {\r\n                mxn.lastStartTagToken = token;\r\n                orig._insertTemplate.call(this, token);\r\n\r\n                const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);\r\n\r\n                this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);\r\n            },\r\n\r\n            _insertFakeRootElement() {\r\n                orig._insertFakeRootElement.call(this);\r\n                this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);\r\n            },\r\n\r\n            //Comments\r\n            _appendCommentNode(token, parent) {\r\n                orig._appendCommentNode.call(this, token, parent);\r\n\r\n                const children = this.treeAdapter.getChildNodes(parent);\r\n                const commentNode = children[children.length - 1];\r\n\r\n                this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\r\n            },\r\n\r\n            //Text\r\n            _findFosterParentingLocation() {\r\n                //NOTE: store last foster parenting location, so we will be able to find inserted text\r\n                //in case of foster parenting\r\n                mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);\r\n\r\n                return mxn.lastFosterParentingLocation;\r\n            },\r\n\r\n            _insertCharacters(token) {\r\n                orig._insertCharacters.call(this, token);\r\n\r\n                const hasFosterParent = this._shouldFosterParentOnInsertion();\r\n\r\n                const parent =\r\n                    (hasFosterParent && mxn.lastFosterParentingLocation.parent) ||\r\n                    this.openElements.currentTmplContent ||\r\n                    this.openElements.current;\r\n\r\n                const siblings = this.treeAdapter.getChildNodes(parent);\r\n\r\n                const textNodeIdx =\r\n                    hasFosterParent && mxn.lastFosterParentingLocation.beforeElement\r\n                        ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1\r\n                        : siblings.length - 1;\r\n\r\n                const textNode = siblings[textNodeIdx];\r\n\r\n                //NOTE: if we have location assigned by another token, then just update end position\r\n                const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\r\n\r\n                if (tnLoc) {\r\n                    const { endLine, endCol, endOffset } = token.location;\r\n                    this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\r\n                } else {\r\n                    this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nmodule.exports = LocationInfoParserMixin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}