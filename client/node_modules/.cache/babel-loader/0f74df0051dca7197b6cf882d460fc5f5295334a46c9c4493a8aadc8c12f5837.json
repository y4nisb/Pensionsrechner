{"ast":null,"code":"\"use strict\";\n\n// https://heycam.github.io/webidl/#idl-named-properties\nconst IS_NAMED_PROPERTY = Symbol(\"is named property\");\nconst TRACKER = Symbol(\"named property tracker\");\n\n/**\r\n * Create a new NamedPropertiesTracker for the given `object`.\r\n *\r\n * Named properties are used in DOM to let you lookup (for example) a Node by accessing a property on another object.\r\n * For example `window.foo` might resolve to an image element with id \"foo\".\r\n *\r\n * This tracker is a workaround because the ES6 Proxy feature is not yet available.\r\n *\r\n * @param {Object} object Object used to write properties to\r\n * @param {Object} objectProxy Object used to check if a property is already defined\r\n * @param {Function} resolverFunc Each time a property is accessed, this function is called to determine the value of\r\n *        the property. The function is passed 3 arguments: (object, name, values).\r\n *        `object` is identical to the `object` parameter of this `create` function.\r\n *        `name` is the name of the property.\r\n *        `values` is a function that returns a Set with all the tracked values for this name. The order of these\r\n *        values is undefined.\r\n *\r\n * @returns {NamedPropertiesTracker}\r\n */\nexports.create = function (object, objectProxy, resolverFunc) {\n  if (object[TRACKER]) {\n    throw Error(\"A NamedPropertiesTracker has already been created for this object\");\n  }\n  const tracker = new NamedPropertiesTracker(object, objectProxy, resolverFunc);\n  object[TRACKER] = tracker;\n  return tracker;\n};\nexports.get = function (object) {\n  if (!object) {\n    return null;\n  }\n  return object[TRACKER] || null;\n};\nfunction NamedPropertiesTracker(object, objectProxy, resolverFunc) {\n  this.object = object;\n  this.objectProxy = objectProxy;\n  this.resolverFunc = resolverFunc;\n  this.trackedValues = new Map(); // Map<Set<value>>\n}\n\nfunction newPropertyDescriptor(tracker, name) {\n  const emptySet = new Set();\n  function getValues() {\n    return tracker.trackedValues.get(name) || emptySet;\n  }\n  const descriptor = {\n    enumerable: true,\n    configurable: true,\n    get() {\n      return tracker.resolverFunc(tracker.object, name, getValues);\n    },\n    set(value) {\n      Object.defineProperty(tracker.object, name, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n      });\n    }\n  };\n  descriptor.get[IS_NAMED_PROPERTY] = true;\n  descriptor.set[IS_NAMED_PROPERTY] = true;\n  return descriptor;\n}\n\n/**\r\n * Track a value (e.g. a Node) for a specified name.\r\n *\r\n * Values can be tracked eagerly, which means that not all tracked values *have* to appear in the output. The resolver\r\n * function that was passed to the output may filter the value.\r\n *\r\n * Tracking the same `name` and `value` pair multiple times has no effect\r\n *\r\n * @param {String} name\r\n * @param {*} value\r\n */\nNamedPropertiesTracker.prototype.track = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n  let valueSet = this.trackedValues.get(name);\n  if (!valueSet) {\n    valueSet = new Set();\n    this.trackedValues.set(name, valueSet);\n  }\n  valueSet.add(value);\n  if (name in this.objectProxy) {\n    // already added our getter or it is not a named property (e.g. \"addEventListener\")\n    return;\n  }\n  const descriptor = newPropertyDescriptor(this, name);\n  Object.defineProperty(this.object, name, descriptor);\n};\n\n/**\r\n * Stop tracking a previously tracked `name` & `value` pair, see track().\r\n *\r\n * Untracking the same `name` and `value` pair multiple times has no effect\r\n *\r\n * @param {String} name\r\n * @param {*} value\r\n */\nNamedPropertiesTracker.prototype.untrack = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n  const valueSet = this.trackedValues.get(name);\n  if (!valueSet) {\n    // the value is not present\n    return;\n  }\n  if (!valueSet.delete(value)) {\n    // the value was not present\n    return;\n  }\n  if (valueSet.size === 0) {\n    this.trackedValues.delete(name);\n  }\n  if (valueSet.size > 0) {\n    // other values for this name are still present\n    return;\n  }\n\n  // at this point there are no more values, delete the property\n\n  const descriptor = Object.getOwnPropertyDescriptor(this.object, name);\n  if (!descriptor || !descriptor.get || descriptor.get[IS_NAMED_PROPERTY] !== true) {\n    // Not defined by NamedPropertyTracker\n    return;\n  }\n\n  // note: delete puts the object in dictionary mode.\n  // if this turns out to be a performance issue, maybe add:\n  // https://github.com/petkaantonov/bluebird/blob/3e36fc861ac5795193ba37935333eb6ef3716390/src/util.js#L177\n  delete this.object[name];\n};","map":{"version":3,"names":["IS_NAMED_PROPERTY","Symbol","TRACKER","exports","create","object","objectProxy","resolverFunc","Error","tracker","NamedPropertiesTracker","get","trackedValues","Map","newPropertyDescriptor","name","emptySet","Set","getValues","descriptor","enumerable","configurable","set","value","Object","defineProperty","writable","prototype","track","undefined","valueSet","add","untrack","delete","size","getOwnPropertyDescriptor"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/named-properties-tracker.js"],"sourcesContent":["\"use strict\";\r\n// https://heycam.github.io/webidl/#idl-named-properties\r\n\r\nconst IS_NAMED_PROPERTY = Symbol(\"is named property\");\r\nconst TRACKER = Symbol(\"named property tracker\");\r\n\r\n/**\r\n * Create a new NamedPropertiesTracker for the given `object`.\r\n *\r\n * Named properties are used in DOM to let you lookup (for example) a Node by accessing a property on another object.\r\n * For example `window.foo` might resolve to an image element with id \"foo\".\r\n *\r\n * This tracker is a workaround because the ES6 Proxy feature is not yet available.\r\n *\r\n * @param {Object} object Object used to write properties to\r\n * @param {Object} objectProxy Object used to check if a property is already defined\r\n * @param {Function} resolverFunc Each time a property is accessed, this function is called to determine the value of\r\n *        the property. The function is passed 3 arguments: (object, name, values).\r\n *        `object` is identical to the `object` parameter of this `create` function.\r\n *        `name` is the name of the property.\r\n *        `values` is a function that returns a Set with all the tracked values for this name. The order of these\r\n *        values is undefined.\r\n *\r\n * @returns {NamedPropertiesTracker}\r\n */\r\nexports.create = function (object, objectProxy, resolverFunc) {\r\n  if (object[TRACKER]) {\r\n    throw Error(\"A NamedPropertiesTracker has already been created for this object\");\r\n  }\r\n\r\n  const tracker = new NamedPropertiesTracker(object, objectProxy, resolverFunc);\r\n  object[TRACKER] = tracker;\r\n  return tracker;\r\n};\r\n\r\nexports.get = function (object) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n\r\n  return object[TRACKER] || null;\r\n};\r\n\r\nfunction NamedPropertiesTracker(object, objectProxy, resolverFunc) {\r\n  this.object = object;\r\n  this.objectProxy = objectProxy;\r\n  this.resolverFunc = resolverFunc;\r\n  this.trackedValues = new Map(); // Map<Set<value>>\r\n}\r\n\r\nfunction newPropertyDescriptor(tracker, name) {\r\n  const emptySet = new Set();\r\n\r\n  function getValues() {\r\n    return tracker.trackedValues.get(name) || emptySet;\r\n  }\r\n\r\n  const descriptor = {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get() {\r\n      return tracker.resolverFunc(tracker.object, name, getValues);\r\n    },\r\n    set(value) {\r\n      Object.defineProperty(tracker.object, name, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: true,\r\n        value\r\n      });\r\n    }\r\n  };\r\n\r\n  descriptor.get[IS_NAMED_PROPERTY] = true;\r\n  descriptor.set[IS_NAMED_PROPERTY] = true;\r\n  return descriptor;\r\n}\r\n\r\n/**\r\n * Track a value (e.g. a Node) for a specified name.\r\n *\r\n * Values can be tracked eagerly, which means that not all tracked values *have* to appear in the output. The resolver\r\n * function that was passed to the output may filter the value.\r\n *\r\n * Tracking the same `name` and `value` pair multiple times has no effect\r\n *\r\n * @param {String} name\r\n * @param {*} value\r\n */\r\nNamedPropertiesTracker.prototype.track = function (name, value) {\r\n  if (name === undefined || name === null || name === \"\") {\r\n    return;\r\n  }\r\n\r\n  let valueSet = this.trackedValues.get(name);\r\n  if (!valueSet) {\r\n    valueSet = new Set();\r\n    this.trackedValues.set(name, valueSet);\r\n  }\r\n\r\n  valueSet.add(value);\r\n\r\n  if (name in this.objectProxy) {\r\n    // already added our getter or it is not a named property (e.g. \"addEventListener\")\r\n    return;\r\n  }\r\n\r\n  const descriptor = newPropertyDescriptor(this, name);\r\n  Object.defineProperty(this.object, name, descriptor);\r\n};\r\n\r\n/**\r\n * Stop tracking a previously tracked `name` & `value` pair, see track().\r\n *\r\n * Untracking the same `name` and `value` pair multiple times has no effect\r\n *\r\n * @param {String} name\r\n * @param {*} value\r\n */\r\nNamedPropertiesTracker.prototype.untrack = function (name, value) {\r\n  if (name === undefined || name === null || name === \"\") {\r\n    return;\r\n  }\r\n\r\n  const valueSet = this.trackedValues.get(name);\r\n  if (!valueSet) {\r\n    // the value is not present\r\n    return;\r\n  }\r\n\r\n  if (!valueSet.delete(value)) {\r\n    // the value was not present\r\n    return;\r\n  }\r\n\r\n  if (valueSet.size === 0) {\r\n    this.trackedValues.delete(name);\r\n  }\r\n\r\n  if (valueSet.size > 0) {\r\n    // other values for this name are still present\r\n    return;\r\n  }\r\n\r\n  // at this point there are no more values, delete the property\r\n\r\n  const descriptor = Object.getOwnPropertyDescriptor(this.object, name);\r\n\r\n  if (!descriptor || !descriptor.get || descriptor.get[IS_NAMED_PROPERTY] !== true) {\r\n    // Not defined by NamedPropertyTracker\r\n    return;\r\n  }\r\n\r\n  // note: delete puts the object in dictionary mode.\r\n  // if this turns out to be a performance issue, maybe add:\r\n  // https://github.com/petkaantonov/bluebird/blob/3e36fc861ac5795193ba37935333eb6ef3716390/src/util.js#L177\r\n  delete this.object[name];\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}