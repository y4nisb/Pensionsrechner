{"ast":null,"code":"\"use strict\";\n\nconst {\n  isASCIIHex\n} = require(\"./infra\");\nconst {\n  utf8Encode\n} = require(\"./encoding\");\n\n// https://url.spec.whatwg.org/#percent-encode\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = `0${hex}`;\n  }\n  return `%${hex}`;\n}\n\n// https://url.spec.whatwg.org/#percent-decode\nfunction percentDecodeBytes(input) {\n  const output = new Uint8Array(input.byteLength);\n  let outputIndex = 0;\n  for (let i = 0; i < input.byteLength; ++i) {\n    const byte = input[i];\n    if (byte !== 0x25) {\n      output[outputIndex++] = byte;\n    } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n      output[outputIndex++] = byte;\n    } else {\n      const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n      output[outputIndex++] = bytePoint;\n      i += 2;\n    }\n  }\n\n  // TODO: remove the Buffer.from in the next major version; it's only needed for back-compat, and sticking to standard\n  // typed arrays is nicer and simpler.\n  // See https://github.com/jsdom/data-urls/issues/17 for background.\n  return Buffer.from(output.slice(0, outputIndex));\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\nfunction percentDecodeString(input) {\n  const bytes = utf8Encode(input);\n  return percentDecodeBytes(bytes);\n}\n\n// https://url.spec.whatwg.org/#c0-control-percent-encode-set\nfunction isC0ControlPercentEncode(c) {\n  return c <= 0x1F || c > 0x7E;\n}\n\n// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst extraFragmentPercentEncodeSet = new Set([32, 34, 60, 62, 96]);\nfunction isFragmentPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#query-percent-encode-set\nconst extraQueryPercentEncodeSet = new Set([32, 34, 35, 60, 62]);\nfunction isQueryPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#special-query-percent-encode-set\nfunction isSpecialQueryPercentEncode(c) {\n  return isQueryPercentEncode(c) || c === 39;\n}\n\n// https://url.spec.whatwg.org/#path-percent-encode-set\nconst extraPathPercentEncodeSet = new Set([63, 96, 123, 125]);\nfunction isPathPercentEncode(c) {\n  return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#userinfo-percent-encode-set\nconst extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\nfunction isUserinfoPercentEncode(c) {\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#component-percent-encode-set\nconst extraComponentPercentEncodeSet = new Set([36, 37, 38, 43, 44]);\nfunction isComponentPercentEncode(c) {\n  return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set\nconst extraURLEncodedPercentEncodeSet = new Set([33, 39, 40, 41, 126]);\nfunction isURLEncodedPercentEncode(c) {\n  return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#utf-8-percent-encode\n// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.\n// The \"-Internal\" variant here has code points as JS strings. The external version used by other files has code points\n// as JS numbers, like the rest of the codebase.\nfunction utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {\n  const bytes = utf8Encode(codePoint);\n  let output = \"\";\n  for (const byte of bytes) {\n    // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.\n    if (!percentEncodePredicate(byte)) {\n      output += String.fromCharCode(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n  return output;\n}\nfunction utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {\n  return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);\n}\n\n// https://url.spec.whatwg.org/#string-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#string-utf-8-percent-encode\nfunction utf8PercentEncodeString(input, percentEncodePredicate) {\n  let spaceAsPlus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let output = \"\";\n  for (const codePoint of input) {\n    if (spaceAsPlus && codePoint === \" \") {\n      output += \"+\";\n    } else {\n      output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);\n    }\n  }\n  return output;\n}\nmodule.exports = {\n  isC0ControlPercentEncode,\n  isFragmentPercentEncode,\n  isQueryPercentEncode,\n  isSpecialQueryPercentEncode,\n  isPathPercentEncode,\n  isUserinfoPercentEncode,\n  isURLEncodedPercentEncode,\n  percentDecodeString,\n  percentDecodeBytes,\n  utf8PercentEncodeString,\n  utf8PercentEncodeCodePoint\n};","map":{"version":3,"names":["isASCIIHex","require","utf8Encode","percentEncode","c","hex","toString","toUpperCase","length","percentDecodeBytes","input","output","Uint8Array","byteLength","outputIndex","i","byte","bytePoint","parseInt","String","fromCodePoint","Buffer","from","slice","percentDecodeString","bytes","isC0ControlPercentEncode","extraFragmentPercentEncodeSet","Set","isFragmentPercentEncode","has","extraQueryPercentEncodeSet","isQueryPercentEncode","isSpecialQueryPercentEncode","extraPathPercentEncodeSet","isPathPercentEncode","extraUserinfoPercentEncodeSet","isUserinfoPercentEncode","extraComponentPercentEncodeSet","isComponentPercentEncode","extraURLEncodedPercentEncodeSet","isURLEncodedPercentEncode","utf8PercentEncodeCodePointInternal","codePoint","percentEncodePredicate","fromCharCode","utf8PercentEncodeCodePoint","utf8PercentEncodeString","spaceAsPlus","arguments","undefined","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/whatwg-url/dist/percent-encoding.js"],"sourcesContent":["\"use strict\";\r\nconst { isASCIIHex } = require(\"./infra\");\r\nconst { utf8Encode } = require(\"./encoding\");\r\n\r\n// https://url.spec.whatwg.org/#percent-encode\r\nfunction percentEncode(c) {\r\n  let hex = c.toString(16).toUpperCase();\r\n  if (hex.length === 1) {\r\n    hex = `0${hex}`;\r\n  }\r\n\r\n  return `%${hex}`;\r\n}\r\n\r\n// https://url.spec.whatwg.org/#percent-decode\r\nfunction percentDecodeBytes(input) {\r\n  const output = new Uint8Array(input.byteLength);\r\n  let outputIndex = 0;\r\n  for (let i = 0; i < input.byteLength; ++i) {\r\n    const byte = input[i];\r\n    if (byte !== 0x25) {\r\n      output[outputIndex++] = byte;\r\n    } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\r\n      output[outputIndex++] = byte;\r\n    } else {\r\n      const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\r\n      output[outputIndex++] = bytePoint;\r\n      i += 2;\r\n    }\r\n  }\r\n\r\n  // TODO: remove the Buffer.from in the next major version; it's only needed for back-compat, and sticking to standard\r\n  // typed arrays is nicer and simpler.\r\n  // See https://github.com/jsdom/data-urls/issues/17 for background.\r\n  return Buffer.from(output.slice(0, outputIndex));\r\n}\r\n\r\n// https://url.spec.whatwg.org/#string-percent-decode\r\nfunction percentDecodeString(input) {\r\n  const bytes = utf8Encode(input);\r\n  return percentDecodeBytes(bytes);\r\n}\r\n\r\n// https://url.spec.whatwg.org/#c0-control-percent-encode-set\r\nfunction isC0ControlPercentEncode(c) {\r\n  return c <= 0x1F || c > 0x7E;\r\n}\r\n\r\n// https://url.spec.whatwg.org/#fragment-percent-encode-set\r\nconst extraFragmentPercentEncodeSet = new Set([32, 34, 60, 62, 96]);\r\nfunction isFragmentPercentEncode(c) {\r\n  return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);\r\n}\r\n\r\n// https://url.spec.whatwg.org/#query-percent-encode-set\r\nconst extraQueryPercentEncodeSet = new Set([32, 34, 35, 60, 62]);\r\nfunction isQueryPercentEncode(c) {\r\n  return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);\r\n}\r\n\r\n// https://url.spec.whatwg.org/#special-query-percent-encode-set\r\nfunction isSpecialQueryPercentEncode(c) {\r\n  return isQueryPercentEncode(c) || c === 39;\r\n}\r\n\r\n// https://url.spec.whatwg.org/#path-percent-encode-set\r\nconst extraPathPercentEncodeSet = new Set([63, 96, 123, 125]);\r\nfunction isPathPercentEncode(c) {\r\n  return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);\r\n}\r\n\r\n// https://url.spec.whatwg.org/#userinfo-percent-encode-set\r\nconst extraUserinfoPercentEncodeSet =\r\n  new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\r\nfunction isUserinfoPercentEncode(c) {\r\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\r\n}\r\n\r\n// https://url.spec.whatwg.org/#component-percent-encode-set\r\nconst extraComponentPercentEncodeSet = new Set([36, 37, 38, 43, 44]);\r\nfunction isComponentPercentEncode(c) {\r\n  return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);\r\n}\r\n\r\n// https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set\r\nconst extraURLEncodedPercentEncodeSet = new Set([33, 39, 40, 41, 126]);\r\nfunction isURLEncodedPercentEncode(c) {\r\n  return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);\r\n}\r\n\r\n// https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding\r\n// https://url.spec.whatwg.org/#utf-8-percent-encode\r\n// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.\r\n// The \"-Internal\" variant here has code points as JS strings. The external version used by other files has code points\r\n// as JS numbers, like the rest of the codebase.\r\nfunction utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {\r\n  const bytes = utf8Encode(codePoint);\r\n  let output = \"\";\r\n  for (const byte of bytes) {\r\n    // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.\r\n    if (!percentEncodePredicate(byte)) {\r\n      output += String.fromCharCode(byte);\r\n    } else {\r\n      output += percentEncode(byte);\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {\r\n  return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);\r\n}\r\n\r\n// https://url.spec.whatwg.org/#string-percent-encode-after-encoding\r\n// https://url.spec.whatwg.org/#string-utf-8-percent-encode\r\nfunction utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {\r\n  let output = \"\";\r\n  for (const codePoint of input) {\r\n    if (spaceAsPlus && codePoint === \" \") {\r\n      output += \"+\";\r\n    } else {\r\n      output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\nmodule.exports = {\r\n  isC0ControlPercentEncode,\r\n  isFragmentPercentEncode,\r\n  isQueryPercentEncode,\r\n  isSpecialQueryPercentEncode,\r\n  isPathPercentEncode,\r\n  isUserinfoPercentEncode,\r\n  isURLEncodedPercentEncode,\r\n  percentDecodeString,\r\n  percentDecodeBytes,\r\n  utf8PercentEncodeString,\r\n  utf8PercentEncodeCodePoint\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}