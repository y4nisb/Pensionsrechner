{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\nconst {\n  setupForSimpleEventAccessors\n} = require(\"../helpers/create-event-accessor\");\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\nconst {\n  copyToArrayBufferInNewRealm\n} = require(\"../helpers/binary-data\");\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n    this._globalObject = globalObject;\n    this._ownerDocument = globalObject.document;\n    this._terminated = false;\n  }\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n    this._terminated = true;\n    this._fireProgressEvent(\"abort\");\n    this._fireProgressEvent(\"loadend\");\n  }\n  _fireProgressEvent(name, props) {\n    fireAnEvent(name, this, ProgressEvent, props);\n  }\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n    this.readyState = READY_STATES.LOADING;\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n      this._fireProgressEvent(\"loadstart\");\n      let data = file._buffer;\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n        switch (format) {\n          case \"binaryString\":\n            {\n              this.result = data.toString(\"binary\");\n              break;\n            }\n          case \"dataURL\":\n            {\n              // Spec seems very unclear here; see https://github.com/w3c/FileAPI/issues/104.\n              const contentType = MIMEType.parse(file.type) || \"application/octet-stream\";\n              this.result = `data:${contentType};base64,${data.toString(\"base64\")}`;\n              break;\n            }\n          case \"text\":\n            {\n              this.result = whatwgEncoding.decode(data, encoding);\n              break;\n            }\n          case \"buffer\":\n          default:\n            {\n              this.result = copyToArrayBufferInNewRealm(data, this._globalObject);\n              break;\n            }\n        }\n        this.readyState = READY_STATES.DONE;\n        this._fireProgressEvent(\"load\");\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n}\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\nexports.implementation = FileReaderImpl;","map":{"version":3,"names":["whatwgEncoding","require","MIMEType","DOMException","EventTargetImpl","implementation","ProgressEvent","setupForSimpleEventAccessors","fireAnEvent","copyToArrayBufferInNewRealm","READY_STATES","Object","freeze","EMPTY","LOADING","DONE","events","FileReaderImpl","constructor","globalObject","args","privateData","error","readyState","result","_globalObject","_ownerDocument","document","_terminated","readAsArrayBuffer","file","_readFile","readAsBinaryString","readAsDataURL","readAsText","encoding","labelToName","abort","_fireProgressEvent","name","props","format","create","setImmediate","data","_buffer","Buffer","alloc","lengthComputable","isNaN","size","total","loaded","length","toString","contentType","parse","type","decode","prototype","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/file-api/FileReader-impl.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst whatwgEncoding = require(\"whatwg-encoding\");\r\nconst MIMEType = require(\"whatwg-mimetype\");\r\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\r\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\r\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\r\nconst { setupForSimpleEventAccessors } = require(\"../helpers/create-event-accessor\");\r\nconst { fireAnEvent } = require(\"../helpers/events\");\r\nconst { copyToArrayBufferInNewRealm } = require(\"../helpers/binary-data\");\r\n\r\nconst READY_STATES = Object.freeze({\r\n  EMPTY: 0,\r\n  LOADING: 1,\r\n  DONE: 2\r\n});\r\n\r\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\r\n\r\nclass FileReaderImpl extends EventTargetImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    super(globalObject, args, privateData);\r\n\r\n    this.error = null;\r\n    this.readyState = READY_STATES.EMPTY;\r\n    this.result = null;\r\n\r\n    this._globalObject = globalObject;\r\n    this._ownerDocument = globalObject.document;\r\n    this._terminated = false;\r\n  }\r\n\r\n  readAsArrayBuffer(file) {\r\n    this._readFile(file, \"buffer\");\r\n  }\r\n  readAsBinaryString(file) {\r\n    this._readFile(file, \"binaryString\");\r\n  }\r\n  readAsDataURL(file) {\r\n    this._readFile(file, \"dataURL\");\r\n  }\r\n  readAsText(file, encoding) {\r\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\r\n  }\r\n\r\n  abort() {\r\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\r\n      this.result = null;\r\n      return;\r\n    }\r\n\r\n    if (this.readyState === READY_STATES.LOADING) {\r\n      this.readyState = READY_STATES.DONE;\r\n      this.result = null;\r\n    }\r\n\r\n    this._terminated = true;\r\n    this._fireProgressEvent(\"abort\");\r\n    this._fireProgressEvent(\"loadend\");\r\n  }\r\n\r\n  _fireProgressEvent(name, props) {\r\n    fireAnEvent(name, this, ProgressEvent, props);\r\n  }\r\n\r\n  _readFile(file, format, encoding) {\r\n    if (this.readyState === READY_STATES.LOADING) {\r\n      throw DOMException.create(this._globalObject, [\r\n        \"The object is in an invalid state.\",\r\n        \"InvalidStateError\"\r\n      ]);\r\n    }\r\n\r\n    this.readyState = READY_STATES.LOADING;\r\n\r\n    setImmediate(() => {\r\n      if (this._terminated) {\r\n        this._terminated = false;\r\n        return;\r\n      }\r\n\r\n      this._fireProgressEvent(\"loadstart\");\r\n\r\n      let data = file._buffer;\r\n      if (!data) {\r\n        data = Buffer.alloc(0);\r\n      }\r\n      this._fireProgressEvent(\"progress\", {\r\n        lengthComputable: !isNaN(file.size),\r\n        total: file.size,\r\n        loaded: data.length\r\n      });\r\n\r\n      setImmediate(() => {\r\n        if (this._terminated) {\r\n          this._terminated = false;\r\n          return;\r\n        }\r\n\r\n        switch (format) {\r\n          case \"binaryString\": {\r\n            this.result = data.toString(\"binary\");\r\n            break;\r\n          }\r\n          case \"dataURL\": {\r\n            // Spec seems very unclear here; see https://github.com/w3c/FileAPI/issues/104.\r\n            const contentType = MIMEType.parse(file.type) || \"application/octet-stream\";\r\n            this.result = `data:${contentType};base64,${data.toString(\"base64\")}`;\r\n            break;\r\n          }\r\n          case \"text\": {\r\n            this.result = whatwgEncoding.decode(data, encoding);\r\n            break;\r\n          }\r\n          case \"buffer\":\r\n          default: {\r\n            this.result = copyToArrayBufferInNewRealm(data, this._globalObject);\r\n            break;\r\n          }\r\n        }\r\n        this.readyState = READY_STATES.DONE;\r\n        this._fireProgressEvent(\"load\");\r\n        this._fireProgressEvent(\"loadend\");\r\n      });\r\n    });\r\n  }\r\n}\r\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\r\n\r\nexports.implementation = FileReaderImpl;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}