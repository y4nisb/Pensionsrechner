{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Character classes and associated utilities for the 2nd edition of XML 1.1.\r\n *\r\n * @author Louis-Dominique Dubeau\r\n * @license MIT\r\n * @copyright Louis-Dominique Dubeau\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n//\n// Fragments.\n//\nexports.CHAR = \"\\u0001-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\";\nexports.RESTRICTED_CHAR = \"\\u0001-\\u0008\\u000B\\u000C\\u000E-\\u001F\\u007F-\\u0084\\u0086-\\u009F\";\nexports.S = \" \\t\\r\\n\";\n// tslint:disable-next-line:max-line-length\nexports.NAME_START_CHAR = \":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\uD800\\uDC00-\\uDB7F\\uDFFF\";\nexports.NAME_CHAR = \"-\" + exports.NAME_START_CHAR + \".0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040\";\n//\n// Regular expressions.\n//\nexports.CHAR_RE = new RegExp(\"^[\" + exports.CHAR + \"]$\", \"u\");\nexports.RESTRICTED_CHAR_RE = new RegExp(\"^[\" + exports.RESTRICTED_CHAR + \"]$\", \"u\");\nexports.S_RE = new RegExp(\"^[\" + exports.S + \"]+$\", \"u\");\nexports.NAME_START_CHAR_RE = new RegExp(\"^[\" + exports.NAME_START_CHAR + \"]$\", \"u\");\nexports.NAME_CHAR_RE = new RegExp(\"^[\" + exports.NAME_CHAR + \"]$\", \"u\");\nexports.NAME_RE = new RegExp(\"^[\" + exports.NAME_START_CHAR + \"][\" + exports.NAME_CHAR + \"]*$\", \"u\");\nexports.NMTOKEN_RE = new RegExp(\"^[\" + exports.NAME_CHAR + \"]+$\", \"u\");\nvar TAB = 9;\nvar NL = 0xA;\nvar CR = 0xD;\nvar SPACE = 0x20;\n//\n// Lists.\n//\n/** All characters in the ``S`` production. */\nexports.S_LIST = [SPACE, NL, CR, TAB];\n/**\r\n * Determines whether a codepoint matches the ``CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``CHAR``.\r\n */\nfunction isChar(c) {\n  return c >= 0x0001 && c <= 0xD7FF || c >= 0xE000 && c <= 0xFFFD || c >= 0x10000 && c <= 0x10FFFF;\n}\nexports.isChar = isChar;\n/**\r\n * Determines whether a codepoint matches the ``RESTRICTED_CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``RESTRICTED_CHAR``.\r\n */\nfunction isRestrictedChar(c) {\n  return c >= 0x1 && c <= 0x8 || c === 0xB || c === 0xC || c >= 0xE && c <= 0x1F || c >= 0x7F && c <= 0x84 || c >= 0x86 && c <= 0x9F;\n}\nexports.isRestrictedChar = isRestrictedChar;\n/**\r\n * Determines whether a codepoint matches the ``CHAR`` production and does not\r\n * match the ``RESTRICTED_CHAR`` production. ``isCharAndNotRestricted(x)`` is\r\n * equivalent to ``isChar(x) && !isRestrictedChar(x)``. This function is faster\r\n * than running the two-call equivalent.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``CHAR`` and does not match\r\n * ``RESTRICTED_CHAR``.\r\n */\nfunction isCharAndNotRestricted(c) {\n  return c === 0x9 || c === 0xA || c === 0xD || c > 0x1F && c < 0x7F || c === 0x85 || c > 0x9F && c <= 0xD7FF || c >= 0xE000 && c <= 0xFFFD || c >= 0x10000 && c <= 0x10FFFF;\n}\nexports.isCharAndNotRestricted = isCharAndNotRestricted;\n/**\r\n * Determines whether a codepoint matches the ``S`` (space) production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``S``.\r\n */\nfunction isS(c) {\n  return c === SPACE || c === NL || c === CR || c === TAB;\n}\nexports.isS = isS;\n/**\r\n * Determines whether a codepoint matches the ``NAME_START_CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``NAME_START_CHAR``.\r\n */\n// tslint:disable-next-line:cyclomatic-complexity\nfunction isNameStartChar(c) {\n  return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A || c === 0x3A || c === 0x5F || c === 0x200C || c === 0x200D || c >= 0xC0 && c <= 0xD6 || c >= 0xD8 && c <= 0xF6 || c >= 0x00F8 && c <= 0x02FF || c >= 0x0370 && c <= 0x037D || c >= 0x037F && c <= 0x1FFF || c >= 0x2070 && c <= 0x218F || c >= 0x2C00 && c <= 0x2FEF || c >= 0x3001 && c <= 0xD7FF || c >= 0xF900 && c <= 0xFDCF || c >= 0xFDF0 && c <= 0xFFFD || c >= 0x10000 && c <= 0xEFFFF;\n}\nexports.isNameStartChar = isNameStartChar;\n/**\r\n * Determines whether a codepoint matches the ``NAME_CHAR`` production.\r\n *\r\n * @param c The code point.\r\n *\r\n * @returns ``true`` if the codepoint matches ``NAME_CHAR``.\r\n */\nfunction isNameChar(c) {\n  return isNameStartChar(c) || c >= 0x30 && c <= 0x39 || c === 0x2D || c === 0x2E || c === 0xB7 || c >= 0x0300 && c <= 0x036F || c >= 0x203F && c <= 0x2040;\n}\nexports.isNameChar = isNameChar;","map":{"version":3,"names":["exports","CHAR","RESTRICTED_CHAR","S","NAME_START_CHAR","NAME_CHAR","CHAR_RE","RegExp","RESTRICTED_CHAR_RE","S_RE","NAME_START_CHAR_RE","NAME_CHAR_RE","NAME_RE","NMTOKEN_RE","TAB","NL","CR","SPACE","S_LIST","isChar","c","isRestrictedChar","isCharAndNotRestricted","isS","isNameStartChar","isNameChar"],"sources":["../../../../src/xml/1.1/ed2.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}