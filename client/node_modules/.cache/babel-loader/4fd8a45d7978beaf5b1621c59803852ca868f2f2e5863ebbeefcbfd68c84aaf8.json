{"ast":null,"code":"\"use strict\";\n\nconst punycode = require(\"punycode\");\nconst tr46 = require(\"tr46\");\nconst infra = require(\"./infra\");\nconst {\n  utf8DecodeWithoutBOM\n} = require(\"./encoding\");\nconst {\n  percentDecodeString,\n  utf8PercentEncodeCodePoint,\n  utf8PercentEncodeString,\n  isC0ControlPercentEncode,\n  isFragmentPercentEncode,\n  isQueryPercentEncode,\n  isSpecialQueryPercentEncode,\n  isPathPercentEncode,\n  isUserinfoPercentEncode\n} = require(\"./percent-encoding\");\nconst specialSchemes = {\n  ftp: 21,\n  file: null,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\nconst failure = Symbol(\"failure\");\nfunction countSymbols(str) {\n  return [...str].length;\n}\nfunction at(input, idx) {\n  const c = input[idx];\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\n}\nfunction isSingleDot(buffer) {\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\n}\nfunction isDoubleDot(buffer) {\n  buffer = buffer.toLowerCase();\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\n}\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\n  return infra.isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);\n}\nfunction isWindowsDriveLetterString(string) {\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\n}\nfunction isNormalizedWindowsDriveLetterString(string) {\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\n}\nfunction containsForbiddenHostCodePoint(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\n}\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\n}\nfunction isSpecialScheme(scheme) {\n  return specialSchemes[scheme] !== undefined;\n}\nfunction isSpecial(url) {\n  return isSpecialScheme(url.scheme);\n}\nfunction isNotSpecial(url) {\n  return !isSpecialScheme(url.scheme);\n}\nfunction defaultPort(scheme) {\n  return specialSchemes[scheme];\n}\nfunction parseIPv4Number(input) {\n  let R = 10;\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\n    input = input.substring(2);\n    R = 16;\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\n    input = input.substring(1);\n    R = 8;\n  }\n  if (input === \"\") {\n    return 0;\n  }\n  let regex = /[^0-7]/u;\n  if (R === 10) {\n    regex = /[^0-9]/u;\n  }\n  if (R === 16) {\n    regex = /[^0-9A-Fa-f]/u;\n  }\n  if (regex.test(input)) {\n    return failure;\n  }\n  return parseInt(input, R);\n}\nfunction parseIPv4(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length > 1) {\n      parts.pop();\n    }\n  }\n  if (parts.length > 4) {\n    return input;\n  }\n  const numbers = [];\n  for (const part of parts) {\n    if (part === \"\") {\n      return input;\n    }\n    const n = parseIPv4Number(part);\n    if (n === failure) {\n      return input;\n    }\n    numbers.push(n);\n  }\n  for (let i = 0; i < numbers.length - 1; ++i) {\n    if (numbers[i] > 255) {\n      return failure;\n    }\n  }\n  if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {\n    return failure;\n  }\n  let ipv4 = numbers.pop();\n  let counter = 0;\n  for (const n of numbers) {\n    ipv4 += n * 256 ** (3 - counter);\n    ++counter;\n  }\n  return ipv4;\n}\nfunction serializeIPv4(address) {\n  let output = \"\";\n  let n = address;\n  for (let i = 1; i <= 4; ++i) {\n    output = String(n % 256) + output;\n    if (i !== 4) {\n      output = `.${output}`;\n    }\n    n = Math.floor(n / 256);\n  }\n  return output;\n}\nfunction parseIPv6(input) {\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\n  let pieceIndex = 0;\n  let compress = null;\n  let pointer = 0;\n  input = punycode.ucs2.decode(input);\n  if (input[pointer] === 58) {\n    if (input[pointer + 1] !== 58) {\n      return failure;\n    }\n    pointer += 2;\n    ++pieceIndex;\n    compress = pieceIndex;\n  }\n  while (pointer < input.length) {\n    if (pieceIndex === 8) {\n      return failure;\n    }\n    if (input[pointer] === 58) {\n      if (compress !== null) {\n        return failure;\n      }\n      ++pointer;\n      ++pieceIndex;\n      compress = pieceIndex;\n      continue;\n    }\n    let value = 0;\n    let length = 0;\n    while (length < 4 && infra.isASCIIHex(input[pointer])) {\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\n      ++pointer;\n      ++length;\n    }\n    if (input[pointer] === 46) {\n      if (length === 0) {\n        return failure;\n      }\n      pointer -= length;\n      if (pieceIndex > 6) {\n        return failure;\n      }\n      let numbersSeen = 0;\n      while (input[pointer] !== undefined) {\n        let ipv4Piece = null;\n        if (numbersSeen > 0) {\n          if (input[pointer] === 46 && numbersSeen < 4) {\n            ++pointer;\n          } else {\n            return failure;\n          }\n        }\n        if (!infra.isASCIIDigit(input[pointer])) {\n          return failure;\n        }\n        while (infra.isASCIIDigit(input[pointer])) {\n          const number = parseInt(at(input, pointer));\n          if (ipv4Piece === null) {\n            ipv4Piece = number;\n          } else if (ipv4Piece === 0) {\n            return failure;\n          } else {\n            ipv4Piece = ipv4Piece * 10 + number;\n          }\n          if (ipv4Piece > 255) {\n            return failure;\n          }\n          ++pointer;\n        }\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\n        ++numbersSeen;\n        if (numbersSeen === 2 || numbersSeen === 4) {\n          ++pieceIndex;\n        }\n      }\n      if (numbersSeen !== 4) {\n        return failure;\n      }\n      break;\n    } else if (input[pointer] === 58) {\n      ++pointer;\n      if (input[pointer] === undefined) {\n        return failure;\n      }\n    } else if (input[pointer] !== undefined) {\n      return failure;\n    }\n    address[pieceIndex] = value;\n    ++pieceIndex;\n  }\n  if (compress !== null) {\n    let swaps = pieceIndex - compress;\n    pieceIndex = 7;\n    while (pieceIndex !== 0 && swaps > 0) {\n      const temp = address[compress + swaps - 1];\n      address[compress + swaps - 1] = address[pieceIndex];\n      address[pieceIndex] = temp;\n      --pieceIndex;\n      --swaps;\n    }\n  } else if (compress === null && pieceIndex !== 8) {\n    return failure;\n  }\n  return address;\n}\nfunction serializeIPv6(address) {\n  let output = \"\";\n  const compress = findLongestZeroSequence(address);\n  let ignore0 = false;\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\n    if (ignore0 && address[pieceIndex] === 0) {\n      continue;\n    } else if (ignore0) {\n      ignore0 = false;\n    }\n    if (compress === pieceIndex) {\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\n      output += separator;\n      ignore0 = true;\n      continue;\n    }\n    output += address[pieceIndex].toString(16);\n    if (pieceIndex !== 7) {\n      output += \":\";\n    }\n  }\n  return output;\n}\nfunction parseHost(input) {\n  let isNotSpecialArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (input[0] === \"[\") {\n    if (input[input.length - 1] !== \"]\") {\n      return failure;\n    }\n    return parseIPv6(input.substring(1, input.length - 1));\n  }\n  if (isNotSpecialArg) {\n    return parseOpaqueHost(input);\n  }\n  const domain = utf8DecodeWithoutBOM(percentDecodeString(input));\n  const asciiDomain = domainToASCII(domain);\n  if (asciiDomain === failure) {\n    return failure;\n  }\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\n    return failure;\n  }\n  const ipv4Host = parseIPv4(asciiDomain);\n  if (typeof ipv4Host === \"number\" || ipv4Host === failure) {\n    return ipv4Host;\n  }\n  return asciiDomain;\n}\nfunction parseOpaqueHost(input) {\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\n    return failure;\n  }\n  return utf8PercentEncodeString(input, isC0ControlPercentEncode);\n}\nfunction findLongestZeroSequence(arr) {\n  let maxIdx = null;\n  let maxLen = 1; // only find elements > 1\n  let currStart = null;\n  let currLen = 0;\n  for (let i = 0; i < arr.length; ++i) {\n    if (arr[i] !== 0) {\n      if (currLen > maxLen) {\n        maxIdx = currStart;\n        maxLen = currLen;\n      }\n      currStart = null;\n      currLen = 0;\n    } else {\n      if (currStart === null) {\n        currStart = i;\n      }\n      ++currLen;\n    }\n  }\n\n  // if trailing zeros\n  if (currLen > maxLen) {\n    return currStart;\n  }\n  return maxIdx;\n}\nfunction serializeHost(host) {\n  if (typeof host === \"number\") {\n    return serializeIPv4(host);\n  }\n\n  // IPv6 serializer\n  if (host instanceof Array) {\n    return `[${serializeIPv6(host)}]`;\n  }\n  return host;\n}\nfunction domainToASCII(domain) {\n  let beStrict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const result = tr46.toASCII(domain, {\n    checkBidi: true,\n    checkHyphens: false,\n    checkJoiners: true,\n    useSTD3ASCIIRules: beStrict,\n    verifyDNSLength: beStrict\n  });\n  if (result === null || result === \"\") {\n    return failure;\n  }\n  return result;\n}\nfunction trimControlChars(url) {\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/ug, \"\");\n}\nfunction trimTabAndNewline(url) {\n  return url.replace(/\\u0009|\\u000A|\\u000D/ug, \"\");\n}\nfunction shortenPath(url) {\n  const {\n    path\n  } = url;\n  if (path.length === 0) {\n    return;\n  }\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\n    return;\n  }\n  path.pop();\n}\nfunction includesCredentials(url) {\n  return url.username !== \"\" || url.password !== \"\";\n}\nfunction cannotHaveAUsernamePasswordPort(url) {\n  return url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\";\n}\nfunction isNormalizedWindowsDriveLetter(string) {\n  return /^[A-Za-z]:$/u.test(string);\n}\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\n  this.pointer = 0;\n  this.input = input;\n  this.base = base || null;\n  this.encodingOverride = encodingOverride || \"utf-8\";\n  this.stateOverride = stateOverride;\n  this.url = url;\n  this.failure = false;\n  this.parseError = false;\n  if (!this.url) {\n    this.url = {\n      scheme: \"\",\n      username: \"\",\n      password: \"\",\n      host: null,\n      port: null,\n      path: [],\n      query: null,\n      fragment: null,\n      cannotBeABaseURL: false\n    };\n    const res = trimControlChars(this.input);\n    if (res !== this.input) {\n      this.parseError = true;\n    }\n    this.input = res;\n  }\n  const res = trimTabAndNewline(this.input);\n  if (res !== this.input) {\n    this.parseError = true;\n  }\n  this.input = res;\n  this.state = stateOverride || \"scheme start\";\n  this.buffer = \"\";\n  this.atFlag = false;\n  this.arrFlag = false;\n  this.passwordTokenSeenFlag = false;\n  this.input = punycode.ucs2.decode(this.input);\n  for (; this.pointer <= this.input.length; ++this.pointer) {\n    const c = this.input[this.pointer];\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\n\n    // exec state machine\n    const ret = this[`parse ${this.state}`](c, cStr);\n    if (!ret) {\n      break; // terminate algorithm\n    } else if (ret === failure) {\n      this.failure = true;\n      break;\n    }\n  }\n}\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\n  if (infra.isASCIIAlpha(c)) {\n    this.buffer += cStr.toLowerCase();\n    this.state = \"scheme\";\n  } else if (!this.stateOverride) {\n    this.state = \"no scheme\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\n  if (infra.isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {\n    this.buffer += cStr.toLowerCase();\n  } else if (c === 58) {\n    if (this.stateOverride) {\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\n        return false;\n      }\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\n        return false;\n      }\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\n        return false;\n      }\n      if (this.url.scheme === \"file\" && this.url.host === \"\") {\n        return false;\n      }\n    }\n    this.url.scheme = this.buffer;\n    if (this.stateOverride) {\n      if (this.url.port === defaultPort(this.url.scheme)) {\n        this.url.port = null;\n      }\n      return false;\n    }\n    this.buffer = \"\";\n    if (this.url.scheme === \"file\") {\n      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {\n        this.parseError = true;\n      }\n      this.state = \"file\";\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\n      this.state = \"special relative or authority\";\n    } else if (isSpecial(this.url)) {\n      this.state = \"special authority slashes\";\n    } else if (this.input[this.pointer + 1] === 47) {\n      this.state = \"path or authority\";\n      ++this.pointer;\n    } else {\n      this.url.cannotBeABaseURL = true;\n      this.url.path.push(\"\");\n      this.state = \"cannot-be-a-base-URL path\";\n    }\n  } else if (!this.stateOverride) {\n    this.buffer = \"\";\n    this.state = \"no scheme\";\n    this.pointer = -1;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\n  if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {\n    return failure;\n  } else if (this.base.cannotBeABaseURL && c === 35) {\n    this.url.scheme = this.base.scheme;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.url.cannotBeABaseURL = true;\n    this.state = \"fragment\";\n  } else if (this.base.scheme === \"file\") {\n    this.state = \"file\";\n    --this.pointer;\n  } else {\n    this.state = \"relative\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"relative\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\n  if (c === 47) {\n    this.state = \"authority\";\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\n  this.url.scheme = this.base.scheme;\n  if (c === 47) {\n    this.state = \"relative slash\";\n  } else if (isSpecial(this.url) && c === 92) {\n    this.parseError = true;\n    this.state = \"relative slash\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    if (c === 63) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else if (!isNaN(c)) {\n      this.url.query = null;\n      this.url.path.pop();\n      this.state = \"path\";\n      --this.pointer;\n    }\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\n  if (isSpecial(this.url) && (c === 47 || c === 92)) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"special authority ignore slashes\";\n  } else if (c === 47) {\n    this.state = \"authority\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"special authority ignore slashes\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\n  if (c !== 47 && c !== 92) {\n    this.state = \"authority\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\n  if (c === 64) {\n    this.parseError = true;\n    if (this.atFlag) {\n      this.buffer = `%40${this.buffer}`;\n    }\n    this.atFlag = true;\n\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\n    const len = countSymbols(this.buffer);\n    for (let pointer = 0; pointer < len; ++pointer) {\n      const codePoint = this.buffer.codePointAt(pointer);\n      if (codePoint === 58 && !this.passwordTokenSeenFlag) {\n        this.passwordTokenSeenFlag = true;\n        continue;\n      }\n      const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);\n      if (this.passwordTokenSeenFlag) {\n        this.url.password += encodedCodePoints;\n      } else {\n        this.url.username += encodedCodePoints;\n      }\n    }\n    this.buffer = \"\";\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {\n    if (this.atFlag && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    this.pointer -= countSymbols(this.buffer) + 1;\n    this.buffer = \"\";\n    this.state = \"host\";\n  } else {\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse hostname\"] = URLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\n  if (this.stateOverride && this.url.scheme === \"file\") {\n    --this.pointer;\n    this.state = \"file host\";\n  } else if (c === 58 && !this.arrFlag) {\n    if (this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    if (this.stateOverride === \"hostname\") {\n      return false;\n    }\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"port\";\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {\n    --this.pointer;\n    if (isSpecial(this.url) && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    } else if (this.stateOverride && this.buffer === \"\" && (includesCredentials(this.url) || this.url.port !== null)) {\n      this.parseError = true;\n      return false;\n    }\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"path start\";\n    if (this.stateOverride) {\n      return false;\n    }\n  } else {\n    if (c === 91) {\n      this.arrFlag = true;\n    } else if (c === 93) {\n      this.arrFlag = false;\n    }\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\n  if (infra.isASCIIDigit(c)) {\n    this.buffer += cStr;\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {\n    if (this.buffer !== \"\") {\n      const port = parseInt(this.buffer);\n      if (port > 2 ** 16 - 1) {\n        this.parseError = true;\n        return failure;\n      }\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\n      this.buffer = \"\";\n    }\n    if (this.stateOverride) {\n      return false;\n    }\n    this.state = \"path start\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n  return true;\n};\nconst fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);\nfunction startsWithWindowsDriveLetter(input, pointer) {\n  const length = input.length - pointer;\n  return length >= 2 && isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) && (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));\n}\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\n  this.url.scheme = \"file\";\n  this.url.host = \"\";\n  if (c === 47 || c === 92) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"file slash\";\n  } else if (this.base !== null && this.base.scheme === \"file\") {\n    this.url.host = this.base.host;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    if (c === 63) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else if (!isNaN(c)) {\n      this.url.query = null;\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {\n        shortenPath(this.url);\n      } else {\n        this.parseError = true;\n        this.url.path = [];\n      }\n      this.state = \"path\";\n      --this.pointer;\n    }\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\n  if (c === 47 || c === 92) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"file host\";\n  } else {\n    if (this.base !== null && this.base.scheme === \"file\") {\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer) && isNormalizedWindowsDriveLetterString(this.base.path[0])) {\n        this.url.path.push(this.base.path[0]);\n      }\n      this.url.host = this.base.host;\n    }\n    this.state = \"path\";\n    --this.pointer;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\n  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {\n    --this.pointer;\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\n      this.parseError = true;\n      this.state = \"path\";\n    } else if (this.buffer === \"\") {\n      this.url.host = \"\";\n      if (this.stateOverride) {\n        return false;\n      }\n      this.state = \"path start\";\n    } else {\n      let host = parseHost(this.buffer, isNotSpecial(this.url));\n      if (host === failure) {\n        return failure;\n      }\n      if (host === \"localhost\") {\n        host = \"\";\n      }\n      this.url.host = host;\n      if (this.stateOverride) {\n        return false;\n      }\n      this.buffer = \"\";\n      this.state = \"path start\";\n    }\n  } else {\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\n  if (isSpecial(this.url)) {\n    if (c === 92) {\n      this.parseError = true;\n    }\n    this.state = \"path\";\n    if (c !== 47 && c !== 92) {\n      --this.pointer;\n    }\n  } else if (!this.stateOverride && c === 63) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (!this.stateOverride && c === 35) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (c !== undefined) {\n    this.state = \"path\";\n    if (c !== 47) {\n      --this.pointer;\n    }\n  } else if (this.stateOverride && this.url.host === null) {\n    this.url.path.push(\"\");\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\n  if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {\n    if (isSpecial(this.url) && c === 92) {\n      this.parseError = true;\n    }\n    if (isDoubleDot(this.buffer)) {\n      shortenPath(this.url);\n      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {\n        this.url.path.push(\"\");\n      }\n    } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {\n      this.url.path.push(\"\");\n    } else if (!isSingleDot(this.buffer)) {\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\n        this.buffer = `${this.buffer[0]}:`;\n      }\n      this.url.path.push(this.buffer);\n    }\n    this.buffer = \"\";\n    if (c === 63) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    }\n    if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse cannot-be-a-base-URL path\"] = function parseCannotBeABaseURLPath(c) {\n  if (c === 63) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === 35) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else {\n    // TODO: Add: not a URL code point\n    if (!isNaN(c) && c !== 37) {\n      this.parseError = true;\n    }\n    if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    if (!isNaN(c)) {\n      this.url.path[0] += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);\n    }\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\n  if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\n    this.encodingOverride = \"utf-8\";\n  }\n  if (!this.stateOverride && c === 35 || isNaN(c)) {\n    const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;\n    this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);\n    this.buffer = \"\";\n    if (c === 35) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else if (!isNaN(c)) {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.buffer += cStr;\n  }\n  return true;\n};\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\n  if (!isNaN(c)) {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n    this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);\n  }\n  return true;\n};\nfunction serializeURL(url, excludeFragment) {\n  let output = `${url.scheme}:`;\n  if (url.host !== null) {\n    output += \"//\";\n    if (url.username !== \"\" || url.password !== \"\") {\n      output += url.username;\n      if (url.password !== \"\") {\n        output += `:${url.password}`;\n      }\n      output += \"@\";\n    }\n    output += serializeHost(url.host);\n    if (url.port !== null) {\n      output += `:${url.port}`;\n    }\n  }\n  if (url.cannotBeABaseURL) {\n    output += url.path[0];\n  } else {\n    if (url.host === null && url.path.length > 1 && url.path[0] === \"\") {\n      output += \"/.\";\n    }\n    for (const segment of url.path) {\n      output += `/${segment}`;\n    }\n  }\n  if (url.query !== null) {\n    output += `?${url.query}`;\n  }\n  if (!excludeFragment && url.fragment !== null) {\n    output += `#${url.fragment}`;\n  }\n  return output;\n}\nfunction serializeOrigin(tuple) {\n  let result = `${tuple.scheme}://`;\n  result += serializeHost(tuple.host);\n  if (tuple.port !== null) {\n    result += `:${tuple.port}`;\n  }\n  return result;\n}\nmodule.exports.serializeURL = serializeURL;\nmodule.exports.serializeURLOrigin = function (url) {\n  // https://url.spec.whatwg.org/#concept-url-origin\n  switch (url.scheme) {\n    case \"blob\":\n      try {\n        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));\n      } catch (e) {\n        // serializing an opaque origin returns \"null\"\n        return \"null\";\n      }\n    case \"ftp\":\n    case \"http\":\n    case \"https\":\n    case \"ws\":\n    case \"wss\":\n      return serializeOrigin({\n        scheme: url.scheme,\n        host: url.host,\n        port: url.port\n      });\n    case \"file\":\n      // The spec says:\n      // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.\n      // Browsers tested so far:\n      // - Chrome says \"file://\", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.\n      //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586\n      // - Firefox says \"null\", but treats file: URLs as same-origin sometimes based on directory stuff; see\n      //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs\n      return \"null\";\n    default:\n      // serializing an opaque origin returns \"null\"\n      return \"null\";\n  }\n};\nmodule.exports.basicURLParse = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\n  if (usm.failure) {\n    return null;\n  }\n  return usm.url;\n};\nmodule.exports.setTheUsername = function (url, username) {\n  url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);\n};\nmodule.exports.setThePassword = function (url, password) {\n  url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);\n};\nmodule.exports.serializeHost = serializeHost;\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\nmodule.exports.serializeInteger = function (integer) {\n  return String(integer);\n};\nmodule.exports.parseURL = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  // We don't handle blobs, so this just delegates:\n  return module.exports.basicURLParse(input, {\n    baseURL: options.baseURL,\n    encodingOverride: options.encodingOverride\n  });\n};","map":{"version":3,"names":["punycode","require","tr46","infra","utf8DecodeWithoutBOM","percentDecodeString","utf8PercentEncodeCodePoint","utf8PercentEncodeString","isC0ControlPercentEncode","isFragmentPercentEncode","isQueryPercentEncode","isSpecialQueryPercentEncode","isPathPercentEncode","isUserinfoPercentEncode","specialSchemes","ftp","file","http","https","ws","wss","failure","Symbol","countSymbols","str","length","at","input","idx","c","isNaN","undefined","String","fromCodePoint","isSingleDot","buffer","toLowerCase","isDoubleDot","isWindowsDriveLetterCodePoints","cp1","cp2","isASCIIAlpha","isWindowsDriveLetterString","string","codePointAt","isNormalizedWindowsDriveLetterString","containsForbiddenHostCodePoint","search","containsForbiddenHostCodePointExcludingPercent","isSpecialScheme","scheme","isSpecial","url","isNotSpecial","defaultPort","parseIPv4Number","R","charAt","substring","regex","test","parseInt","parseIPv4","parts","split","pop","numbers","part","n","push","i","ipv4","counter","serializeIPv4","address","output","Math","floor","parseIPv6","pieceIndex","compress","pointer","ucs2","decode","value","isASCIIHex","numbersSeen","ipv4Piece","isASCIIDigit","number","swaps","temp","serializeIPv6","findLongestZeroSequence","ignore0","separator","toString","parseHost","isNotSpecialArg","arguments","parseOpaqueHost","domain","asciiDomain","domainToASCII","ipv4Host","arr","maxIdx","maxLen","currStart","currLen","serializeHost","host","Array","beStrict","result","toASCII","checkBidi","checkHyphens","checkJoiners","useSTD3ASCIIRules","verifyDNSLength","trimControlChars","replace","trimTabAndNewline","shortenPath","path","isNormalizedWindowsDriveLetter","includesCredentials","username","password","cannotHaveAUsernamePasswordPort","cannotBeABaseURL","URLStateMachine","base","encodingOverride","stateOverride","parseError","port","query","fragment","res","state","atFlag","arrFlag","passwordTokenSeenFlag","cStr","ret","prototype","parseSchemeStart","parseScheme","isASCIIAlphanumeric","parseNoScheme","slice","parseSpecialRelativeOrAuthority","parsePathOrAuthority","parseRelative","parseRelativeSlash","parseSpecialAuthoritySlashes","parseSpecialAuthorityIgnoreSlashes","parseAuthority","len","codePoint","encodedCodePoints","parseHostName","parsePort","fileOtherwiseCodePoints","Set","startsWithWindowsDriveLetter","has","parseFile","parseFileSlash","parseFileHost","parsePathStart","parsePath","parseCannotBeABaseURLPath","parseQuery","queryPercentEncodePredicate","parseFragment","serializeURL","excludeFragment","segment","serializeOrigin","tuple","module","exports","serializeURLOrigin","parseURL","e","basicURLParse","options","usm","baseURL","setTheUsername","setThePassword","serializeInteger","integer"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/whatwg-url/dist/url-state-machine.js"],"sourcesContent":["\"use strict\";\r\nconst punycode = require(\"punycode\");\r\nconst tr46 = require(\"tr46\");\r\n\r\nconst infra = require(\"./infra\");\r\nconst { utf8DecodeWithoutBOM } = require(\"./encoding\");\r\nconst { percentDecodeString, utf8PercentEncodeCodePoint, utf8PercentEncodeString, isC0ControlPercentEncode,\r\n  isFragmentPercentEncode, isQueryPercentEncode, isSpecialQueryPercentEncode, isPathPercentEncode,\r\n  isUserinfoPercentEncode } = require(\"./percent-encoding\");\r\n\r\nconst specialSchemes = {\r\n  ftp: 21,\r\n  file: null,\r\n  http: 80,\r\n  https: 443,\r\n  ws: 80,\r\n  wss: 443\r\n};\r\n\r\nconst failure = Symbol(\"failure\");\r\n\r\nfunction countSymbols(str) {\r\n  return [...str].length;\r\n}\r\n\r\nfunction at(input, idx) {\r\n  const c = input[idx];\r\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\r\n}\r\n\r\nfunction isSingleDot(buffer) {\r\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\r\n}\r\n\r\nfunction isDoubleDot(buffer) {\r\n  buffer = buffer.toLowerCase();\r\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\r\n}\r\n\r\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\r\n  return infra.isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);\r\n}\r\n\r\nfunction isWindowsDriveLetterString(string) {\r\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetterString(string) {\r\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\r\n}\r\n\r\nfunction containsForbiddenHostCodePoint(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\r\n}\r\n\r\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\r\n}\r\n\r\nfunction isSpecialScheme(scheme) {\r\n  return specialSchemes[scheme] !== undefined;\r\n}\r\n\r\nfunction isSpecial(url) {\r\n  return isSpecialScheme(url.scheme);\r\n}\r\n\r\nfunction isNotSpecial(url) {\r\n  return !isSpecialScheme(url.scheme);\r\n}\r\n\r\nfunction defaultPort(scheme) {\r\n  return specialSchemes[scheme];\r\n}\r\n\r\nfunction parseIPv4Number(input) {\r\n  let R = 10;\r\n\r\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\r\n    input = input.substring(2);\r\n    R = 16;\r\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\r\n    input = input.substring(1);\r\n    R = 8;\r\n  }\r\n\r\n  if (input === \"\") {\r\n    return 0;\r\n  }\r\n\r\n  let regex = /[^0-7]/u;\r\n  if (R === 10) {\r\n    regex = /[^0-9]/u;\r\n  }\r\n  if (R === 16) {\r\n    regex = /[^0-9A-Fa-f]/u;\r\n  }\r\n\r\n  if (regex.test(input)) {\r\n    return failure;\r\n  }\r\n\r\n  return parseInt(input, R);\r\n}\r\n\r\nfunction parseIPv4(input) {\r\n  const parts = input.split(\".\");\r\n  if (parts[parts.length - 1] === \"\") {\r\n    if (parts.length > 1) {\r\n      parts.pop();\r\n    }\r\n  }\r\n\r\n  if (parts.length > 4) {\r\n    return input;\r\n  }\r\n\r\n  const numbers = [];\r\n  for (const part of parts) {\r\n    if (part === \"\") {\r\n      return input;\r\n    }\r\n    const n = parseIPv4Number(part);\r\n    if (n === failure) {\r\n      return input;\r\n    }\r\n\r\n    numbers.push(n);\r\n  }\r\n\r\n  for (let i = 0; i < numbers.length - 1; ++i) {\r\n    if (numbers[i] > 255) {\r\n      return failure;\r\n    }\r\n  }\r\n  if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {\r\n    return failure;\r\n  }\r\n\r\n  let ipv4 = numbers.pop();\r\n  let counter = 0;\r\n\r\n  for (const n of numbers) {\r\n    ipv4 += n * 256 ** (3 - counter);\r\n    ++counter;\r\n  }\r\n\r\n  return ipv4;\r\n}\r\n\r\nfunction serializeIPv4(address) {\r\n  let output = \"\";\r\n  let n = address;\r\n\r\n  for (let i = 1; i <= 4; ++i) {\r\n    output = String(n % 256) + output;\r\n    if (i !== 4) {\r\n      output = `.${output}`;\r\n    }\r\n    n = Math.floor(n / 256);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseIPv6(input) {\r\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\r\n  let pieceIndex = 0;\r\n  let compress = null;\r\n  let pointer = 0;\r\n\r\n  input = punycode.ucs2.decode(input);\r\n\r\n  if (input[pointer] === 58) {\r\n    if (input[pointer + 1] !== 58) {\r\n      return failure;\r\n    }\r\n\r\n    pointer += 2;\r\n    ++pieceIndex;\r\n    compress = pieceIndex;\r\n  }\r\n\r\n  while (pointer < input.length) {\r\n    if (pieceIndex === 8) {\r\n      return failure;\r\n    }\r\n\r\n    if (input[pointer] === 58) {\r\n      if (compress !== null) {\r\n        return failure;\r\n      }\r\n      ++pointer;\r\n      ++pieceIndex;\r\n      compress = pieceIndex;\r\n      continue;\r\n    }\r\n\r\n    let value = 0;\r\n    let length = 0;\r\n\r\n    while (length < 4 && infra.isASCIIHex(input[pointer])) {\r\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\r\n      ++pointer;\r\n      ++length;\r\n    }\r\n\r\n    if (input[pointer] === 46) {\r\n      if (length === 0) {\r\n        return failure;\r\n      }\r\n\r\n      pointer -= length;\r\n\r\n      if (pieceIndex > 6) {\r\n        return failure;\r\n      }\r\n\r\n      let numbersSeen = 0;\r\n\r\n      while (input[pointer] !== undefined) {\r\n        let ipv4Piece = null;\r\n\r\n        if (numbersSeen > 0) {\r\n          if (input[pointer] === 46 && numbersSeen < 4) {\r\n            ++pointer;\r\n          } else {\r\n            return failure;\r\n          }\r\n        }\r\n\r\n        if (!infra.isASCIIDigit(input[pointer])) {\r\n          return failure;\r\n        }\r\n\r\n        while (infra.isASCIIDigit(input[pointer])) {\r\n          const number = parseInt(at(input, pointer));\r\n          if (ipv4Piece === null) {\r\n            ipv4Piece = number;\r\n          } else if (ipv4Piece === 0) {\r\n            return failure;\r\n          } else {\r\n            ipv4Piece = ipv4Piece * 10 + number;\r\n          }\r\n          if (ipv4Piece > 255) {\r\n            return failure;\r\n          }\r\n          ++pointer;\r\n        }\r\n\r\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\r\n\r\n        ++numbersSeen;\r\n\r\n        if (numbersSeen === 2 || numbersSeen === 4) {\r\n          ++pieceIndex;\r\n        }\r\n      }\r\n\r\n      if (numbersSeen !== 4) {\r\n        return failure;\r\n      }\r\n\r\n      break;\r\n    } else if (input[pointer] === 58) {\r\n      ++pointer;\r\n      if (input[pointer] === undefined) {\r\n        return failure;\r\n      }\r\n    } else if (input[pointer] !== undefined) {\r\n      return failure;\r\n    }\r\n\r\n    address[pieceIndex] = value;\r\n    ++pieceIndex;\r\n  }\r\n\r\n  if (compress !== null) {\r\n    let swaps = pieceIndex - compress;\r\n    pieceIndex = 7;\r\n    while (pieceIndex !== 0 && swaps > 0) {\r\n      const temp = address[compress + swaps - 1];\r\n      address[compress + swaps - 1] = address[pieceIndex];\r\n      address[pieceIndex] = temp;\r\n      --pieceIndex;\r\n      --swaps;\r\n    }\r\n  } else if (compress === null && pieceIndex !== 8) {\r\n    return failure;\r\n  }\r\n\r\n  return address;\r\n}\r\n\r\nfunction serializeIPv6(address) {\r\n  let output = \"\";\r\n  const compress = findLongestZeroSequence(address);\r\n  let ignore0 = false;\r\n\r\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\r\n    if (ignore0 && address[pieceIndex] === 0) {\r\n      continue;\r\n    } else if (ignore0) {\r\n      ignore0 = false;\r\n    }\r\n\r\n    if (compress === pieceIndex) {\r\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\r\n      output += separator;\r\n      ignore0 = true;\r\n      continue;\r\n    }\r\n\r\n    output += address[pieceIndex].toString(16);\r\n\r\n    if (pieceIndex !== 7) {\r\n      output += \":\";\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseHost(input, isNotSpecialArg = false) {\r\n  if (input[0] === \"[\") {\r\n    if (input[input.length - 1] !== \"]\") {\r\n      return failure;\r\n    }\r\n\r\n    return parseIPv6(input.substring(1, input.length - 1));\r\n  }\r\n\r\n  if (isNotSpecialArg) {\r\n    return parseOpaqueHost(input);\r\n  }\r\n\r\n  const domain = utf8DecodeWithoutBOM(percentDecodeString(input));\r\n  const asciiDomain = domainToASCII(domain);\r\n  if (asciiDomain === failure) {\r\n    return failure;\r\n  }\r\n\r\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\r\n    return failure;\r\n  }\r\n\r\n  const ipv4Host = parseIPv4(asciiDomain);\r\n  if (typeof ipv4Host === \"number\" || ipv4Host === failure) {\r\n    return ipv4Host;\r\n  }\r\n\r\n  return asciiDomain;\r\n}\r\n\r\nfunction parseOpaqueHost(input) {\r\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\r\n    return failure;\r\n  }\r\n\r\n  return utf8PercentEncodeString(input, isC0ControlPercentEncode);\r\n}\r\n\r\nfunction findLongestZeroSequence(arr) {\r\n  let maxIdx = null;\r\n  let maxLen = 1; // only find elements > 1\r\n  let currStart = null;\r\n  let currLen = 0;\r\n\r\n  for (let i = 0; i < arr.length; ++i) {\r\n    if (arr[i] !== 0) {\r\n      if (currLen > maxLen) {\r\n        maxIdx = currStart;\r\n        maxLen = currLen;\r\n      }\r\n\r\n      currStart = null;\r\n      currLen = 0;\r\n    } else {\r\n      if (currStart === null) {\r\n        currStart = i;\r\n      }\r\n      ++currLen;\r\n    }\r\n  }\r\n\r\n  // if trailing zeros\r\n  if (currLen > maxLen) {\r\n    return currStart;\r\n  }\r\n\r\n  return maxIdx;\r\n}\r\n\r\nfunction serializeHost(host) {\r\n  if (typeof host === \"number\") {\r\n    return serializeIPv4(host);\r\n  }\r\n\r\n  // IPv6 serializer\r\n  if (host instanceof Array) {\r\n    return `[${serializeIPv6(host)}]`;\r\n  }\r\n\r\n  return host;\r\n}\r\n\r\nfunction domainToASCII(domain, beStrict = false) {\r\n  const result = tr46.toASCII(domain, {\r\n    checkBidi: true,\r\n    checkHyphens: false,\r\n    checkJoiners: true,\r\n    useSTD3ASCIIRules: beStrict,\r\n    verifyDNSLength: beStrict\r\n  });\r\n  if (result === null || result === \"\") {\r\n    return failure;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction trimControlChars(url) {\r\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/ug, \"\");\r\n}\r\n\r\nfunction trimTabAndNewline(url) {\r\n  return url.replace(/\\u0009|\\u000A|\\u000D/ug, \"\");\r\n}\r\n\r\nfunction shortenPath(url) {\r\n  const { path } = url;\r\n  if (path.length === 0) {\r\n    return;\r\n  }\r\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\r\n    return;\r\n  }\r\n\r\n  path.pop();\r\n}\r\n\r\nfunction includesCredentials(url) {\r\n  return url.username !== \"\" || url.password !== \"\";\r\n}\r\n\r\nfunction cannotHaveAUsernamePasswordPort(url) {\r\n  return url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\";\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetter(string) {\r\n  return /^[A-Za-z]:$/u.test(string);\r\n}\r\n\r\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\r\n  this.pointer = 0;\r\n  this.input = input;\r\n  this.base = base || null;\r\n  this.encodingOverride = encodingOverride || \"utf-8\";\r\n  this.stateOverride = stateOverride;\r\n  this.url = url;\r\n  this.failure = false;\r\n  this.parseError = false;\r\n\r\n  if (!this.url) {\r\n    this.url = {\r\n      scheme: \"\",\r\n      username: \"\",\r\n      password: \"\",\r\n      host: null,\r\n      port: null,\r\n      path: [],\r\n      query: null,\r\n      fragment: null,\r\n\r\n      cannotBeABaseURL: false\r\n    };\r\n\r\n    const res = trimControlChars(this.input);\r\n    if (res !== this.input) {\r\n      this.parseError = true;\r\n    }\r\n    this.input = res;\r\n  }\r\n\r\n  const res = trimTabAndNewline(this.input);\r\n  if (res !== this.input) {\r\n    this.parseError = true;\r\n  }\r\n  this.input = res;\r\n\r\n  this.state = stateOverride || \"scheme start\";\r\n\r\n  this.buffer = \"\";\r\n  this.atFlag = false;\r\n  this.arrFlag = false;\r\n  this.passwordTokenSeenFlag = false;\r\n\r\n  this.input = punycode.ucs2.decode(this.input);\r\n\r\n  for (; this.pointer <= this.input.length; ++this.pointer) {\r\n    const c = this.input[this.pointer];\r\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\r\n\r\n    // exec state machine\r\n    const ret = this[`parse ${this.state}`](c, cStr);\r\n    if (!ret) {\r\n      break; // terminate algorithm\r\n    } else if (ret === failure) {\r\n      this.failure = true;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\r\n  if (infra.isASCIIAlpha(c)) {\r\n    this.buffer += cStr.toLowerCase();\r\n    this.state = \"scheme\";\r\n  } else if (!this.stateOverride) {\r\n    this.state = \"no scheme\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\r\n  if (infra.isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {\r\n    this.buffer += cStr.toLowerCase();\r\n  } else if (c === 58) {\r\n    if (this.stateOverride) {\r\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\r\n        return false;\r\n      }\r\n\r\n      if (this.url.scheme === \"file\" && this.url.host === \"\") {\r\n        return false;\r\n      }\r\n    }\r\n    this.url.scheme = this.buffer;\r\n    if (this.stateOverride) {\r\n      if (this.url.port === defaultPort(this.url.scheme)) {\r\n        this.url.port = null;\r\n      }\r\n      return false;\r\n    }\r\n    this.buffer = \"\";\r\n    if (this.url.scheme === \"file\") {\r\n      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {\r\n        this.parseError = true;\r\n      }\r\n      this.state = \"file\";\r\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\r\n      this.state = \"special relative or authority\";\r\n    } else if (isSpecial(this.url)) {\r\n      this.state = \"special authority slashes\";\r\n    } else if (this.input[this.pointer + 1] === 47) {\r\n      this.state = \"path or authority\";\r\n      ++this.pointer;\r\n    } else {\r\n      this.url.cannotBeABaseURL = true;\r\n      this.url.path.push(\"\");\r\n      this.state = \"cannot-be-a-base-URL path\";\r\n    }\r\n  } else if (!this.stateOverride) {\r\n    this.buffer = \"\";\r\n    this.state = \"no scheme\";\r\n    this.pointer = -1;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\r\n  if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {\r\n    return failure;\r\n  } else if (this.base.cannotBeABaseURL && c === 35) {\r\n    this.url.scheme = this.base.scheme;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    this.url.fragment = \"\";\r\n    this.url.cannotBeABaseURL = true;\r\n    this.state = \"fragment\";\r\n  } else if (this.base.scheme === \"file\") {\r\n    this.state = \"file\";\r\n    --this.pointer;\r\n  } else {\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\r\n  if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\r\n  this.url.scheme = this.base.scheme;\r\n  if (c === 47) {\r\n    this.state = \"relative slash\";\r\n  } else if (isSpecial(this.url) && c === 92) {\r\n    this.parseError = true;\r\n    this.state = \"relative slash\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    if (c === 63) {\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    } else if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    } else if (!isNaN(c)) {\r\n      this.url.query = null;\r\n      this.url.path.pop();\r\n      this.state = \"path\";\r\n      --this.pointer;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\r\n  if (isSpecial(this.url) && (c === 47 || c === 92)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"special authority ignore slashes\";\r\n  } else if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"special authority ignore slashes\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\r\n  if (c !== 47 && c !== 92) {\r\n    this.state = \"authority\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\r\n  if (c === 64) {\r\n    this.parseError = true;\r\n    if (this.atFlag) {\r\n      this.buffer = `%40${this.buffer}`;\r\n    }\r\n    this.atFlag = true;\r\n\r\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\r\n    const len = countSymbols(this.buffer);\r\n    for (let pointer = 0; pointer < len; ++pointer) {\r\n      const codePoint = this.buffer.codePointAt(pointer);\r\n\r\n      if (codePoint === 58 && !this.passwordTokenSeenFlag) {\r\n        this.passwordTokenSeenFlag = true;\r\n        continue;\r\n      }\r\n      const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);\r\n      if (this.passwordTokenSeenFlag) {\r\n        this.url.password += encodedCodePoints;\r\n      } else {\r\n        this.url.username += encodedCodePoints;\r\n      }\r\n    }\r\n    this.buffer = \"\";\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    if (this.atFlag && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n    this.pointer -= countSymbols(this.buffer) + 1;\r\n    this.buffer = \"\";\r\n    this.state = \"host\";\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse hostname\"] =\r\nURLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\r\n  if (this.stateOverride && this.url.scheme === \"file\") {\r\n    --this.pointer;\r\n    this.state = \"file host\";\r\n  } else if (c === 58 && !this.arrFlag) {\r\n    if (this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n\r\n    if (this.stateOverride === \"hostname\") {\r\n      return false;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"port\";\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    --this.pointer;\r\n    if (isSpecial(this.url) && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    } else if (this.stateOverride && this.buffer === \"\" &&\r\n               (includesCredentials(this.url) || this.url.port !== null)) {\r\n      this.parseError = true;\r\n      return false;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"path start\";\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n  } else {\r\n    if (c === 91) {\r\n      this.arrFlag = true;\r\n    } else if (c === 93) {\r\n      this.arrFlag = false;\r\n    }\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\r\n  if (infra.isASCIIDigit(c)) {\r\n    this.buffer += cStr;\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92) ||\r\n             this.stateOverride) {\r\n    if (this.buffer !== \"\") {\r\n      const port = parseInt(this.buffer);\r\n      if (port > 2 ** 16 - 1) {\r\n        this.parseError = true;\r\n        return failure;\r\n      }\r\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\r\n      this.buffer = \"\";\r\n    }\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n    this.state = \"path start\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);\r\n\r\nfunction startsWithWindowsDriveLetter(input, pointer) {\r\n  const length = input.length - pointer;\r\n  return length >= 2 &&\r\n    isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) &&\r\n    (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));\r\n}\r\n\r\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\r\n  this.url.scheme = \"file\";\r\n  this.url.host = \"\";\r\n\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file slash\";\r\n  } else if (this.base !== null && this.base.scheme === \"file\") {\r\n    this.url.host = this.base.host;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    if (c === 63) {\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    } else if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    } else if (!isNaN(c)) {\r\n      this.url.query = null;\r\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {\r\n        shortenPath(this.url);\r\n      } else {\r\n        this.parseError = true;\r\n        this.url.path = [];\r\n      }\r\n\r\n      this.state = \"path\";\r\n      --this.pointer;\r\n    }\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file host\";\r\n  } else {\r\n    if (this.base !== null && this.base.scheme === \"file\") {\r\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer) &&\r\n          isNormalizedWindowsDriveLetterString(this.base.path[0])) {\r\n        this.url.path.push(this.base.path[0]);\r\n      }\r\n      this.url.host = this.base.host;\r\n    }\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\r\n  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {\r\n    --this.pointer;\r\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\r\n      this.parseError = true;\r\n      this.state = \"path\";\r\n    } else if (this.buffer === \"\") {\r\n      this.url.host = \"\";\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n      this.state = \"path start\";\r\n    } else {\r\n      let host = parseHost(this.buffer, isNotSpecial(this.url));\r\n      if (host === failure) {\r\n        return failure;\r\n      }\r\n      if (host === \"localhost\") {\r\n        host = \"\";\r\n      }\r\n      this.url.host = host;\r\n\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n\r\n      this.buffer = \"\";\r\n      this.state = \"path start\";\r\n    }\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\r\n  if (isSpecial(this.url)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"path\";\r\n\r\n    if (c !== 47 && c !== 92) {\r\n      --this.pointer;\r\n    }\r\n  } else if (!this.stateOverride && c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (!this.stateOverride && c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else if (c !== undefined) {\r\n    this.state = \"path\";\r\n    if (c !== 47) {\r\n      --this.pointer;\r\n    }\r\n  } else if (this.stateOverride && this.url.host === null) {\r\n    this.url.path.push(\"\");\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\r\n  if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) ||\r\n      (!this.stateOverride && (c === 63 || c === 35))) {\r\n    if (isSpecial(this.url) && c === 92) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (isDoubleDot(this.buffer)) {\r\n      shortenPath(this.url);\r\n      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {\r\n        this.url.path.push(\"\");\r\n      }\r\n    } else if (isSingleDot(this.buffer) && c !== 47 &&\r\n               !(isSpecial(this.url) && c === 92)) {\r\n      this.url.path.push(\"\");\r\n    } else if (!isSingleDot(this.buffer)) {\r\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\r\n        this.buffer = `${this.buffer[0]}:`;\r\n      }\r\n      this.url.path.push(this.buffer);\r\n    }\r\n    this.buffer = \"\";\r\n    if (c === 63) {\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    }\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n\r\n    if (c === 37 &&\r\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse cannot-be-a-base-URL path\"] = function parseCannotBeABaseURLPath(c) {\r\n  if (c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else {\r\n    // TODO: Add: not a URL code point\r\n    if (!isNaN(c) && c !== 37) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (c === 37 &&\r\n        (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\r\n         !infra.isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (!isNaN(c)) {\r\n      this.url.path[0] += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\r\n  if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\r\n    this.encodingOverride = \"utf-8\";\r\n  }\r\n\r\n  if ((!this.stateOverride && c === 35) || isNaN(c)) {\r\n    const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;\r\n    this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);\r\n\r\n    this.buffer = \"\";\r\n\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else if (!isNaN(c)) {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n\r\n    if (c === 37 &&\r\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\r\n  if (!isNaN(c)) {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n    if (c === 37 &&\r\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction serializeURL(url, excludeFragment) {\r\n  let output = `${url.scheme}:`;\r\n  if (url.host !== null) {\r\n    output += \"//\";\r\n\r\n    if (url.username !== \"\" || url.password !== \"\") {\r\n      output += url.username;\r\n      if (url.password !== \"\") {\r\n        output += `:${url.password}`;\r\n      }\r\n      output += \"@\";\r\n    }\r\n\r\n    output += serializeHost(url.host);\r\n\r\n    if (url.port !== null) {\r\n      output += `:${url.port}`;\r\n    }\r\n  }\r\n\r\n  if (url.cannotBeABaseURL) {\r\n    output += url.path[0];\r\n  } else {\r\n    if (url.host === null && url.path.length > 1 && url.path[0] === \"\") {\r\n      output += \"/.\";\r\n    }\r\n    for (const segment of url.path) {\r\n      output += `/${segment}`;\r\n    }\r\n  }\r\n\r\n  if (url.query !== null) {\r\n    output += `?${url.query}`;\r\n  }\r\n\r\n  if (!excludeFragment && url.fragment !== null) {\r\n    output += `#${url.fragment}`;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction serializeOrigin(tuple) {\r\n  let result = `${tuple.scheme}://`;\r\n  result += serializeHost(tuple.host);\r\n\r\n  if (tuple.port !== null) {\r\n    result += `:${tuple.port}`;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports.serializeURL = serializeURL;\r\n\r\nmodule.exports.serializeURLOrigin = function (url) {\r\n  // https://url.spec.whatwg.org/#concept-url-origin\r\n  switch (url.scheme) {\r\n    case \"blob\":\r\n      try {\r\n        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));\r\n      } catch (e) {\r\n        // serializing an opaque origin returns \"null\"\r\n        return \"null\";\r\n      }\r\n    case \"ftp\":\r\n    case \"http\":\r\n    case \"https\":\r\n    case \"ws\":\r\n    case \"wss\":\r\n      return serializeOrigin({\r\n        scheme: url.scheme,\r\n        host: url.host,\r\n        port: url.port\r\n      });\r\n    case \"file\":\r\n      // The spec says:\r\n      // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.\r\n      // Browsers tested so far:\r\n      // - Chrome says \"file://\", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.\r\n      //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586\r\n      // - Firefox says \"null\", but treats file: URLs as same-origin sometimes based on directory stuff; see\r\n      //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs\r\n      return \"null\";\r\n    default:\r\n      // serializing an opaque origin returns \"null\"\r\n      return \"null\";\r\n  }\r\n};\r\n\r\nmodule.exports.basicURLParse = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\r\n  if (usm.failure) {\r\n    return null;\r\n  }\r\n\r\n  return usm.url;\r\n};\r\n\r\nmodule.exports.setTheUsername = function (url, username) {\r\n  url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);\r\n};\r\n\r\nmodule.exports.setThePassword = function (url, password) {\r\n  url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);\r\n};\r\n\r\nmodule.exports.serializeHost = serializeHost;\r\n\r\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\r\n\r\nmodule.exports.serializeInteger = function (integer) {\r\n  return String(integer);\r\n};\r\n\r\nmodule.exports.parseURL = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  // We don't handle blobs, so this just delegates:\r\n  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });\r\n};\r\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAS,CAAC;AAChC,MAAM;EAAEG;AAAqB,CAAC,GAAGH,OAAO,CAAC,YAAY,CAAC;AACtD,MAAM;EAAEI,mBAAmB;EAAEC,0BAA0B;EAAEC,uBAAuB;EAAEC,wBAAwB;EACxGC,uBAAuB;EAAEC,oBAAoB;EAAEC,2BAA2B;EAAEC,mBAAmB;EAC/FC;AAAwB,CAAC,GAAGZ,OAAO,CAAC,oBAAoB,CAAC;AAE3D,MAAMa,cAAc,GAAG;EACrBC,GAAG,EAAE,EAAE;EACPC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,EAAE;EACRC,KAAK,EAAE,GAAG;EACVC,EAAE,EAAE,EAAE;EACNC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,OAAO,GAAGC,MAAM,CAAC,SAAS,CAAC;AAEjC,SAASC,YAAYA,CAACC,GAAG,EAAE;EACzB,OAAO,CAAC,GAAGA,GAAG,CAAC,CAACC,MAAM;AACxB;AAEA,SAASC,EAAEA,CAACC,KAAK,EAAEC,GAAG,EAAE;EACtB,MAAMC,CAAC,GAAGF,KAAK,CAACC,GAAG,CAAC;EACpB,OAAOE,KAAK,CAACD,CAAC,CAAC,GAAGE,SAAS,GAAGC,MAAM,CAACC,aAAa,CAACJ,CAAC,CAAC;AACvD;AAEA,SAASK,WAAWA,CAACC,MAAM,EAAE;EAC3B,OAAOA,MAAM,KAAK,GAAG,IAAIA,MAAM,CAACC,WAAW,EAAE,KAAK,KAAK;AACzD;AAEA,SAASC,WAAWA,CAACF,MAAM,EAAE;EAC3BA,MAAM,GAAGA,MAAM,CAACC,WAAW,EAAE;EAC7B,OAAOD,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,QAAQ;AACzF;AAEA,SAASG,8BAA8BA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAChD,OAAOrC,KAAK,CAACsC,YAAY,CAACF,GAAG,CAAC,KAAKC,GAAG,KAAK,EAAE,IAAIA,GAAG,KAAK,GAAG,CAAC;AAC/D;AAEA,SAASE,0BAA0BA,CAACC,MAAM,EAAE;EAC1C,OAAOA,MAAM,CAAClB,MAAM,KAAK,CAAC,IAAItB,KAAK,CAACsC,YAAY,CAACE,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAKD,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;AACrH;AAEA,SAASE,oCAAoCA,CAACF,MAAM,EAAE;EACpD,OAAOA,MAAM,CAAClB,MAAM,KAAK,CAAC,IAAItB,KAAK,CAACsC,YAAY,CAACE,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAID,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;AAC9F;AAEA,SAASG,8BAA8BA,CAACH,MAAM,EAAE;EAC9C,OAAOA,MAAM,CAACI,MAAM,CAAC,sEAAsE,CAAC,KAAK,CAAC,CAAC;AACrG;AAEA,SAASC,8CAA8CA,CAACL,MAAM,EAAE;EAC9D,OAAOA,MAAM,CAACI,MAAM,CAAC,oEAAoE,CAAC,KAAK,CAAC,CAAC;AACnG;AAEA,SAASE,eAAeA,CAACC,MAAM,EAAE;EAC/B,OAAOpC,cAAc,CAACoC,MAAM,CAAC,KAAKnB,SAAS;AAC7C;AAEA,SAASoB,SAASA,CAACC,GAAG,EAAE;EACtB,OAAOH,eAAe,CAACG,GAAG,CAACF,MAAM,CAAC;AACpC;AAEA,SAASG,YAAYA,CAACD,GAAG,EAAE;EACzB,OAAO,CAACH,eAAe,CAACG,GAAG,CAACF,MAAM,CAAC;AACrC;AAEA,SAASI,WAAWA,CAACJ,MAAM,EAAE;EAC3B,OAAOpC,cAAc,CAACoC,MAAM,CAAC;AAC/B;AAEA,SAASK,eAAeA,CAAC5B,KAAK,EAAE;EAC9B,IAAI6B,CAAC,GAAG,EAAE;EAEV,IAAI7B,KAAK,CAACF,MAAM,IAAI,CAAC,IAAIE,KAAK,CAAC8B,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI9B,KAAK,CAAC8B,MAAM,CAAC,CAAC,CAAC,CAACrB,WAAW,EAAE,KAAK,GAAG,EAAE;IACzFT,KAAK,GAAGA,KAAK,CAAC+B,SAAS,CAAC,CAAC,CAAC;IAC1BF,CAAC,GAAG,EAAE;EACR,CAAC,MAAM,IAAI7B,KAAK,CAACF,MAAM,IAAI,CAAC,IAAIE,KAAK,CAAC8B,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACvD9B,KAAK,GAAGA,KAAK,CAAC+B,SAAS,CAAC,CAAC,CAAC;IAC1BF,CAAC,GAAG,CAAC;EACP;EAEA,IAAI7B,KAAK,KAAK,EAAE,EAAE;IAChB,OAAO,CAAC;EACV;EAEA,IAAIgC,KAAK,GAAG,SAAS;EACrB,IAAIH,CAAC,KAAK,EAAE,EAAE;IACZG,KAAK,GAAG,SAAS;EACnB;EACA,IAAIH,CAAC,KAAK,EAAE,EAAE;IACZG,KAAK,GAAG,eAAe;EACzB;EAEA,IAAIA,KAAK,CAACC,IAAI,CAACjC,KAAK,CAAC,EAAE;IACrB,OAAON,OAAO;EAChB;EAEA,OAAOwC,QAAQ,CAAClC,KAAK,EAAE6B,CAAC,CAAC;AAC3B;AAEA,SAASM,SAASA,CAACnC,KAAK,EAAE;EACxB,MAAMoC,KAAK,GAAGpC,KAAK,CAACqC,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAID,KAAK,CAACA,KAAK,CAACtC,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;IAClC,IAAIsC,KAAK,CAACtC,MAAM,GAAG,CAAC,EAAE;MACpBsC,KAAK,CAACE,GAAG,EAAE;IACb;EACF;EAEA,IAAIF,KAAK,CAACtC,MAAM,GAAG,CAAC,EAAE;IACpB,OAAOE,KAAK;EACd;EAEA,MAAMuC,OAAO,GAAG,EAAE;EAClB,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;IACxB,IAAII,IAAI,KAAK,EAAE,EAAE;MACf,OAAOxC,KAAK;IACd;IACA,MAAMyC,CAAC,GAAGb,eAAe,CAACY,IAAI,CAAC;IAC/B,IAAIC,CAAC,KAAK/C,OAAO,EAAE;MACjB,OAAOM,KAAK;IACd;IAEAuC,OAAO,CAACG,IAAI,CAACD,CAAC,CAAC;EACjB;EAEA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACzC,MAAM,GAAG,CAAC,EAAE,EAAE6C,CAAC,EAAE;IAC3C,IAAIJ,OAAO,CAACI,CAAC,CAAC,GAAG,GAAG,EAAE;MACpB,OAAOjD,OAAO;IAChB;EACF;EACA,IAAI6C,OAAO,CAACA,OAAO,CAACzC,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,GAAGyC,OAAO,CAACzC,MAAM,CAAC,EAAE;IAC9D,OAAOJ,OAAO;EAChB;EAEA,IAAIkD,IAAI,GAAGL,OAAO,CAACD,GAAG,EAAE;EACxB,IAAIO,OAAO,GAAG,CAAC;EAEf,KAAK,MAAMJ,CAAC,IAAIF,OAAO,EAAE;IACvBK,IAAI,IAAIH,CAAC,GAAG,GAAG,KAAK,CAAC,GAAGI,OAAO,CAAC;IAChC,EAAEA,OAAO;EACX;EAEA,OAAOD,IAAI;AACb;AAEA,SAASE,aAAaA,CAACC,OAAO,EAAE;EAC9B,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIP,CAAC,GAAGM,OAAO;EAEf,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;IAC3BK,MAAM,GAAG3C,MAAM,CAACoC,CAAC,GAAG,GAAG,CAAC,GAAGO,MAAM;IACjC,IAAIL,CAAC,KAAK,CAAC,EAAE;MACXK,MAAM,GAAI,IAAGA,MAAO,EAAC;IACvB;IACAP,CAAC,GAAGQ,IAAI,CAACC,KAAK,CAACT,CAAC,GAAG,GAAG,CAAC;EACzB;EAEA,OAAOO,MAAM;AACf;AAEA,SAASG,SAASA,CAACnD,KAAK,EAAE;EACxB,MAAM+C,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxC,IAAIK,UAAU,GAAG,CAAC;EAClB,IAAIC,QAAQ,GAAG,IAAI;EACnB,IAAIC,OAAO,GAAG,CAAC;EAEftD,KAAK,GAAG3B,QAAQ,CAACkF,IAAI,CAACC,MAAM,CAACxD,KAAK,CAAC;EAEnC,IAAIA,KAAK,CAACsD,OAAO,CAAC,KAAK,EAAE,EAAE;IACzB,IAAItD,KAAK,CAACsD,OAAO,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;MAC7B,OAAO5D,OAAO;IAChB;IAEA4D,OAAO,IAAI,CAAC;IACZ,EAAEF,UAAU;IACZC,QAAQ,GAAGD,UAAU;EACvB;EAEA,OAAOE,OAAO,GAAGtD,KAAK,CAACF,MAAM,EAAE;IAC7B,IAAIsD,UAAU,KAAK,CAAC,EAAE;MACpB,OAAO1D,OAAO;IAChB;IAEA,IAAIM,KAAK,CAACsD,OAAO,CAAC,KAAK,EAAE,EAAE;MACzB,IAAID,QAAQ,KAAK,IAAI,EAAE;QACrB,OAAO3D,OAAO;MAChB;MACA,EAAE4D,OAAO;MACT,EAAEF,UAAU;MACZC,QAAQ,GAAGD,UAAU;MACrB;IACF;IAEA,IAAIK,KAAK,GAAG,CAAC;IACb,IAAI3D,MAAM,GAAG,CAAC;IAEd,OAAOA,MAAM,GAAG,CAAC,IAAItB,KAAK,CAACkF,UAAU,CAAC1D,KAAK,CAACsD,OAAO,CAAC,CAAC,EAAE;MACrDG,KAAK,GAAGA,KAAK,GAAG,IAAI,GAAGvB,QAAQ,CAACnC,EAAE,CAACC,KAAK,EAAEsD,OAAO,CAAC,EAAE,EAAE,CAAC;MACvD,EAAEA,OAAO;MACT,EAAExD,MAAM;IACV;IAEA,IAAIE,KAAK,CAACsD,OAAO,CAAC,KAAK,EAAE,EAAE;MACzB,IAAIxD,MAAM,KAAK,CAAC,EAAE;QAChB,OAAOJ,OAAO;MAChB;MAEA4D,OAAO,IAAIxD,MAAM;MAEjB,IAAIsD,UAAU,GAAG,CAAC,EAAE;QAClB,OAAO1D,OAAO;MAChB;MAEA,IAAIiE,WAAW,GAAG,CAAC;MAEnB,OAAO3D,KAAK,CAACsD,OAAO,CAAC,KAAKlD,SAAS,EAAE;QACnC,IAAIwD,SAAS,GAAG,IAAI;QAEpB,IAAID,WAAW,GAAG,CAAC,EAAE;UACnB,IAAI3D,KAAK,CAACsD,OAAO,CAAC,KAAK,EAAE,IAAIK,WAAW,GAAG,CAAC,EAAE;YAC5C,EAAEL,OAAO;UACX,CAAC,MAAM;YACL,OAAO5D,OAAO;UAChB;QACF;QAEA,IAAI,CAAClB,KAAK,CAACqF,YAAY,CAAC7D,KAAK,CAACsD,OAAO,CAAC,CAAC,EAAE;UACvC,OAAO5D,OAAO;QAChB;QAEA,OAAOlB,KAAK,CAACqF,YAAY,CAAC7D,KAAK,CAACsD,OAAO,CAAC,CAAC,EAAE;UACzC,MAAMQ,MAAM,GAAG5B,QAAQ,CAACnC,EAAE,CAACC,KAAK,EAAEsD,OAAO,CAAC,CAAC;UAC3C,IAAIM,SAAS,KAAK,IAAI,EAAE;YACtBA,SAAS,GAAGE,MAAM;UACpB,CAAC,MAAM,IAAIF,SAAS,KAAK,CAAC,EAAE;YAC1B,OAAOlE,OAAO;UAChB,CAAC,MAAM;YACLkE,SAAS,GAAGA,SAAS,GAAG,EAAE,GAAGE,MAAM;UACrC;UACA,IAAIF,SAAS,GAAG,GAAG,EAAE;YACnB,OAAOlE,OAAO;UAChB;UACA,EAAE4D,OAAO;QACX;QAEAP,OAAO,CAACK,UAAU,CAAC,GAAGL,OAAO,CAACK,UAAU,CAAC,GAAG,KAAK,GAAGQ,SAAS;QAE7D,EAAED,WAAW;QAEb,IAAIA,WAAW,KAAK,CAAC,IAAIA,WAAW,KAAK,CAAC,EAAE;UAC1C,EAAEP,UAAU;QACd;MACF;MAEA,IAAIO,WAAW,KAAK,CAAC,EAAE;QACrB,OAAOjE,OAAO;MAChB;MAEA;IACF,CAAC,MAAM,IAAIM,KAAK,CAACsD,OAAO,CAAC,KAAK,EAAE,EAAE;MAChC,EAAEA,OAAO;MACT,IAAItD,KAAK,CAACsD,OAAO,CAAC,KAAKlD,SAAS,EAAE;QAChC,OAAOV,OAAO;MAChB;IACF,CAAC,MAAM,IAAIM,KAAK,CAACsD,OAAO,CAAC,KAAKlD,SAAS,EAAE;MACvC,OAAOV,OAAO;IAChB;IAEAqD,OAAO,CAACK,UAAU,CAAC,GAAGK,KAAK;IAC3B,EAAEL,UAAU;EACd;EAEA,IAAIC,QAAQ,KAAK,IAAI,EAAE;IACrB,IAAIU,KAAK,GAAGX,UAAU,GAAGC,QAAQ;IACjCD,UAAU,GAAG,CAAC;IACd,OAAOA,UAAU,KAAK,CAAC,IAAIW,KAAK,GAAG,CAAC,EAAE;MACpC,MAAMC,IAAI,GAAGjB,OAAO,CAACM,QAAQ,GAAGU,KAAK,GAAG,CAAC,CAAC;MAC1ChB,OAAO,CAACM,QAAQ,GAAGU,KAAK,GAAG,CAAC,CAAC,GAAGhB,OAAO,CAACK,UAAU,CAAC;MACnDL,OAAO,CAACK,UAAU,CAAC,GAAGY,IAAI;MAC1B,EAAEZ,UAAU;MACZ,EAAEW,KAAK;IACT;EACF,CAAC,MAAM,IAAIV,QAAQ,KAAK,IAAI,IAAID,UAAU,KAAK,CAAC,EAAE;IAChD,OAAO1D,OAAO;EAChB;EAEA,OAAOqD,OAAO;AAChB;AAEA,SAASkB,aAAaA,CAAClB,OAAO,EAAE;EAC9B,IAAIC,MAAM,GAAG,EAAE;EACf,MAAMK,QAAQ,GAAGa,uBAAuB,CAACnB,OAAO,CAAC;EACjD,IAAIoB,OAAO,GAAG,KAAK;EAEnB,KAAK,IAAIf,UAAU,GAAG,CAAC,EAAEA,UAAU,IAAI,CAAC,EAAE,EAAEA,UAAU,EAAE;IACtD,IAAIe,OAAO,IAAIpB,OAAO,CAACK,UAAU,CAAC,KAAK,CAAC,EAAE;MACxC;IACF,CAAC,MAAM,IAAIe,OAAO,EAAE;MAClBA,OAAO,GAAG,KAAK;IACjB;IAEA,IAAId,QAAQ,KAAKD,UAAU,EAAE;MAC3B,MAAMgB,SAAS,GAAGhB,UAAU,KAAK,CAAC,GAAG,IAAI,GAAG,GAAG;MAC/CJ,MAAM,IAAIoB,SAAS;MACnBD,OAAO,GAAG,IAAI;MACd;IACF;IAEAnB,MAAM,IAAID,OAAO,CAACK,UAAU,CAAC,CAACiB,QAAQ,CAAC,EAAE,CAAC;IAE1C,IAAIjB,UAAU,KAAK,CAAC,EAAE;MACpBJ,MAAM,IAAI,GAAG;IACf;EACF;EAEA,OAAOA,MAAM;AACf;AAEA,SAASsB,SAASA,CAACtE,KAAK,EAA2B;EAAA,IAAzBuE,eAAe,GAAAC,SAAA,CAAA1E,MAAA,QAAA0E,SAAA,QAAApE,SAAA,GAAAoE,SAAA,MAAG,KAAK;EAC/C,IAAIxE,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACpB,IAAIA,KAAK,CAACA,KAAK,CAACF,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;MACnC,OAAOJ,OAAO;IAChB;IAEA,OAAOyD,SAAS,CAACnD,KAAK,CAAC+B,SAAS,CAAC,CAAC,EAAE/B,KAAK,CAACF,MAAM,GAAG,CAAC,CAAC,CAAC;EACxD;EAEA,IAAIyE,eAAe,EAAE;IACnB,OAAOE,eAAe,CAACzE,KAAK,CAAC;EAC/B;EAEA,MAAM0E,MAAM,GAAGjG,oBAAoB,CAACC,mBAAmB,CAACsB,KAAK,CAAC,CAAC;EAC/D,MAAM2E,WAAW,GAAGC,aAAa,CAACF,MAAM,CAAC;EACzC,IAAIC,WAAW,KAAKjF,OAAO,EAAE;IAC3B,OAAOA,OAAO;EAChB;EAEA,IAAIyB,8BAA8B,CAACwD,WAAW,CAAC,EAAE;IAC/C,OAAOjF,OAAO;EAChB;EAEA,MAAMmF,QAAQ,GAAG1C,SAAS,CAACwC,WAAW,CAAC;EACvC,IAAI,OAAOE,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAKnF,OAAO,EAAE;IACxD,OAAOmF,QAAQ;EACjB;EAEA,OAAOF,WAAW;AACpB;AAEA,SAASF,eAAeA,CAACzE,KAAK,EAAE;EAC9B,IAAIqB,8CAA8C,CAACrB,KAAK,CAAC,EAAE;IACzD,OAAON,OAAO;EAChB;EAEA,OAAOd,uBAAuB,CAACoB,KAAK,EAAEnB,wBAAwB,CAAC;AACjE;AAEA,SAASqF,uBAAuBA,CAACY,GAAG,EAAE;EACpC,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAIC,MAAM,GAAG,CAAC,CAAC,CAAC;EAChB,IAAIC,SAAS,GAAG,IAAI;EACpB,IAAIC,OAAO,GAAG,CAAC;EAEf,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmC,GAAG,CAAChF,MAAM,EAAE,EAAE6C,CAAC,EAAE;IACnC,IAAImC,GAAG,CAACnC,CAAC,CAAC,KAAK,CAAC,EAAE;MAChB,IAAIuC,OAAO,GAAGF,MAAM,EAAE;QACpBD,MAAM,GAAGE,SAAS;QAClBD,MAAM,GAAGE,OAAO;MAClB;MAEAD,SAAS,GAAG,IAAI;MAChBC,OAAO,GAAG,CAAC;IACb,CAAC,MAAM;MACL,IAAID,SAAS,KAAK,IAAI,EAAE;QACtBA,SAAS,GAAGtC,CAAC;MACf;MACA,EAAEuC,OAAO;IACX;EACF;;EAEA;EACA,IAAIA,OAAO,GAAGF,MAAM,EAAE;IACpB,OAAOC,SAAS;EAClB;EAEA,OAAOF,MAAM;AACf;AAEA,SAASI,aAAaA,CAACC,IAAI,EAAE;EAC3B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOtC,aAAa,CAACsC,IAAI,CAAC;EAC5B;;EAEA;EACA,IAAIA,IAAI,YAAYC,KAAK,EAAE;IACzB,OAAQ,IAAGpB,aAAa,CAACmB,IAAI,CAAE,GAAE;EACnC;EAEA,OAAOA,IAAI;AACb;AAEA,SAASR,aAAaA,CAACF,MAAM,EAAoB;EAAA,IAAlBY,QAAQ,GAAAd,SAAA,CAAA1E,MAAA,QAAA0E,SAAA,QAAApE,SAAA,GAAAoE,SAAA,MAAG,KAAK;EAC7C,MAAMe,MAAM,GAAGhH,IAAI,CAACiH,OAAO,CAACd,MAAM,EAAE;IAClCe,SAAS,EAAE,IAAI;IACfC,YAAY,EAAE,KAAK;IACnBC,YAAY,EAAE,IAAI;IAClBC,iBAAiB,EAAEN,QAAQ;IAC3BO,eAAe,EAAEP;EACnB,CAAC,CAAC;EACF,IAAIC,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,EAAE,EAAE;IACpC,OAAO7F,OAAO;EAChB;EACA,OAAO6F,MAAM;AACf;AAEA,SAASO,gBAAgBA,CAACrE,GAAG,EAAE;EAC7B,OAAOA,GAAG,CAACsE,OAAO,CAAC,mDAAmD,EAAE,EAAE,CAAC;AAC7E;AAEA,SAASC,iBAAiBA,CAACvE,GAAG,EAAE;EAC9B,OAAOA,GAAG,CAACsE,OAAO,CAAC,wBAAwB,EAAE,EAAE,CAAC;AAClD;AAEA,SAASE,WAAWA,CAACxE,GAAG,EAAE;EACxB,MAAM;IAAEyE;EAAK,CAAC,GAAGzE,GAAG;EACpB,IAAIyE,IAAI,CAACpG,MAAM,KAAK,CAAC,EAAE;IACrB;EACF;EACA,IAAI2B,GAAG,CAACF,MAAM,KAAK,MAAM,IAAI2E,IAAI,CAACpG,MAAM,KAAK,CAAC,IAAIqG,8BAA8B,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACzF;EACF;EAEAA,IAAI,CAAC5D,GAAG,EAAE;AACZ;AAEA,SAAS8D,mBAAmBA,CAAC3E,GAAG,EAAE;EAChC,OAAOA,GAAG,CAAC4E,QAAQ,KAAK,EAAE,IAAI5E,GAAG,CAAC6E,QAAQ,KAAK,EAAE;AACnD;AAEA,SAASC,+BAA+BA,CAAC9E,GAAG,EAAE;EAC5C,OAAOA,GAAG,CAAC2D,IAAI,KAAK,IAAI,IAAI3D,GAAG,CAAC2D,IAAI,KAAK,EAAE,IAAI3D,GAAG,CAAC+E,gBAAgB,IAAI/E,GAAG,CAACF,MAAM,KAAK,MAAM;AAC9F;AAEA,SAAS4E,8BAA8BA,CAACnF,MAAM,EAAE;EAC9C,OAAO,cAAc,CAACiB,IAAI,CAACjB,MAAM,CAAC;AACpC;AAEA,SAASyF,eAAeA,CAACzG,KAAK,EAAE0G,IAAI,EAAEC,gBAAgB,EAAElF,GAAG,EAAEmF,aAAa,EAAE;EAC1E,IAAI,CAACtD,OAAO,GAAG,CAAC;EAChB,IAAI,CAACtD,KAAK,GAAGA,KAAK;EAClB,IAAI,CAAC0G,IAAI,GAAGA,IAAI,IAAI,IAAI;EACxB,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB,IAAI,OAAO;EACnD,IAAI,CAACC,aAAa,GAAGA,aAAa;EAClC,IAAI,CAACnF,GAAG,GAAGA,GAAG;EACd,IAAI,CAAC/B,OAAO,GAAG,KAAK;EACpB,IAAI,CAACmH,UAAU,GAAG,KAAK;EAEvB,IAAI,CAAC,IAAI,CAACpF,GAAG,EAAE;IACb,IAAI,CAACA,GAAG,GAAG;MACTF,MAAM,EAAE,EAAE;MACV8E,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZlB,IAAI,EAAE,IAAI;MACV0B,IAAI,EAAE,IAAI;MACVZ,IAAI,EAAE,EAAE;MACRa,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE,IAAI;MAEdR,gBAAgB,EAAE;IACpB,CAAC;IAED,MAAMS,GAAG,GAAGnB,gBAAgB,CAAC,IAAI,CAAC9F,KAAK,CAAC;IACxC,IAAIiH,GAAG,KAAK,IAAI,CAACjH,KAAK,EAAE;MACtB,IAAI,CAAC6G,UAAU,GAAG,IAAI;IACxB;IACA,IAAI,CAAC7G,KAAK,GAAGiH,GAAG;EAClB;EAEA,MAAMA,GAAG,GAAGjB,iBAAiB,CAAC,IAAI,CAAChG,KAAK,CAAC;EACzC,IAAIiH,GAAG,KAAK,IAAI,CAACjH,KAAK,EAAE;IACtB,IAAI,CAAC6G,UAAU,GAAG,IAAI;EACxB;EACA,IAAI,CAAC7G,KAAK,GAAGiH,GAAG;EAEhB,IAAI,CAACC,KAAK,GAAGN,aAAa,IAAI,cAAc;EAE5C,IAAI,CAACpG,MAAM,GAAG,EAAE;EAChB,IAAI,CAAC2G,MAAM,GAAG,KAAK;EACnB,IAAI,CAACC,OAAO,GAAG,KAAK;EACpB,IAAI,CAACC,qBAAqB,GAAG,KAAK;EAElC,IAAI,CAACrH,KAAK,GAAG3B,QAAQ,CAACkF,IAAI,CAACC,MAAM,CAAC,IAAI,CAACxD,KAAK,CAAC;EAE7C,OAAO,IAAI,CAACsD,OAAO,IAAI,IAAI,CAACtD,KAAK,CAACF,MAAM,EAAE,EAAE,IAAI,CAACwD,OAAO,EAAE;IACxD,MAAMpD,CAAC,GAAG,IAAI,CAACF,KAAK,CAAC,IAAI,CAACsD,OAAO,CAAC;IAClC,MAAMgE,IAAI,GAAGnH,KAAK,CAACD,CAAC,CAAC,GAAGE,SAAS,GAAGC,MAAM,CAACC,aAAa,CAACJ,CAAC,CAAC;;IAE3D;IACA,MAAMqH,GAAG,GAAG,IAAI,CAAE,SAAQ,IAAI,CAACL,KAAM,EAAC,CAAC,CAAChH,CAAC,EAAEoH,IAAI,CAAC;IAChD,IAAI,CAACC,GAAG,EAAE;MACR,MAAM,CAAC;IACT,CAAC,MAAM,IAAIA,GAAG,KAAK7H,OAAO,EAAE;MAC1B,IAAI,CAACA,OAAO,GAAG,IAAI;MACnB;IACF;EACF;AACF;AAEA+G,eAAe,CAACe,SAAS,CAAC,oBAAoB,CAAC,GAAG,SAASC,gBAAgBA,CAACvH,CAAC,EAAEoH,IAAI,EAAE;EACnF,IAAI9I,KAAK,CAACsC,YAAY,CAACZ,CAAC,CAAC,EAAE;IACzB,IAAI,CAACM,MAAM,IAAI8G,IAAI,CAAC7G,WAAW,EAAE;IACjC,IAAI,CAACyG,KAAK,GAAG,QAAQ;EACvB,CAAC,MAAM,IAAI,CAAC,IAAI,CAACN,aAAa,EAAE;IAC9B,IAAI,CAACM,KAAK,GAAG,WAAW;IACxB,EAAE,IAAI,CAAC5D,OAAO;EAChB,CAAC,MAAM;IACL,IAAI,CAACuD,UAAU,GAAG,IAAI;IACtB,OAAOnH,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAED+G,eAAe,CAACe,SAAS,CAAC,cAAc,CAAC,GAAG,SAASE,WAAWA,CAACxH,CAAC,EAAEoH,IAAI,EAAE;EACxE,IAAI9I,KAAK,CAACmJ,mBAAmB,CAACzH,CAAC,CAAC,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,EAAE;IACpE,IAAI,CAACM,MAAM,IAAI8G,IAAI,CAAC7G,WAAW,EAAE;EACnC,CAAC,MAAM,IAAIP,CAAC,KAAK,EAAE,EAAE;IACnB,IAAI,IAAI,CAAC0G,aAAa,EAAE;MACtB,IAAIpF,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACH,eAAe,CAAC,IAAI,CAACd,MAAM,CAAC,EAAE;QACxD,OAAO,KAAK;MACd;MAEA,IAAI,CAACgB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAIH,eAAe,CAAC,IAAI,CAACd,MAAM,CAAC,EAAE;QACxD,OAAO,KAAK;MACd;MAEA,IAAI,CAAC4F,mBAAmB,CAAC,IAAI,CAAC3E,GAAG,CAAC,IAAI,IAAI,CAACA,GAAG,CAACqF,IAAI,KAAK,IAAI,KAAK,IAAI,CAACtG,MAAM,KAAK,MAAM,EAAE;QACvF,OAAO,KAAK;MACd;MAEA,IAAI,IAAI,CAACiB,GAAG,CAACF,MAAM,KAAK,MAAM,IAAI,IAAI,CAACE,GAAG,CAAC2D,IAAI,KAAK,EAAE,EAAE;QACtD,OAAO,KAAK;MACd;IACF;IACA,IAAI,CAAC3D,GAAG,CAACF,MAAM,GAAG,IAAI,CAACf,MAAM;IAC7B,IAAI,IAAI,CAACoG,aAAa,EAAE;MACtB,IAAI,IAAI,CAACnF,GAAG,CAACqF,IAAI,KAAKnF,WAAW,CAAC,IAAI,CAACF,GAAG,CAACF,MAAM,CAAC,EAAE;QAClD,IAAI,CAACE,GAAG,CAACqF,IAAI,GAAG,IAAI;MACtB;MACA,OAAO,KAAK;IACd;IACA,IAAI,CAACtG,MAAM,GAAG,EAAE;IAChB,IAAI,IAAI,CAACiB,GAAG,CAACF,MAAM,KAAK,MAAM,EAAE;MAC9B,IAAI,IAAI,CAACvB,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,IAAI,CAACtD,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QAC9E,IAAI,CAACuD,UAAU,GAAG,IAAI;MACxB;MACA,IAAI,CAACK,KAAK,GAAG,MAAM;IACrB,CAAC,MAAM,IAAI1F,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAI,IAAI,CAACiF,IAAI,KAAK,IAAI,IAAI,IAAI,CAACA,IAAI,CAACnF,MAAM,KAAK,IAAI,CAACE,GAAG,CAACF,MAAM,EAAE;MAC5F,IAAI,CAAC2F,KAAK,GAAG,+BAA+B;IAC9C,CAAC,MAAM,IAAI1F,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,EAAE;MAC9B,IAAI,CAACyF,KAAK,GAAG,2BAA2B;IAC1C,CAAC,MAAM,IAAI,IAAI,CAAClH,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;MAC9C,IAAI,CAAC4D,KAAK,GAAG,mBAAmB;MAChC,EAAE,IAAI,CAAC5D,OAAO;IAChB,CAAC,MAAM;MACL,IAAI,CAAC7B,GAAG,CAAC+E,gBAAgB,GAAG,IAAI;MAChC,IAAI,CAAC/E,GAAG,CAACyE,IAAI,CAACxD,IAAI,CAAC,EAAE,CAAC;MACtB,IAAI,CAACwE,KAAK,GAAG,2BAA2B;IAC1C;EACF,CAAC,MAAM,IAAI,CAAC,IAAI,CAACN,aAAa,EAAE;IAC9B,IAAI,CAACpG,MAAM,GAAG,EAAE;IAChB,IAAI,CAAC0G,KAAK,GAAG,WAAW;IACxB,IAAI,CAAC5D,OAAO,GAAG,CAAC,CAAC;EACnB,CAAC,MAAM;IACL,IAAI,CAACuD,UAAU,GAAG,IAAI;IACtB,OAAOnH,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAED+G,eAAe,CAACe,SAAS,CAAC,iBAAiB,CAAC,GAAG,SAASI,aAAaA,CAAC1H,CAAC,EAAE;EACvE,IAAI,IAAI,CAACwG,IAAI,KAAK,IAAI,IAAK,IAAI,CAACA,IAAI,CAACF,gBAAgB,IAAItG,CAAC,KAAK,EAAG,EAAE;IAClE,OAAOR,OAAO;EAChB,CAAC,MAAM,IAAI,IAAI,CAACgH,IAAI,CAACF,gBAAgB,IAAItG,CAAC,KAAK,EAAE,EAAE;IACjD,IAAI,CAACuB,GAAG,CAACF,MAAM,GAAG,IAAI,CAACmF,IAAI,CAACnF,MAAM;IAClC,IAAI,CAACE,GAAG,CAACyE,IAAI,GAAG,IAAI,CAACQ,IAAI,CAACR,IAAI,CAAC2B,KAAK,EAAE;IACtC,IAAI,CAACpG,GAAG,CAACsF,KAAK,GAAG,IAAI,CAACL,IAAI,CAACK,KAAK;IAChC,IAAI,CAACtF,GAAG,CAACuF,QAAQ,GAAG,EAAE;IACtB,IAAI,CAACvF,GAAG,CAAC+E,gBAAgB,GAAG,IAAI;IAChC,IAAI,CAACU,KAAK,GAAG,UAAU;EACzB,CAAC,MAAM,IAAI,IAAI,CAACR,IAAI,CAACnF,MAAM,KAAK,MAAM,EAAE;IACtC,IAAI,CAAC2F,KAAK,GAAG,MAAM;IACnB,EAAE,IAAI,CAAC5D,OAAO;EAChB,CAAC,MAAM;IACL,IAAI,CAAC4D,KAAK,GAAG,UAAU;IACvB,EAAE,IAAI,CAAC5D,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDmD,eAAe,CAACe,SAAS,CAAC,qCAAqC,CAAC,GAAG,SAASM,+BAA+BA,CAAC5H,CAAC,EAAE;EAC7G,IAAIA,CAAC,KAAK,EAAE,IAAI,IAAI,CAACF,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;IACnD,IAAI,CAAC4D,KAAK,GAAG,kCAAkC;IAC/C,EAAE,IAAI,CAAC5D,OAAO;EAChB,CAAC,MAAM;IACL,IAAI,CAACuD,UAAU,GAAG,IAAI;IACtB,IAAI,CAACK,KAAK,GAAG,UAAU;IACvB,EAAE,IAAI,CAAC5D,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDmD,eAAe,CAACe,SAAS,CAAC,yBAAyB,CAAC,GAAG,SAASO,oBAAoBA,CAAC7H,CAAC,EAAE;EACtF,IAAIA,CAAC,KAAK,EAAE,EAAE;IACZ,IAAI,CAACgH,KAAK,GAAG,WAAW;EAC1B,CAAC,MAAM;IACL,IAAI,CAACA,KAAK,GAAG,MAAM;IACnB,EAAE,IAAI,CAAC5D,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDmD,eAAe,CAACe,SAAS,CAAC,gBAAgB,CAAC,GAAG,SAASQ,aAAaA,CAAC9H,CAAC,EAAE;EACtE,IAAI,CAACuB,GAAG,CAACF,MAAM,GAAG,IAAI,CAACmF,IAAI,CAACnF,MAAM;EAClC,IAAIrB,CAAC,KAAK,EAAE,EAAE;IACZ,IAAI,CAACgH,KAAK,GAAG,gBAAgB;EAC/B,CAAC,MAAM,IAAI1F,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAIvB,CAAC,KAAK,EAAE,EAAE;IAC1C,IAAI,CAAC2G,UAAU,GAAG,IAAI;IACtB,IAAI,CAACK,KAAK,GAAG,gBAAgB;EAC/B,CAAC,MAAM;IACL,IAAI,CAACzF,GAAG,CAAC4E,QAAQ,GAAG,IAAI,CAACK,IAAI,CAACL,QAAQ;IACtC,IAAI,CAAC5E,GAAG,CAAC6E,QAAQ,GAAG,IAAI,CAACI,IAAI,CAACJ,QAAQ;IACtC,IAAI,CAAC7E,GAAG,CAAC2D,IAAI,GAAG,IAAI,CAACsB,IAAI,CAACtB,IAAI;IAC9B,IAAI,CAAC3D,GAAG,CAACqF,IAAI,GAAG,IAAI,CAACJ,IAAI,CAACI,IAAI;IAC9B,IAAI,CAACrF,GAAG,CAACyE,IAAI,GAAG,IAAI,CAACQ,IAAI,CAACR,IAAI,CAAC2B,KAAK,EAAE;IACtC,IAAI,CAACpG,GAAG,CAACsF,KAAK,GAAG,IAAI,CAACL,IAAI,CAACK,KAAK;IAChC,IAAI7G,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAACuB,GAAG,CAACsF,KAAK,GAAG,EAAE;MACnB,IAAI,CAACG,KAAK,GAAG,OAAO;IACtB,CAAC,MAAM,IAAIhH,CAAC,KAAK,EAAE,EAAE;MACnB,IAAI,CAACuB,GAAG,CAACuF,QAAQ,GAAG,EAAE;MACtB,IAAI,CAACE,KAAK,GAAG,UAAU;IACzB,CAAC,MAAM,IAAI,CAAC/G,KAAK,CAACD,CAAC,CAAC,EAAE;MACpB,IAAI,CAACuB,GAAG,CAACsF,KAAK,GAAG,IAAI;MACrB,IAAI,CAACtF,GAAG,CAACyE,IAAI,CAAC5D,GAAG,EAAE;MACnB,IAAI,CAAC4E,KAAK,GAAG,MAAM;MACnB,EAAE,IAAI,CAAC5D,OAAO;IAChB;EACF;EAEA,OAAO,IAAI;AACb,CAAC;AAEDmD,eAAe,CAACe,SAAS,CAAC,sBAAsB,CAAC,GAAG,SAASS,kBAAkBA,CAAC/H,CAAC,EAAE;EACjF,IAAIsB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,KAAKvB,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,CAAC,EAAE;IACjD,IAAIA,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAAC2G,UAAU,GAAG,IAAI;IACxB;IACA,IAAI,CAACK,KAAK,GAAG,kCAAkC;EACjD,CAAC,MAAM,IAAIhH,CAAC,KAAK,EAAE,EAAE;IACnB,IAAI,CAACgH,KAAK,GAAG,WAAW;EAC1B,CAAC,MAAM;IACL,IAAI,CAACzF,GAAG,CAAC4E,QAAQ,GAAG,IAAI,CAACK,IAAI,CAACL,QAAQ;IACtC,IAAI,CAAC5E,GAAG,CAAC6E,QAAQ,GAAG,IAAI,CAACI,IAAI,CAACJ,QAAQ;IACtC,IAAI,CAAC7E,GAAG,CAAC2D,IAAI,GAAG,IAAI,CAACsB,IAAI,CAACtB,IAAI;IAC9B,IAAI,CAAC3D,GAAG,CAACqF,IAAI,GAAG,IAAI,CAACJ,IAAI,CAACI,IAAI;IAC9B,IAAI,CAACI,KAAK,GAAG,MAAM;IACnB,EAAE,IAAI,CAAC5D,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDmD,eAAe,CAACe,SAAS,CAAC,iCAAiC,CAAC,GAAG,SAASU,4BAA4BA,CAAChI,CAAC,EAAE;EACtG,IAAIA,CAAC,KAAK,EAAE,IAAI,IAAI,CAACF,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;IACnD,IAAI,CAAC4D,KAAK,GAAG,kCAAkC;IAC/C,EAAE,IAAI,CAAC5D,OAAO;EAChB,CAAC,MAAM;IACL,IAAI,CAACuD,UAAU,GAAG,IAAI;IACtB,IAAI,CAACK,KAAK,GAAG,kCAAkC;IAC/C,EAAE,IAAI,CAAC5D,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDmD,eAAe,CAACe,SAAS,CAAC,wCAAwC,CAAC,GAAG,SAASW,kCAAkCA,CAACjI,CAAC,EAAE;EACnH,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,EAAE;IACxB,IAAI,CAACgH,KAAK,GAAG,WAAW;IACxB,EAAE,IAAI,CAAC5D,OAAO;EAChB,CAAC,MAAM;IACL,IAAI,CAACuD,UAAU,GAAG,IAAI;EACxB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDJ,eAAe,CAACe,SAAS,CAAC,iBAAiB,CAAC,GAAG,SAASY,cAAcA,CAAClI,CAAC,EAAEoH,IAAI,EAAE;EAC9E,IAAIpH,CAAC,KAAK,EAAE,EAAE;IACZ,IAAI,CAAC2G,UAAU,GAAG,IAAI;IACtB,IAAI,IAAI,CAACM,MAAM,EAAE;MACf,IAAI,CAAC3G,MAAM,GAAI,MAAK,IAAI,CAACA,MAAO,EAAC;IACnC;IACA,IAAI,CAAC2G,MAAM,GAAG,IAAI;;IAElB;IACA,MAAMkB,GAAG,GAAGzI,YAAY,CAAC,IAAI,CAACY,MAAM,CAAC;IACrC,KAAK,IAAI8C,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG+E,GAAG,EAAE,EAAE/E,OAAO,EAAE;MAC9C,MAAMgF,SAAS,GAAG,IAAI,CAAC9H,MAAM,CAACS,WAAW,CAACqC,OAAO,CAAC;MAElD,IAAIgF,SAAS,KAAK,EAAE,IAAI,CAAC,IAAI,CAACjB,qBAAqB,EAAE;QACnD,IAAI,CAACA,qBAAqB,GAAG,IAAI;QACjC;MACF;MACA,MAAMkB,iBAAiB,GAAG5J,0BAA0B,CAAC2J,SAAS,EAAEpJ,uBAAuB,CAAC;MACxF,IAAI,IAAI,CAACmI,qBAAqB,EAAE;QAC9B,IAAI,CAAC5F,GAAG,CAAC6E,QAAQ,IAAIiC,iBAAiB;MACxC,CAAC,MAAM;QACL,IAAI,CAAC9G,GAAG,CAAC4E,QAAQ,IAAIkC,iBAAiB;MACxC;IACF;IACA,IAAI,CAAC/H,MAAM,GAAG,EAAE;EAClB,CAAC,MAAM,IAAIL,KAAK,CAACD,CAAC,CAAC,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,IAC3CsB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAIvB,CAAC,KAAK,EAAG,EAAE;IAC5C,IAAI,IAAI,CAACiH,MAAM,IAAI,IAAI,CAAC3G,MAAM,KAAK,EAAE,EAAE;MACrC,IAAI,CAACqG,UAAU,GAAG,IAAI;MACtB,OAAOnH,OAAO;IAChB;IACA,IAAI,CAAC4D,OAAO,IAAI1D,YAAY,CAAC,IAAI,CAACY,MAAM,CAAC,GAAG,CAAC;IAC7C,IAAI,CAACA,MAAM,GAAG,EAAE;IAChB,IAAI,CAAC0G,KAAK,GAAG,MAAM;EACrB,CAAC,MAAM;IACL,IAAI,CAAC1G,MAAM,IAAI8G,IAAI;EACrB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDb,eAAe,CAACe,SAAS,CAAC,gBAAgB,CAAC,GAC3Cf,eAAe,CAACe,SAAS,CAAC,YAAY,CAAC,GAAG,SAASgB,aAAaA,CAACtI,CAAC,EAAEoH,IAAI,EAAE;EACxE,IAAI,IAAI,CAACV,aAAa,IAAI,IAAI,CAACnF,GAAG,CAACF,MAAM,KAAK,MAAM,EAAE;IACpD,EAAE,IAAI,CAAC+B,OAAO;IACd,IAAI,CAAC4D,KAAK,GAAG,WAAW;EAC1B,CAAC,MAAM,IAAIhH,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAACkH,OAAO,EAAE;IACpC,IAAI,IAAI,CAAC5G,MAAM,KAAK,EAAE,EAAE;MACtB,IAAI,CAACqG,UAAU,GAAG,IAAI;MACtB,OAAOnH,OAAO;IAChB;IAEA,IAAI,IAAI,CAACkH,aAAa,KAAK,UAAU,EAAE;MACrC,OAAO,KAAK;IACd;IAEA,MAAMxB,IAAI,GAAGd,SAAS,CAAC,IAAI,CAAC9D,MAAM,EAAEkB,YAAY,CAAC,IAAI,CAACD,GAAG,CAAC,CAAC;IAC3D,IAAI2D,IAAI,KAAK1F,OAAO,EAAE;MACpB,OAAOA,OAAO;IAChB;IAEA,IAAI,CAAC+B,GAAG,CAAC2D,IAAI,GAAGA,IAAI;IACpB,IAAI,CAAC5E,MAAM,GAAG,EAAE;IAChB,IAAI,CAAC0G,KAAK,GAAG,MAAM;EACrB,CAAC,MAAM,IAAI/G,KAAK,CAACD,CAAC,CAAC,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,IAC3CsB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAIvB,CAAC,KAAK,EAAG,EAAE;IAC5C,EAAE,IAAI,CAACoD,OAAO;IACd,IAAI9B,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAI,IAAI,CAACjB,MAAM,KAAK,EAAE,EAAE;MAC7C,IAAI,CAACqG,UAAU,GAAG,IAAI;MACtB,OAAOnH,OAAO;IAChB,CAAC,MAAM,IAAI,IAAI,CAACkH,aAAa,IAAI,IAAI,CAACpG,MAAM,KAAK,EAAE,KACvC4F,mBAAmB,CAAC,IAAI,CAAC3E,GAAG,CAAC,IAAI,IAAI,CAACA,GAAG,CAACqF,IAAI,KAAK,IAAI,CAAC,EAAE;MACpE,IAAI,CAACD,UAAU,GAAG,IAAI;MACtB,OAAO,KAAK;IACd;IAEA,MAAMzB,IAAI,GAAGd,SAAS,CAAC,IAAI,CAAC9D,MAAM,EAAEkB,YAAY,CAAC,IAAI,CAACD,GAAG,CAAC,CAAC;IAC3D,IAAI2D,IAAI,KAAK1F,OAAO,EAAE;MACpB,OAAOA,OAAO;IAChB;IAEA,IAAI,CAAC+B,GAAG,CAAC2D,IAAI,GAAGA,IAAI;IACpB,IAAI,CAAC5E,MAAM,GAAG,EAAE;IAChB,IAAI,CAAC0G,KAAK,GAAG,YAAY;IACzB,IAAI,IAAI,CAACN,aAAa,EAAE;MACtB,OAAO,KAAK;IACd;EACF,CAAC,MAAM;IACL,IAAI1G,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAACkH,OAAO,GAAG,IAAI;IACrB,CAAC,MAAM,IAAIlH,CAAC,KAAK,EAAE,EAAE;MACnB,IAAI,CAACkH,OAAO,GAAG,KAAK;IACtB;IACA,IAAI,CAAC5G,MAAM,IAAI8G,IAAI;EACrB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDb,eAAe,CAACe,SAAS,CAAC,YAAY,CAAC,GAAG,SAASiB,SAASA,CAACvI,CAAC,EAAEoH,IAAI,EAAE;EACpE,IAAI9I,KAAK,CAACqF,YAAY,CAAC3D,CAAC,CAAC,EAAE;IACzB,IAAI,CAACM,MAAM,IAAI8G,IAAI;EACrB,CAAC,MAAM,IAAInH,KAAK,CAACD,CAAC,CAAC,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,IAC3CsB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAIvB,CAAC,KAAK,EAAG,IACjC,IAAI,CAAC0G,aAAa,EAAE;IAC7B,IAAI,IAAI,CAACpG,MAAM,KAAK,EAAE,EAAE;MACtB,MAAMsG,IAAI,GAAG5E,QAAQ,CAAC,IAAI,CAAC1B,MAAM,CAAC;MAClC,IAAIsG,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;QACtB,IAAI,CAACD,UAAU,GAAG,IAAI;QACtB,OAAOnH,OAAO;MAChB;MACA,IAAI,CAAC+B,GAAG,CAACqF,IAAI,GAAGA,IAAI,KAAKnF,WAAW,CAAC,IAAI,CAACF,GAAG,CAACF,MAAM,CAAC,GAAG,IAAI,GAAGuF,IAAI;MACnE,IAAI,CAACtG,MAAM,GAAG,EAAE;IAClB;IACA,IAAI,IAAI,CAACoG,aAAa,EAAE;MACtB,OAAO,KAAK;IACd;IACA,IAAI,CAACM,KAAK,GAAG,YAAY;IACzB,EAAE,IAAI,CAAC5D,OAAO;EAChB,CAAC,MAAM;IACL,IAAI,CAACuD,UAAU,GAAG,IAAI;IACtB,OAAOnH,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAED,MAAMgJ,uBAAuB,GAAG,IAAIC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAEzD,SAASC,4BAA4BA,CAAC5I,KAAK,EAAEsD,OAAO,EAAE;EACpD,MAAMxD,MAAM,GAAGE,KAAK,CAACF,MAAM,GAAGwD,OAAO;EACrC,OAAOxD,MAAM,IAAI,CAAC,IAChBa,8BAA8B,CAACX,KAAK,CAACsD,OAAO,CAAC,EAAEtD,KAAK,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,KACjExD,MAAM,KAAK,CAAC,IAAI4I,uBAAuB,CAACG,GAAG,CAAC7I,KAAK,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;AACrE;AAEAmD,eAAe,CAACe,SAAS,CAAC,YAAY,CAAC,GAAG,SAASsB,SAASA,CAAC5I,CAAC,EAAE;EAC9D,IAAI,CAACuB,GAAG,CAACF,MAAM,GAAG,MAAM;EACxB,IAAI,CAACE,GAAG,CAAC2D,IAAI,GAAG,EAAE;EAElB,IAAIlF,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,EAAE;IACxB,IAAIA,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAAC2G,UAAU,GAAG,IAAI;IACxB;IACA,IAAI,CAACK,KAAK,GAAG,YAAY;EAC3B,CAAC,MAAM,IAAI,IAAI,CAACR,IAAI,KAAK,IAAI,IAAI,IAAI,CAACA,IAAI,CAACnF,MAAM,KAAK,MAAM,EAAE;IAC5D,IAAI,CAACE,GAAG,CAAC2D,IAAI,GAAG,IAAI,CAACsB,IAAI,CAACtB,IAAI;IAC9B,IAAI,CAAC3D,GAAG,CAACyE,IAAI,GAAG,IAAI,CAACQ,IAAI,CAACR,IAAI,CAAC2B,KAAK,EAAE;IACtC,IAAI,CAACpG,GAAG,CAACsF,KAAK,GAAG,IAAI,CAACL,IAAI,CAACK,KAAK;IAChC,IAAI7G,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAACuB,GAAG,CAACsF,KAAK,GAAG,EAAE;MACnB,IAAI,CAACG,KAAK,GAAG,OAAO;IACtB,CAAC,MAAM,IAAIhH,CAAC,KAAK,EAAE,EAAE;MACnB,IAAI,CAACuB,GAAG,CAACuF,QAAQ,GAAG,EAAE;MACtB,IAAI,CAACE,KAAK,GAAG,UAAU;IACzB,CAAC,MAAM,IAAI,CAAC/G,KAAK,CAACD,CAAC,CAAC,EAAE;MACpB,IAAI,CAACuB,GAAG,CAACsF,KAAK,GAAG,IAAI;MACrB,IAAI,CAAC6B,4BAA4B,CAAC,IAAI,CAAC5I,KAAK,EAAE,IAAI,CAACsD,OAAO,CAAC,EAAE;QAC3D2C,WAAW,CAAC,IAAI,CAACxE,GAAG,CAAC;MACvB,CAAC,MAAM;QACL,IAAI,CAACoF,UAAU,GAAG,IAAI;QACtB,IAAI,CAACpF,GAAG,CAACyE,IAAI,GAAG,EAAE;MACpB;MAEA,IAAI,CAACgB,KAAK,GAAG,MAAM;MACnB,EAAE,IAAI,CAAC5D,OAAO;IAChB;EACF,CAAC,MAAM;IACL,IAAI,CAAC4D,KAAK,GAAG,MAAM;IACnB,EAAE,IAAI,CAAC5D,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDmD,eAAe,CAACe,SAAS,CAAC,kBAAkB,CAAC,GAAG,SAASuB,cAAcA,CAAC7I,CAAC,EAAE;EACzE,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,EAAE;IACxB,IAAIA,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAAC2G,UAAU,GAAG,IAAI;IACxB;IACA,IAAI,CAACK,KAAK,GAAG,WAAW;EAC1B,CAAC,MAAM;IACL,IAAI,IAAI,CAACR,IAAI,KAAK,IAAI,IAAI,IAAI,CAACA,IAAI,CAACnF,MAAM,KAAK,MAAM,EAAE;MACrD,IAAI,CAACqH,4BAA4B,CAAC,IAAI,CAAC5I,KAAK,EAAE,IAAI,CAACsD,OAAO,CAAC,IACvDpC,oCAAoC,CAAC,IAAI,CAACwF,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC3D,IAAI,CAACzE,GAAG,CAACyE,IAAI,CAACxD,IAAI,CAAC,IAAI,CAACgE,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC;MACvC;MACA,IAAI,CAACzE,GAAG,CAAC2D,IAAI,GAAG,IAAI,CAACsB,IAAI,CAACtB,IAAI;IAChC;IACA,IAAI,CAAC8B,KAAK,GAAG,MAAM;IACnB,EAAE,IAAI,CAAC5D,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDmD,eAAe,CAACe,SAAS,CAAC,iBAAiB,CAAC,GAAG,SAASwB,aAAaA,CAAC9I,CAAC,EAAEoH,IAAI,EAAE;EAC7E,IAAInH,KAAK,CAACD,CAAC,CAAC,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,EAAE;IAC5D,EAAE,IAAI,CAACoD,OAAO;IACd,IAAI,CAAC,IAAI,CAACsD,aAAa,IAAI7F,0BAA0B,CAAC,IAAI,CAACP,MAAM,CAAC,EAAE;MAClE,IAAI,CAACqG,UAAU,GAAG,IAAI;MACtB,IAAI,CAACK,KAAK,GAAG,MAAM;IACrB,CAAC,MAAM,IAAI,IAAI,CAAC1G,MAAM,KAAK,EAAE,EAAE;MAC7B,IAAI,CAACiB,GAAG,CAAC2D,IAAI,GAAG,EAAE;MAClB,IAAI,IAAI,CAACwB,aAAa,EAAE;QACtB,OAAO,KAAK;MACd;MACA,IAAI,CAACM,KAAK,GAAG,YAAY;IAC3B,CAAC,MAAM;MACL,IAAI9B,IAAI,GAAGd,SAAS,CAAC,IAAI,CAAC9D,MAAM,EAAEkB,YAAY,CAAC,IAAI,CAACD,GAAG,CAAC,CAAC;MACzD,IAAI2D,IAAI,KAAK1F,OAAO,EAAE;QACpB,OAAOA,OAAO;MAChB;MACA,IAAI0F,IAAI,KAAK,WAAW,EAAE;QACxBA,IAAI,GAAG,EAAE;MACX;MACA,IAAI,CAAC3D,GAAG,CAAC2D,IAAI,GAAGA,IAAI;MAEpB,IAAI,IAAI,CAACwB,aAAa,EAAE;QACtB,OAAO,KAAK;MACd;MAEA,IAAI,CAACpG,MAAM,GAAG,EAAE;MAChB,IAAI,CAAC0G,KAAK,GAAG,YAAY;IAC3B;EACF,CAAC,MAAM;IACL,IAAI,CAAC1G,MAAM,IAAI8G,IAAI;EACrB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDb,eAAe,CAACe,SAAS,CAAC,kBAAkB,CAAC,GAAG,SAASyB,cAAcA,CAAC/I,CAAC,EAAE;EACzE,IAAIsB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,EAAE;IACvB,IAAIvB,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAAC2G,UAAU,GAAG,IAAI;IACxB;IACA,IAAI,CAACK,KAAK,GAAG,MAAM;IAEnB,IAAIhH,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,EAAE;MACxB,EAAE,IAAI,CAACoD,OAAO;IAChB;EACF,CAAC,MAAM,IAAI,CAAC,IAAI,CAACsD,aAAa,IAAI1G,CAAC,KAAK,EAAE,EAAE;IAC1C,IAAI,CAACuB,GAAG,CAACsF,KAAK,GAAG,EAAE;IACnB,IAAI,CAACG,KAAK,GAAG,OAAO;EACtB,CAAC,MAAM,IAAI,CAAC,IAAI,CAACN,aAAa,IAAI1G,CAAC,KAAK,EAAE,EAAE;IAC1C,IAAI,CAACuB,GAAG,CAACuF,QAAQ,GAAG,EAAE;IACtB,IAAI,CAACE,KAAK,GAAG,UAAU;EACzB,CAAC,MAAM,IAAIhH,CAAC,KAAKE,SAAS,EAAE;IAC1B,IAAI,CAAC8G,KAAK,GAAG,MAAM;IACnB,IAAIhH,CAAC,KAAK,EAAE,EAAE;MACZ,EAAE,IAAI,CAACoD,OAAO;IAChB;EACF,CAAC,MAAM,IAAI,IAAI,CAACsD,aAAa,IAAI,IAAI,CAACnF,GAAG,CAAC2D,IAAI,KAAK,IAAI,EAAE;IACvD,IAAI,CAAC3D,GAAG,CAACyE,IAAI,CAACxD,IAAI,CAAC,EAAE,CAAC;EACxB;EAEA,OAAO,IAAI;AACb,CAAC;AAED+D,eAAe,CAACe,SAAS,CAAC,YAAY,CAAC,GAAG,SAAS0B,SAASA,CAAChJ,CAAC,EAAE;EAC9D,IAAIC,KAAK,CAACD,CAAC,CAAC,IAAIA,CAAC,KAAK,EAAE,IAAKsB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAIvB,CAAC,KAAK,EAAG,IACxD,CAAC,IAAI,CAAC0G,aAAa,KAAK1G,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,CAAE,EAAE;IACnD,IAAIsB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAIvB,CAAC,KAAK,EAAE,EAAE;MACnC,IAAI,CAAC2G,UAAU,GAAG,IAAI;IACxB;IAEA,IAAInG,WAAW,CAAC,IAAI,CAACF,MAAM,CAAC,EAAE;MAC5ByF,WAAW,CAAC,IAAI,CAACxE,GAAG,CAAC;MACrB,IAAIvB,CAAC,KAAK,EAAE,IAAI,EAAEsB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAIvB,CAAC,KAAK,EAAE,CAAC,EAAE;QAClD,IAAI,CAACuB,GAAG,CAACyE,IAAI,CAACxD,IAAI,CAAC,EAAE,CAAC;MACxB;IACF,CAAC,MAAM,IAAInC,WAAW,CAAC,IAAI,CAACC,MAAM,CAAC,IAAIN,CAAC,KAAK,EAAE,IACpC,EAAEsB,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAIvB,CAAC,KAAK,EAAE,CAAC,EAAE;MAC7C,IAAI,CAACuB,GAAG,CAACyE,IAAI,CAACxD,IAAI,CAAC,EAAE,CAAC;IACxB,CAAC,MAAM,IAAI,CAACnC,WAAW,CAAC,IAAI,CAACC,MAAM,CAAC,EAAE;MACpC,IAAI,IAAI,CAACiB,GAAG,CAACF,MAAM,KAAK,MAAM,IAAI,IAAI,CAACE,GAAG,CAACyE,IAAI,CAACpG,MAAM,KAAK,CAAC,IAAIiB,0BAA0B,CAAC,IAAI,CAACP,MAAM,CAAC,EAAE;QACvG,IAAI,CAACA,MAAM,GAAI,GAAE,IAAI,CAACA,MAAM,CAAC,CAAC,CAAE,GAAE;MACpC;MACA,IAAI,CAACiB,GAAG,CAACyE,IAAI,CAACxD,IAAI,CAAC,IAAI,CAAClC,MAAM,CAAC;IACjC;IACA,IAAI,CAACA,MAAM,GAAG,EAAE;IAChB,IAAIN,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAACuB,GAAG,CAACsF,KAAK,GAAG,EAAE;MACnB,IAAI,CAACG,KAAK,GAAG,OAAO;IACtB;IACA,IAAIhH,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAACuB,GAAG,CAACuF,QAAQ,GAAG,EAAE;MACtB,IAAI,CAACE,KAAK,GAAG,UAAU;IACzB;EACF,CAAC,MAAM;IACL;;IAEA,IAAIhH,CAAC,KAAK,EAAE,KACT,CAAC1B,KAAK,CAACkF,UAAU,CAAC,IAAI,CAAC1D,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,IAC9C,CAAC9E,KAAK,CAACkF,UAAU,CAAC,IAAI,CAAC1D,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;MACpD,IAAI,CAACuD,UAAU,GAAG,IAAI;IACxB;IAEA,IAAI,CAACrG,MAAM,IAAI7B,0BAA0B,CAACuB,CAAC,EAAEjB,mBAAmB,CAAC;EACnE;EAEA,OAAO,IAAI;AACb,CAAC;AAEDwH,eAAe,CAACe,SAAS,CAAC,iCAAiC,CAAC,GAAG,SAAS2B,yBAAyBA,CAACjJ,CAAC,EAAE;EACnG,IAAIA,CAAC,KAAK,EAAE,EAAE;IACZ,IAAI,CAACuB,GAAG,CAACsF,KAAK,GAAG,EAAE;IACnB,IAAI,CAACG,KAAK,GAAG,OAAO;EACtB,CAAC,MAAM,IAAIhH,CAAC,KAAK,EAAE,EAAE;IACnB,IAAI,CAACuB,GAAG,CAACuF,QAAQ,GAAG,EAAE;IACtB,IAAI,CAACE,KAAK,GAAG,UAAU;EACzB,CAAC,MAAM;IACL;IACA,IAAI,CAAC/G,KAAK,CAACD,CAAC,CAAC,IAAIA,CAAC,KAAK,EAAE,EAAE;MACzB,IAAI,CAAC2G,UAAU,GAAG,IAAI;IACxB;IAEA,IAAI3G,CAAC,KAAK,EAAE,KACP,CAAC1B,KAAK,CAACkF,UAAU,CAAC,IAAI,CAAC1D,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,IAC/C,CAAC9E,KAAK,CAACkF,UAAU,CAAC,IAAI,CAAC1D,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;MACrD,IAAI,CAACuD,UAAU,GAAG,IAAI;IACxB;IAEA,IAAI,CAAC1G,KAAK,CAACD,CAAC,CAAC,EAAE;MACb,IAAI,CAACuB,GAAG,CAACyE,IAAI,CAAC,CAAC,CAAC,IAAIvH,0BAA0B,CAACuB,CAAC,EAAErB,wBAAwB,CAAC;IAC7E;EACF;EAEA,OAAO,IAAI;AACb,CAAC;AAED4H,eAAe,CAACe,SAAS,CAAC,aAAa,CAAC,GAAG,SAAS4B,UAAUA,CAAClJ,CAAC,EAAEoH,IAAI,EAAE;EACtE,IAAI,CAAC9F,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,IAAI,IAAI,CAACA,GAAG,CAACF,MAAM,KAAK,IAAI,IAAI,IAAI,CAACE,GAAG,CAACF,MAAM,KAAK,KAAK,EAAE;IACjF,IAAI,CAACoF,gBAAgB,GAAG,OAAO;EACjC;EAEA,IAAK,CAAC,IAAI,CAACC,aAAa,IAAI1G,CAAC,KAAK,EAAE,IAAKC,KAAK,CAACD,CAAC,CAAC,EAAE;IACjD,MAAMmJ,2BAA2B,GAAG7H,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,GAAGzC,2BAA2B,GAAGD,oBAAoB;IAC5G,IAAI,CAAC0C,GAAG,CAACsF,KAAK,IAAInI,uBAAuB,CAAC,IAAI,CAAC4B,MAAM,EAAE6I,2BAA2B,CAAC;IAEnF,IAAI,CAAC7I,MAAM,GAAG,EAAE;IAEhB,IAAIN,CAAC,KAAK,EAAE,EAAE;MACZ,IAAI,CAACuB,GAAG,CAACuF,QAAQ,GAAG,EAAE;MACtB,IAAI,CAACE,KAAK,GAAG,UAAU;IACzB;EACF,CAAC,MAAM,IAAI,CAAC/G,KAAK,CAACD,CAAC,CAAC,EAAE;IACpB;;IAEA,IAAIA,CAAC,KAAK,EAAE,KACT,CAAC1B,KAAK,CAACkF,UAAU,CAAC,IAAI,CAAC1D,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,IAC9C,CAAC9E,KAAK,CAACkF,UAAU,CAAC,IAAI,CAAC1D,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;MACpD,IAAI,CAACuD,UAAU,GAAG,IAAI;IACxB;IAEA,IAAI,CAACrG,MAAM,IAAI8G,IAAI;EACrB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDb,eAAe,CAACe,SAAS,CAAC,gBAAgB,CAAC,GAAG,SAAS8B,aAAaA,CAACpJ,CAAC,EAAE;EACtE,IAAI,CAACC,KAAK,CAACD,CAAC,CAAC,EAAE;IACb;IACA,IAAIA,CAAC,KAAK,EAAE,KACT,CAAC1B,KAAK,CAACkF,UAAU,CAAC,IAAI,CAAC1D,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,IAC9C,CAAC9E,KAAK,CAACkF,UAAU,CAAC,IAAI,CAAC1D,KAAK,CAAC,IAAI,CAACsD,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;MACpD,IAAI,CAACuD,UAAU,GAAG,IAAI;IACxB;IAEA,IAAI,CAACpF,GAAG,CAACuF,QAAQ,IAAIrI,0BAA0B,CAACuB,CAAC,EAAEpB,uBAAuB,CAAC;EAC7E;EAEA,OAAO,IAAI;AACb,CAAC;AAED,SAASyK,YAAYA,CAAC9H,GAAG,EAAE+H,eAAe,EAAE;EAC1C,IAAIxG,MAAM,GAAI,GAAEvB,GAAG,CAACF,MAAO,GAAE;EAC7B,IAAIE,GAAG,CAAC2D,IAAI,KAAK,IAAI,EAAE;IACrBpC,MAAM,IAAI,IAAI;IAEd,IAAIvB,GAAG,CAAC4E,QAAQ,KAAK,EAAE,IAAI5E,GAAG,CAAC6E,QAAQ,KAAK,EAAE,EAAE;MAC9CtD,MAAM,IAAIvB,GAAG,CAAC4E,QAAQ;MACtB,IAAI5E,GAAG,CAAC6E,QAAQ,KAAK,EAAE,EAAE;QACvBtD,MAAM,IAAK,IAAGvB,GAAG,CAAC6E,QAAS,EAAC;MAC9B;MACAtD,MAAM,IAAI,GAAG;IACf;IAEAA,MAAM,IAAImC,aAAa,CAAC1D,GAAG,CAAC2D,IAAI,CAAC;IAEjC,IAAI3D,GAAG,CAACqF,IAAI,KAAK,IAAI,EAAE;MACrB9D,MAAM,IAAK,IAAGvB,GAAG,CAACqF,IAAK,EAAC;IAC1B;EACF;EAEA,IAAIrF,GAAG,CAAC+E,gBAAgB,EAAE;IACxBxD,MAAM,IAAIvB,GAAG,CAACyE,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC,MAAM;IACL,IAAIzE,GAAG,CAAC2D,IAAI,KAAK,IAAI,IAAI3D,GAAG,CAACyE,IAAI,CAACpG,MAAM,GAAG,CAAC,IAAI2B,GAAG,CAACyE,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;MAClElD,MAAM,IAAI,IAAI;IAChB;IACA,KAAK,MAAMyG,OAAO,IAAIhI,GAAG,CAACyE,IAAI,EAAE;MAC9BlD,MAAM,IAAK,IAAGyG,OAAQ,EAAC;IACzB;EACF;EAEA,IAAIhI,GAAG,CAACsF,KAAK,KAAK,IAAI,EAAE;IACtB/D,MAAM,IAAK,IAAGvB,GAAG,CAACsF,KAAM,EAAC;EAC3B;EAEA,IAAI,CAACyC,eAAe,IAAI/H,GAAG,CAACuF,QAAQ,KAAK,IAAI,EAAE;IAC7ChE,MAAM,IAAK,IAAGvB,GAAG,CAACuF,QAAS,EAAC;EAC9B;EAEA,OAAOhE,MAAM;AACf;AAEA,SAAS0G,eAAeA,CAACC,KAAK,EAAE;EAC9B,IAAIpE,MAAM,GAAI,GAAEoE,KAAK,CAACpI,MAAO,KAAI;EACjCgE,MAAM,IAAIJ,aAAa,CAACwE,KAAK,CAACvE,IAAI,CAAC;EAEnC,IAAIuE,KAAK,CAAC7C,IAAI,KAAK,IAAI,EAAE;IACvBvB,MAAM,IAAK,IAAGoE,KAAK,CAAC7C,IAAK,EAAC;EAC5B;EAEA,OAAOvB,MAAM;AACf;AAEAqE,MAAM,CAACC,OAAO,CAACN,YAAY,GAAGA,YAAY;AAE1CK,MAAM,CAACC,OAAO,CAACC,kBAAkB,GAAG,UAAUrI,GAAG,EAAE;EACjD;EACA,QAAQA,GAAG,CAACF,MAAM;IAChB,KAAK,MAAM;MACT,IAAI;QACF,OAAOqI,MAAM,CAACC,OAAO,CAACC,kBAAkB,CAACF,MAAM,CAACC,OAAO,CAACE,QAAQ,CAACtI,GAAG,CAACyE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAChF,CAAC,CAAC,OAAO8D,CAAC,EAAE;QACV;QACA,OAAO,MAAM;MACf;IACF,KAAK,KAAK;IACV,KAAK,MAAM;IACX,KAAK,OAAO;IACZ,KAAK,IAAI;IACT,KAAK,KAAK;MACR,OAAON,eAAe,CAAC;QACrBnI,MAAM,EAAEE,GAAG,CAACF,MAAM;QAClB6D,IAAI,EAAE3D,GAAG,CAAC2D,IAAI;QACd0B,IAAI,EAAErF,GAAG,CAACqF;MACZ,CAAC,CAAC;IACJ,KAAK,MAAM;MACT;MACA;MACA;MACA;MACA;MACA;MACA;MACA,OAAO,MAAM;IACf;MACE;MACA,OAAO,MAAM;EAAC;AAEpB,CAAC;AAED8C,MAAM,CAACC,OAAO,CAACI,aAAa,GAAG,UAAUjK,KAAK,EAAEkK,OAAO,EAAE;EACvD,IAAIA,OAAO,KAAK9J,SAAS,EAAE;IACzB8J,OAAO,GAAG,CAAC,CAAC;EACd;EAEA,MAAMC,GAAG,GAAG,IAAI1D,eAAe,CAACzG,KAAK,EAAEkK,OAAO,CAACE,OAAO,EAAEF,OAAO,CAACvD,gBAAgB,EAAEuD,OAAO,CAACzI,GAAG,EAAEyI,OAAO,CAACtD,aAAa,CAAC;EACrH,IAAIuD,GAAG,CAACzK,OAAO,EAAE;IACf,OAAO,IAAI;EACb;EAEA,OAAOyK,GAAG,CAAC1I,GAAG;AAChB,CAAC;AAEDmI,MAAM,CAACC,OAAO,CAACQ,cAAc,GAAG,UAAU5I,GAAG,EAAE4E,QAAQ,EAAE;EACvD5E,GAAG,CAAC4E,QAAQ,GAAGzH,uBAAuB,CAACyH,QAAQ,EAAEnH,uBAAuB,CAAC;AAC3E,CAAC;AAED0K,MAAM,CAACC,OAAO,CAACS,cAAc,GAAG,UAAU7I,GAAG,EAAE6E,QAAQ,EAAE;EACvD7E,GAAG,CAAC6E,QAAQ,GAAG1H,uBAAuB,CAAC0H,QAAQ,EAAEpH,uBAAuB,CAAC;AAC3E,CAAC;AAED0K,MAAM,CAACC,OAAO,CAAC1E,aAAa,GAAGA,aAAa;AAE5CyE,MAAM,CAACC,OAAO,CAACtD,+BAA+B,GAAGA,+BAA+B;AAEhFqD,MAAM,CAACC,OAAO,CAACU,gBAAgB,GAAG,UAAUC,OAAO,EAAE;EACnD,OAAOnK,MAAM,CAACmK,OAAO,CAAC;AACxB,CAAC;AAEDZ,MAAM,CAACC,OAAO,CAACE,QAAQ,GAAG,UAAU/J,KAAK,EAAEkK,OAAO,EAAE;EAClD,IAAIA,OAAO,KAAK9J,SAAS,EAAE;IACzB8J,OAAO,GAAG,CAAC,CAAC;EACd;;EAEA;EACA,OAAON,MAAM,CAACC,OAAO,CAACI,aAAa,CAACjK,KAAK,EAAE;IAAEoK,OAAO,EAAEF,OAAO,CAACE,OAAO;IAAEzD,gBAAgB,EAAEuD,OAAO,CAACvD;EAAiB,CAAC,CAAC;AACtH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}