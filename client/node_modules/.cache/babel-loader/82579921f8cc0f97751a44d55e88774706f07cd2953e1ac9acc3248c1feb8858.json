{"ast":null,"code":"\"use strict\";\n\nconst vm = require(\"vm\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst {\n  serializeURL\n} = require(\"whatwg-url\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst reportException = require(\"../helpers/runtime-script-errors\");\nconst {\n  domSymbolTree,\n  cloningSteps\n} = require(\"../helpers/internal-constants\");\nconst {\n  asciiLowercase\n} = require(\"../helpers/strings\");\nconst {\n  childTextContent\n} = require(\"../helpers/text\");\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\nconst {\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\nconst nodeTypes = require(\"../node-type\");\nconst jsMIMETypes = new Set([\"application/ecmascript\", \"application/javascript\", \"application/x-ecmascript\", \"application/x-javascript\", \"text/ecmascript\", \"text/javascript\", \"text/javascript1.0\", \"text/javascript1.1\", \"text/javascript1.2\", \"text/javascript1.3\", \"text/javascript1.4\", \"text/javascript1.5\", \"text/jscript\", \"text/livescript\", \"text/x-ecmascript\", \"text/x-javascript\"]);\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach();\n\n    // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n  _canRunScript() {\n    const document = this._ownerDocument;\n    // Equivalent to the spec's \"scripting is disabled\" check.\n    if (!document._defaultView || document._defaultView._runScripts !== \"dangerously\" || document._scriptingDisabled) {\n      return false;\n    }\n    return true;\n  }\n  _fetchExternalScript() {\n    const document = this._ownerDocument;\n    const resourceLoader = document._resourceLoader;\n    const defaultEncoding = whatwgEncoding.labelToName(this.getAttributeNS(null, \"charset\")) || document._encoding;\n    let request;\n    if (!this._canRunScript()) {\n      return;\n    }\n    const src = this.getAttributeNS(null, \"src\");\n    const url = parseURLToResultingURLRecord(src, this._ownerDocument);\n    if (url === null) {\n      return;\n    }\n    const urlString = serializeURL(url);\n    const onLoadExternalScript = data => {\n      const {\n        response\n      } = request;\n      let contentType;\n      if (response && response.statusCode !== undefined && response.statusCode >= 400) {\n        throw new Error(\"Status code: \" + response.statusCode);\n      }\n      if (response) {\n        contentType = MIMEType.parse(response.headers[\"content-type\"]) || new MIMEType(\"text/plain\");\n      }\n      const encoding = whatwgEncoding.getBOMEncoding(data) || contentType && whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || defaultEncoding;\n      const script = whatwgEncoding.decode(data, encoding);\n      this._innerEval(script, urlString);\n    };\n    request = resourceLoader.fetch(urlString, {\n      element: this,\n      onLoad: onLoadExternalScript\n    });\n  }\n  _fetchInternalScript() {\n    const document = this._ownerDocument;\n    if (!this._canRunScript()) {\n      return;\n    }\n    document._queue.push(null, () => {\n      this._innerEval(this.text, document.URL);\n      fireAnEvent(\"load\", this);\n    }, null, false, this);\n  }\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      this._fetchExternalScript();\n    }\n  }\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  }\n\n  // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    }\n\n    // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n    if (!this.hasAttributeNS(null, \"src\") && this.text.length === 0) {\n      return;\n    }\n    if (!this._attached) {\n      return;\n    }\n    const scriptBlocksTypeString = this._getTypeString();\n    const type = getType(scriptBlocksTypeString);\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n    this._alreadyStarted = true;\n\n    // TODO: implement nomodule here, **but only after we support modules**.\n\n    // At this point we completely depart from the spec.\n\n    if (this.hasAttributeNS(null, \"src\")) {\n      this._fetchExternalScript();\n    } else {\n      this._fetchInternalScript();\n    }\n  }\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n  _getTypeString() {\n    const typeAttr = this.getAttributeNS(null, \"type\");\n    const langAttr = this.getAttributeNS(null, \"language\");\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n    return null;\n  }\n  get text() {\n    return childTextContent(this);\n  }\n  set text(text) {\n    this.textContent = text;\n  }\n\n  // https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\n  [cloningSteps](copy, node) {\n    copy._alreadyStarted = node._alreadyStarted;\n  }\n}\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n  if (window) {\n    document._currentScript = element;\n    let lineOffset = 0;\n    if (!element.hasAttributeNS(null, \"src\")) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.sourceCodeLocation) {\n            lineOffset = child.sourceCodeLocation.startLine - 1;\n          }\n          break;\n        }\n      }\n    }\n    try {\n      vm.runInContext(code, window, {\n        filename,\n        lineOffset,\n        displayErrors: false\n      });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString);\n  // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n  return null;\n}\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};","map":{"version":3,"names":["vm","require","whatwgEncoding","MIMEType","serializeURL","HTMLElementImpl","implementation","reportException","domSymbolTree","cloningSteps","asciiLowercase","childTextContent","fireAnEvent","parseURLToResultingURLRecord","nodeTypes","jsMIMETypes","Set","HTMLScriptElementImpl","constructor","globalObject","args","privateData","_alreadyStarted","_parserInserted","_attach","_isMovingDueToDocumentWrite","_eval","_canRunScript","document","_ownerDocument","_defaultView","_runScripts","_scriptingDisabled","_fetchExternalScript","resourceLoader","_resourceLoader","defaultEncoding","labelToName","getAttributeNS","_encoding","request","src","url","urlString","onLoadExternalScript","data","response","contentType","statusCode","undefined","Error","parse","headers","encoding","getBOMEncoding","parameters","get","script","decode","_innerEval","fetch","element","onLoad","_fetchInternalScript","_queue","push","text","URL","_attrModified","name","value","oldValue","_attached","_startedEval","_poppedOffStackOfOpenElements","hasAttributeNS","length","scriptBlocksTypeString","_getTypeString","type","getType","filename","_writeAfterElement","processJavaScript","typeAttr","langAttr","trim","textContent","copy","node","code","ownerDocument","window","_global","_currentScript","lineOffset","child","childrenIterator","nodeType","TEXT_NODE","sourceCodeLocation","startLine","runInContext","displayErrors","e","typeString","lowercased","has","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js"],"sourcesContent":["\"use strict\";\r\nconst vm = require(\"vm\");\r\nconst whatwgEncoding = require(\"whatwg-encoding\");\r\nconst MIMEType = require(\"whatwg-mimetype\");\r\nconst { serializeURL } = require(\"whatwg-url\");\r\n\r\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\r\nconst reportException = require(\"../helpers/runtime-script-errors\");\r\nconst { domSymbolTree, cloningSteps } = require(\"../helpers/internal-constants\");\r\nconst { asciiLowercase } = require(\"../helpers/strings\");\r\nconst { childTextContent } = require(\"../helpers/text\");\r\nconst { fireAnEvent } = require(\"../helpers/events\");\r\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\r\nconst nodeTypes = require(\"../node-type\");\r\n\r\nconst jsMIMETypes = new Set([\r\n  \"application/ecmascript\",\r\n  \"application/javascript\",\r\n  \"application/x-ecmascript\",\r\n  \"application/x-javascript\",\r\n  \"text/ecmascript\",\r\n  \"text/javascript\",\r\n  \"text/javascript1.0\",\r\n  \"text/javascript1.1\",\r\n  \"text/javascript1.2\",\r\n  \"text/javascript1.3\",\r\n  \"text/javascript1.4\",\r\n  \"text/javascript1.5\",\r\n  \"text/jscript\",\r\n  \"text/livescript\",\r\n  \"text/x-ecmascript\",\r\n  \"text/x-javascript\"\r\n]);\r\n\r\nclass HTMLScriptElementImpl extends HTMLElementImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    super(globalObject, args, privateData);\r\n    this._alreadyStarted = false;\r\n    this._parserInserted = false; // set by the parser\r\n  }\r\n\r\n  _attach() {\r\n    super._attach();\r\n\r\n\r\n    // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\r\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\r\n    // then. Instead, we'll let it eval here.\r\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\r\n      this._eval();\r\n    }\r\n  }\r\n\r\n  _canRunScript() {\r\n    const document = this._ownerDocument;\r\n    // Equivalent to the spec's \"scripting is disabled\" check.\r\n    if (!document._defaultView || document._defaultView._runScripts !== \"dangerously\" || document._scriptingDisabled) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  _fetchExternalScript() {\r\n    const document = this._ownerDocument;\r\n    const resourceLoader = document._resourceLoader;\r\n    const defaultEncoding = whatwgEncoding.labelToName(this.getAttributeNS(null, \"charset\")) || document._encoding;\r\n    let request;\r\n\r\n    if (!this._canRunScript()) {\r\n      return;\r\n    }\r\n\r\n    const src = this.getAttributeNS(null, \"src\");\r\n    const url = parseURLToResultingURLRecord(src, this._ownerDocument);\r\n    if (url === null) {\r\n      return;\r\n    }\r\n    const urlString = serializeURL(url);\r\n\r\n    const onLoadExternalScript = data => {\r\n      const { response } = request;\r\n      let contentType;\r\n\r\n      if (response && response.statusCode !== undefined && response.statusCode >= 400) {\r\n        throw new Error(\"Status code: \" + response.statusCode);\r\n      }\r\n\r\n      if (response) {\r\n        contentType = MIMEType.parse(response.headers[\"content-type\"]) || new MIMEType(\"text/plain\");\r\n      }\r\n\r\n      const encoding = whatwgEncoding.getBOMEncoding(data) ||\r\n        (contentType && whatwgEncoding.labelToName(contentType.parameters.get(\"charset\"))) ||\r\n        defaultEncoding;\r\n      const script = whatwgEncoding.decode(data, encoding);\r\n\r\n      this._innerEval(script, urlString);\r\n    };\r\n\r\n    request = resourceLoader.fetch(urlString, {\r\n      element: this,\r\n      onLoad: onLoadExternalScript\r\n    });\r\n  }\r\n\r\n  _fetchInternalScript() {\r\n    const document = this._ownerDocument;\r\n\r\n    if (!this._canRunScript()) {\r\n      return;\r\n    }\r\n\r\n    document._queue.push(null, () => {\r\n      this._innerEval(this.text, document.URL);\r\n\r\n      fireAnEvent(\"load\", this);\r\n    }, null, false, this);\r\n  }\r\n\r\n  _attrModified(name, value, oldValue) {\r\n    super._attrModified(name, value, oldValue);\r\n\r\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\r\n      this._fetchExternalScript();\r\n    }\r\n  }\r\n\r\n  _poppedOffStackOfOpenElements() {\r\n    // This seems to roughly correspond to\r\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\r\n    // don't implement the full semantics.\r\n    this._eval();\r\n  }\r\n\r\n  // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\r\n  // to go before it's aligned.\r\n  _eval() {\r\n    if (this._alreadyStarted) {\r\n      return;\r\n    }\r\n\r\n    // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\r\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\r\n    if (!this.hasAttributeNS(null, \"src\") && this.text.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (!this._attached) {\r\n      return;\r\n    }\r\n\r\n    const scriptBlocksTypeString = this._getTypeString();\r\n    const type = getType(scriptBlocksTypeString);\r\n\r\n    if (type !== \"classic\") {\r\n      // TODO: implement modules, and then change the check to `type === null`.\r\n      return;\r\n    }\r\n\r\n    this._alreadyStarted = true;\r\n\r\n    // TODO: implement nomodule here, **but only after we support modules**.\r\n\r\n    // At this point we completely depart from the spec.\r\n\r\n    if (this.hasAttributeNS(null, \"src\")) {\r\n      this._fetchExternalScript();\r\n    } else {\r\n      this._fetchInternalScript();\r\n    }\r\n  }\r\n\r\n  _innerEval(text, filename) {\r\n    this._ownerDocument._writeAfterElement = this;\r\n    processJavaScript(this, text, filename);\r\n    delete this._ownerDocument._writeAfterElement;\r\n  }\r\n\r\n  _getTypeString() {\r\n    const typeAttr = this.getAttributeNS(null, \"type\");\r\n    const langAttr = this.getAttributeNS(null, \"language\");\r\n\r\n    if (typeAttr === \"\") {\r\n      return \"text/javascript\";\r\n    }\r\n\r\n    if (typeAttr === null && langAttr === \"\") {\r\n      return \"text/javascript\";\r\n    }\r\n\r\n    if (typeAttr === null && langAttr === null) {\r\n      return \"text/javascript\";\r\n    }\r\n\r\n    if (typeAttr !== null) {\r\n      return typeAttr.trim();\r\n    }\r\n\r\n    if (langAttr !== null) {\r\n      return \"text/\" + langAttr;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  get text() {\r\n    return childTextContent(this);\r\n  }\r\n\r\n  set text(text) {\r\n    this.textContent = text;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\r\n  [cloningSteps](copy, node) {\r\n    copy._alreadyStarted = node._alreadyStarted;\r\n  }\r\n}\r\n\r\nfunction processJavaScript(element, code, filename) {\r\n  const document = element.ownerDocument;\r\n  const window = document && document._global;\r\n\r\n  if (window) {\r\n    document._currentScript = element;\r\n\r\n    let lineOffset = 0;\r\n    if (!element.hasAttributeNS(null, \"src\")) {\r\n      for (const child of domSymbolTree.childrenIterator(element)) {\r\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\r\n          if (child.sourceCodeLocation) {\r\n            lineOffset = child.sourceCodeLocation.startLine - 1;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    try {\r\n      vm.runInContext(code, window, { filename, lineOffset, displayErrors: false });\r\n    } catch (e) {\r\n      reportException(window, e, filename);\r\n    } finally {\r\n      document._currentScript = null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getType(typeString) {\r\n  const lowercased = asciiLowercase(typeString);\r\n  // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\r\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\r\n  if (jsMIMETypes.has(lowercased)) {\r\n    return \"classic\";\r\n  }\r\n  if (lowercased === \"module\") {\r\n    return \"module\";\r\n  }\r\n  return null;\r\n}\r\n\r\nmodule.exports = {\r\n  implementation: HTMLScriptElementImpl\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}