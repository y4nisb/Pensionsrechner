{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"./internal-constants\");\nconst reportException = require(\"./runtime-script-errors\");\nconst Event = require(\"../generated/Event\");\nconst idlUtils = require(\"../generated/utils\");\nconst MutationRecord = require(\"../generated/MutationRecord\");\nconst MUTATION_TYPE = {\n  ATTRIBUTES: \"attributes\",\n  CHARACTER_DATA: \"characterData\",\n  CHILD_LIST: \"childList\"\n};\n\n// Note:\n// Since jsdom doesn't currently implement the concept of \"unit of related similar-origin browsing contexts\"\n// (https://html.spec.whatwg.org/multipage/browsers.html#unit-of-related-similar-origin-browsing-contexts)\n// we will approximate that the following properties are global for now.\n\n// https://dom.spec.whatwg.org/#mutation-observer-compound-microtask-queued-flag\nlet mutationObserverMicrotaskQueueFlag = false;\n\n// Non-spec compliant: List of all the mutation observers with mutation records enqueued. It's a replacement for\n// mutation observer list (https://dom.spec.whatwg.org/#mutation-observer-list) but without leaking since it's empty\n// before notifying the mutation observers.\nconst activeMutationObservers = new Set();\n\n// https://dom.spec.whatwg.org/#signal-slot-list\nconst signalSlotList = [];\n\n// https://dom.spec.whatwg.org/#queue-a-mutation-record\nfunction queueMutationRecord(type, target, name, namespace, oldValue, addedNodes, removedNodes, previousSibling, nextSibling) {\n  const interestedObservers = new Map();\n  const nodes = domSymbolTree.ancestorsToArray(target);\n  for (const node of nodes) {\n    for (const registered of node._registeredObserverList) {\n      const {\n        options,\n        observer: mo\n      } = registered;\n      if (!(node !== target && options.subtree === false) && !(type === MUTATION_TYPE.ATTRIBUTES && options.attributes !== true) && !(type === MUTATION_TYPE.ATTRIBUTES && options.attributeFilter && !options.attributeFilter.some(value => value === name || value === namespace)) && !(type === MUTATION_TYPE.CHARACTER_DATA && options.characterData !== true) && !(type === MUTATION_TYPE.CHILD_LIST && options.childList === false)) {\n        if (!interestedObservers.has(mo)) {\n          interestedObservers.set(mo, null);\n        }\n        if (type === MUTATION_TYPE.ATTRIBUTES && options.attributeOldValue === true || type === MUTATION_TYPE.CHARACTER_DATA && options.characterDataOldValue === true) {\n          interestedObservers.set(mo, oldValue);\n        }\n      }\n    }\n  }\n  for (const [observer, mappedOldValue] of interestedObservers.entries()) {\n    const record = MutationRecord.createImpl(target._globalObject, [], {\n      type,\n      target,\n      attributeName: name,\n      attributeNamespace: namespace,\n      oldValue: mappedOldValue,\n      addedNodes,\n      removedNodes,\n      previousSibling,\n      nextSibling\n    });\n    observer._recordQueue.push(record);\n    activeMutationObservers.add(observer);\n  }\n  queueMutationObserverMicrotask();\n}\n\n// https://dom.spec.whatwg.org/#queue-a-tree-mutation-record\nfunction queueTreeMutationRecord(target, addedNodes, removedNodes, previousSibling, nextSibling) {\n  queueMutationRecord(MUTATION_TYPE.CHILD_LIST, target, null, null, null, addedNodes, removedNodes, previousSibling, nextSibling);\n}\n\n// https://dom.spec.whatwg.org/#queue-an-attribute-mutation-record\nfunction queueAttributeMutationRecord(target, name, namespace, oldValue) {\n  queueMutationRecord(MUTATION_TYPE.ATTRIBUTES, target, name, namespace, oldValue, [], [], null, null);\n}\n\n// https://dom.spec.whatwg.org/#queue-a-mutation-observer-compound-microtask\nfunction queueMutationObserverMicrotask() {\n  if (mutationObserverMicrotaskQueueFlag) {\n    return;\n  }\n  mutationObserverMicrotaskQueueFlag = true;\n  Promise.resolve().then(() => {\n    notifyMutationObservers();\n  });\n}\n\n// https://dom.spec.whatwg.org/#notify-mutation-observers\nfunction notifyMutationObservers() {\n  mutationObserverMicrotaskQueueFlag = false;\n  const notifyList = [...activeMutationObservers].sort((a, b) => a._id - b._id);\n  activeMutationObservers.clear();\n  const signalList = [...signalSlotList];\n  signalSlotList.splice(0, signalSlotList.length);\n  for (const mo of notifyList) {\n    const records = [...mo._recordQueue];\n    mo._recordQueue = [];\n    for (const node of mo._nodeList) {\n      node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n        return registeredObserver.source !== mo;\n      });\n    }\n    if (records.length > 0) {\n      try {\n        const moWrapper = idlUtils.wrapperForImpl(mo);\n        mo._callback.call(moWrapper, records.map(idlUtils.wrapperForImpl), moWrapper);\n      } catch (e) {\n        const {\n          target\n        } = records[0];\n        const window = target._ownerDocument._defaultView;\n        reportException(window, e);\n      }\n    }\n  }\n  for (const slot of signalList) {\n    const slotChangeEvent = Event.createImpl(slot._globalObject, [\"slotchange\", {\n      bubbles: true\n    }], {\n      isTrusted: true\n    });\n    slot._dispatch(slotChangeEvent);\n  }\n}\nmodule.exports = {\n  MUTATION_TYPE,\n  queueMutationRecord,\n  queueTreeMutationRecord,\n  queueAttributeMutationRecord,\n  queueMutationObserverMicrotask,\n  signalSlotList\n};","map":{"version":3,"names":["domSymbolTree","require","reportException","Event","idlUtils","MutationRecord","MUTATION_TYPE","ATTRIBUTES","CHARACTER_DATA","CHILD_LIST","mutationObserverMicrotaskQueueFlag","activeMutationObservers","Set","signalSlotList","queueMutationRecord","type","target","name","namespace","oldValue","addedNodes","removedNodes","previousSibling","nextSibling","interestedObservers","Map","nodes","ancestorsToArray","node","registered","_registeredObserverList","options","observer","mo","subtree","attributes","attributeFilter","some","value","characterData","childList","has","set","attributeOldValue","characterDataOldValue","mappedOldValue","entries","record","createImpl","_globalObject","attributeName","attributeNamespace","_recordQueue","push","add","queueMutationObserverMicrotask","queueTreeMutationRecord","queueAttributeMutationRecord","Promise","resolve","then","notifyMutationObservers","notifyList","sort","a","b","_id","clear","signalList","splice","length","records","_nodeList","filter","registeredObserver","source","moWrapper","wrapperForImpl","_callback","call","map","e","window","_ownerDocument","_defaultView","slot","slotChangeEvent","bubbles","isTrusted","_dispatch","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/helpers/mutation-observers.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst { domSymbolTree } = require(\"./internal-constants\");\r\nconst reportException = require(\"./runtime-script-errors\");\r\n\r\nconst Event = require(\"../generated/Event\");\r\nconst idlUtils = require(\"../generated/utils\");\r\nconst MutationRecord = require(\"../generated/MutationRecord\");\r\n\r\nconst MUTATION_TYPE = {\r\n  ATTRIBUTES: \"attributes\",\r\n  CHARACTER_DATA: \"characterData\",\r\n  CHILD_LIST: \"childList\"\r\n};\r\n\r\n// Note:\r\n// Since jsdom doesn't currently implement the concept of \"unit of related similar-origin browsing contexts\"\r\n// (https://html.spec.whatwg.org/multipage/browsers.html#unit-of-related-similar-origin-browsing-contexts)\r\n// we will approximate that the following properties are global for now.\r\n\r\n// https://dom.spec.whatwg.org/#mutation-observer-compound-microtask-queued-flag\r\nlet mutationObserverMicrotaskQueueFlag = false;\r\n\r\n// Non-spec compliant: List of all the mutation observers with mutation records enqueued. It's a replacement for\r\n// mutation observer list (https://dom.spec.whatwg.org/#mutation-observer-list) but without leaking since it's empty\r\n// before notifying the mutation observers.\r\nconst activeMutationObservers = new Set();\r\n\r\n// https://dom.spec.whatwg.org/#signal-slot-list\r\nconst signalSlotList = [];\r\n\r\n// https://dom.spec.whatwg.org/#queue-a-mutation-record\r\nfunction queueMutationRecord(\r\n  type,\r\n  target,\r\n  name,\r\n  namespace,\r\n  oldValue,\r\n  addedNodes,\r\n  removedNodes,\r\n  previousSibling,\r\n  nextSibling\r\n) {\r\n  const interestedObservers = new Map();\r\n\r\n  const nodes = domSymbolTree.ancestorsToArray(target);\r\n\r\n  for (const node of nodes) {\r\n    for (const registered of node._registeredObserverList) {\r\n      const { options, observer: mo } = registered;\r\n\r\n      if (\r\n        !(node !== target && options.subtree === false) &&\r\n        !(type === MUTATION_TYPE.ATTRIBUTES && options.attributes !== true) &&\r\n        !(type === MUTATION_TYPE.ATTRIBUTES && options.attributeFilter &&\r\n          !options.attributeFilter.some(value => value === name || value === namespace)) &&\r\n        !(type === MUTATION_TYPE.CHARACTER_DATA && options.characterData !== true) &&\r\n        !(type === MUTATION_TYPE.CHILD_LIST && options.childList === false)\r\n      ) {\r\n        if (!interestedObservers.has(mo)) {\r\n          interestedObservers.set(mo, null);\r\n        }\r\n\r\n        if (\r\n          (type === MUTATION_TYPE.ATTRIBUTES && options.attributeOldValue === true) ||\r\n          (type === MUTATION_TYPE.CHARACTER_DATA && options.characterDataOldValue === true)\r\n        ) {\r\n          interestedObservers.set(mo, oldValue);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const [observer, mappedOldValue] of interestedObservers.entries()) {\r\n    const record = MutationRecord.createImpl(target._globalObject, [], {\r\n      type,\r\n      target,\r\n      attributeName: name,\r\n      attributeNamespace: namespace,\r\n      oldValue: mappedOldValue,\r\n      addedNodes,\r\n      removedNodes,\r\n      previousSibling,\r\n      nextSibling\r\n    });\r\n\r\n    observer._recordQueue.push(record);\r\n    activeMutationObservers.add(observer);\r\n  }\r\n\r\n  queueMutationObserverMicrotask();\r\n}\r\n\r\n// https://dom.spec.whatwg.org/#queue-a-tree-mutation-record\r\nfunction queueTreeMutationRecord(target, addedNodes, removedNodes, previousSibling, nextSibling) {\r\n  queueMutationRecord(\r\n    MUTATION_TYPE.CHILD_LIST,\r\n    target,\r\n    null,\r\n    null,\r\n    null,\r\n    addedNodes,\r\n    removedNodes,\r\n    previousSibling,\r\n    nextSibling\r\n  );\r\n}\r\n\r\n// https://dom.spec.whatwg.org/#queue-an-attribute-mutation-record\r\nfunction queueAttributeMutationRecord(target, name, namespace, oldValue) {\r\n  queueMutationRecord(\r\n    MUTATION_TYPE.ATTRIBUTES,\r\n    target,\r\n    name,\r\n    namespace,\r\n    oldValue,\r\n    [],\r\n    [],\r\n    null,\r\n    null\r\n  );\r\n}\r\n\r\n// https://dom.spec.whatwg.org/#queue-a-mutation-observer-compound-microtask\r\nfunction queueMutationObserverMicrotask() {\r\n  if (mutationObserverMicrotaskQueueFlag) {\r\n    return;\r\n  }\r\n\r\n  mutationObserverMicrotaskQueueFlag = true;\r\n\r\n  Promise.resolve().then(() => {\r\n    notifyMutationObservers();\r\n  });\r\n}\r\n\r\n// https://dom.spec.whatwg.org/#notify-mutation-observers\r\nfunction notifyMutationObservers() {\r\n  mutationObserverMicrotaskQueueFlag = false;\r\n\r\n  const notifyList = [...activeMutationObservers].sort((a, b) => a._id - b._id);\r\n  activeMutationObservers.clear();\r\n\r\n  const signalList = [...signalSlotList];\r\n  signalSlotList.splice(0, signalSlotList.length);\r\n\r\n  for (const mo of notifyList) {\r\n    const records = [...mo._recordQueue];\r\n    mo._recordQueue = [];\r\n\r\n    for (const node of mo._nodeList) {\r\n      node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\r\n        return registeredObserver.source !== mo;\r\n      });\r\n    }\r\n\r\n    if (records.length > 0) {\r\n      try {\r\n        const moWrapper = idlUtils.wrapperForImpl(mo);\r\n        mo._callback.call(\r\n          moWrapper,\r\n          records.map(idlUtils.wrapperForImpl),\r\n          moWrapper\r\n        );\r\n      } catch (e) {\r\n        const { target } = records[0];\r\n        const window = target._ownerDocument._defaultView;\r\n\r\n        reportException(window, e);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const slot of signalList) {\r\n    const slotChangeEvent = Event.createImpl(\r\n      slot._globalObject,\r\n      [\r\n        \"slotchange\",\r\n        { bubbles: true }\r\n      ],\r\n      { isTrusted: true }\r\n    );\r\n\r\n    slot._dispatch(slotChangeEvent);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  MUTATION_TYPE,\r\n\r\n  queueMutationRecord,\r\n  queueTreeMutationRecord,\r\n  queueAttributeMutationRecord,\r\n\r\n  queueMutationObserverMicrotask,\r\n\r\n  signalSlotList\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}