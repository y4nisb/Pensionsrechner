{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst {\n  nodeRoot,\n  isFollowing,\n  isInclusiveAncestor\n} = require(\"../helpers/node\");\n\n// Returns 0 if equal, +1 for after and -1 for before\n// https://dom.spec.whatwg.org/#concept-range-bp-after\nfunction compareBoundaryPointsPosition(bpA, bpB) {\n  const {\n    node: nodeA,\n    offset: offsetA\n  } = bpA;\n  const {\n    node: nodeB,\n    offset: offsetB\n  } = bpB;\n  if (nodeRoot(nodeA) !== nodeRoot(nodeB)) {\n    throw new Error(`Internal Error: Boundary points should have the same root!`);\n  }\n  if (nodeA === nodeB) {\n    if (offsetA === offsetB) {\n      return 0;\n    } else if (offsetA < offsetB) {\n      return -1;\n    }\n    return 1;\n  }\n  if (isFollowing(nodeA, nodeB)) {\n    return compareBoundaryPointsPosition(bpB, bpA) === -1 ? 1 : -1;\n  }\n  if (isInclusiveAncestor(nodeA, nodeB)) {\n    let child = nodeB;\n    while (domSymbolTree.parent(child) !== nodeA) {\n      child = domSymbolTree.parent(child);\n    }\n    if (domSymbolTree.index(child) < offsetA) {\n      return 1;\n    }\n  }\n  return -1;\n}\nmodule.exports = {\n  compareBoundaryPointsPosition\n};","map":{"version":3,"names":["domSymbolTree","require","nodeRoot","isFollowing","isInclusiveAncestor","compareBoundaryPointsPosition","bpA","bpB","node","nodeA","offset","offsetA","nodeB","offsetB","Error","child","parent","index","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/range/boundary-point.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\r\nconst { nodeRoot, isFollowing, isInclusiveAncestor } = require(\"../helpers/node\");\r\n\r\n// Returns 0 if equal, +1 for after and -1 for before\r\n// https://dom.spec.whatwg.org/#concept-range-bp-after\r\nfunction compareBoundaryPointsPosition(bpA, bpB) {\r\n  const { node: nodeA, offset: offsetA } = bpA;\r\n  const { node: nodeB, offset: offsetB } = bpB;\r\n\r\n  if (nodeRoot(nodeA) !== nodeRoot(nodeB)) {\r\n    throw new Error(`Internal Error: Boundary points should have the same root!`);\r\n  }\r\n\r\n  if (nodeA === nodeB) {\r\n    if (offsetA === offsetB) {\r\n      return 0;\r\n    } else if (offsetA < offsetB) {\r\n      return -1;\r\n    }\r\n\r\n    return 1;\r\n  }\r\n\r\n  if (isFollowing(nodeA, nodeB)) {\r\n    return compareBoundaryPointsPosition(bpB, bpA) === -1 ? 1 : -1;\r\n  }\r\n\r\n  if (isInclusiveAncestor(nodeA, nodeB)) {\r\n    let child = nodeB;\r\n\r\n    while (domSymbolTree.parent(child) !== nodeA) {\r\n      child = domSymbolTree.parent(child);\r\n    }\r\n\r\n    if (domSymbolTree.index(child) < offsetA) {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\nmodule.exports = {\r\n  compareBoundaryPointsPosition\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAc,CAAC,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAClE,MAAM;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAoB,CAAC,GAAGH,OAAO,CAAC,iBAAiB,CAAC;;AAEjF;AACA;AACA,SAASI,6BAA6BA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC/C,MAAM;IAAEC,IAAI,EAAEC,KAAK;IAAEC,MAAM,EAAEC;EAAQ,CAAC,GAAGL,GAAG;EAC5C,MAAM;IAAEE,IAAI,EAAEI,KAAK;IAAEF,MAAM,EAAEG;EAAQ,CAAC,GAAGN,GAAG;EAE5C,IAAIL,QAAQ,CAACO,KAAK,CAAC,KAAKP,QAAQ,CAACU,KAAK,CAAC,EAAE;IACvC,MAAM,IAAIE,KAAK,CAAE,4DAA2D,CAAC;EAC/E;EAEA,IAAIL,KAAK,KAAKG,KAAK,EAAE;IACnB,IAAID,OAAO,KAAKE,OAAO,EAAE;MACvB,OAAO,CAAC;IACV,CAAC,MAAM,IAAIF,OAAO,GAAGE,OAAO,EAAE;MAC5B,OAAO,CAAC,CAAC;IACX;IAEA,OAAO,CAAC;EACV;EAEA,IAAIV,WAAW,CAACM,KAAK,EAAEG,KAAK,CAAC,EAAE;IAC7B,OAAOP,6BAA6B,CAACE,GAAG,EAAED,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAChE;EAEA,IAAIF,mBAAmB,CAACK,KAAK,EAAEG,KAAK,CAAC,EAAE;IACrC,IAAIG,KAAK,GAAGH,KAAK;IAEjB,OAAOZ,aAAa,CAACgB,MAAM,CAACD,KAAK,CAAC,KAAKN,KAAK,EAAE;MAC5CM,KAAK,GAAGf,aAAa,CAACgB,MAAM,CAACD,KAAK,CAAC;IACrC;IAEA,IAAIf,aAAa,CAACiB,KAAK,CAACF,KAAK,CAAC,GAAGJ,OAAO,EAAE;MACxC,OAAO,CAAC;IACV;EACF;EAEA,OAAO,CAAC,CAAC;AACX;AAEAO,MAAM,CAACC,OAAO,GAAG;EACfd;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}