{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\nconst notImplemented = require(\"../../browser/not-implemented.js\");\nconst reportException = require(\"../helpers/runtime-script-errors.js\");\nconst idlUtils = require(\"../generated/utils.js\");\nexports.evaluateJavaScriptURL = (window, urlRecord) => {\n  const urlString = whatwgURL.serializeURL(urlRecord);\n  const scriptSource = whatwgURL.percentDecode(Buffer.from(urlString)).toString();\n  if (window._runScripts === \"dangerously\") {\n    try {\n      return window.eval(scriptSource);\n    } catch (e) {\n      reportException(window, e, urlString);\n    }\n  }\n  return undefined;\n};\n\n// https://html.spec.whatwg.org/#navigating-across-documents\nexports.navigate = (window, newURL, flags) => {\n  // This is NOT a spec-compliant implementation of navigation in any way. It implements a few selective steps that\n  // are nice for jsdom users, regarding hash changes and JavaScript URLs. Full navigation support is being worked on\n  // and will likely require some additional hooks to be implemented.\n  if (!window._document) {\n    return;\n  }\n  const document = idlUtils.implForWrapper(window._document);\n  const currentURL = document._URL;\n  if (!flags.reloadTriggered && urlEquals(currentURL, newURL, {\n    excludeFragments: true\n  })) {\n    if (newURL.fragment !== currentURL.fragment) {\n      navigateToFragment(window, newURL, flags);\n    }\n    return;\n  }\n\n  // NOT IMPLEMENTED: Prompt to unload the active document of browsingContext.\n\n  // NOT IMPLEMENTED: form submission algorithm\n  // const navigationType = 'other';\n\n  // NOT IMPLEMENTED: if resource is a response...\n  if (newURL.scheme === \"javascript\") {\n    setTimeout(() => {\n      const result = exports.evaluateJavaScriptURL(window, newURL);\n      if (typeof result === \"string\") {\n        notImplemented(\"string results from 'javascript:' URLs\", window);\n      }\n    }, 0);\n    return;\n  }\n  navigateFetch(window);\n};\n\n// https://html.spec.whatwg.org/#scroll-to-fragid\nfunction navigateToFragment(window, newURL, flags) {\n  const document = idlUtils.implForWrapper(window._document);\n  window._sessionHistory.clearHistoryTraversalTasks();\n  if (!flags.replacement) {\n    // handling replacement=true here deviates from spec, but matches real browser behaviour\n    // see https://github.com/whatwg/html/issues/2796 for spec bug\n    window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n  }\n  const newEntry = {\n    document,\n    url: newURL\n  };\n  window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n  window._sessionHistory.traverseHistory(newEntry, {\n    nonBlockingEvents: true,\n    replacement: flags.replacement\n  });\n}\n\n// https://html.spec.whatwg.org/#process-a-navigate-fetch\nfunction navigateFetch(window) {\n  // TODO:\n  notImplemented(\"navigation (except hash changes)\", window);\n}\n\n// https://url.spec.whatwg.org/#concept-url-equals\nfunction urlEquals(a, b, flags) {\n  const serializedA = whatwgURL.serializeURL(a, flags.excludeFragments);\n  const serializedB = whatwgURL.serializeURL(b, flags.excludeFragments);\n  return serializedA === serializedB;\n}","map":{"version":3,"names":["whatwgURL","require","notImplemented","reportException","idlUtils","exports","evaluateJavaScriptURL","window","urlRecord","urlString","serializeURL","scriptSource","percentDecode","Buffer","from","toString","_runScripts","eval","e","undefined","navigate","newURL","flags","_document","document","implForWrapper","currentURL","_URL","reloadTriggered","urlEquals","excludeFragments","fragment","navigateToFragment","scheme","setTimeout","result","navigateFetch","_sessionHistory","clearHistoryTraversalTasks","replacement","removeAllEntriesAfterCurrentEntry","newEntry","url","addEntryAfterCurrentEntry","traverseHistory","nonBlockingEvents","a","b","serializedA","serializedB"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/window/navigation.js"],"sourcesContent":["\"use strict\";\r\nconst whatwgURL = require(\"whatwg-url\");\r\nconst notImplemented = require(\"../../browser/not-implemented.js\");\r\nconst reportException = require(\"../helpers/runtime-script-errors.js\");\r\nconst idlUtils = require(\"../generated/utils.js\");\r\n\r\nexports.evaluateJavaScriptURL = (window, urlRecord) => {\r\n  const urlString = whatwgURL.serializeURL(urlRecord);\r\n  const scriptSource = whatwgURL.percentDecode(Buffer.from(urlString)).toString();\r\n  if (window._runScripts === \"dangerously\") {\r\n    try {\r\n      return window.eval(scriptSource);\r\n    } catch (e) {\r\n      reportException(window, e, urlString);\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\n// https://html.spec.whatwg.org/#navigating-across-documents\r\nexports.navigate = (window, newURL, flags) => {\r\n  // This is NOT a spec-compliant implementation of navigation in any way. It implements a few selective steps that\r\n  // are nice for jsdom users, regarding hash changes and JavaScript URLs. Full navigation support is being worked on\r\n  // and will likely require some additional hooks to be implemented.\r\n  if (!window._document) {\r\n    return;\r\n  }\r\n\r\n  const document = idlUtils.implForWrapper(window._document);\r\n  const currentURL = document._URL;\r\n\r\n  if (!flags.reloadTriggered && urlEquals(currentURL, newURL, { excludeFragments: true })) {\r\n    if (newURL.fragment !== currentURL.fragment) {\r\n      navigateToFragment(window, newURL, flags);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // NOT IMPLEMENTED: Prompt to unload the active document of browsingContext.\r\n\r\n  // NOT IMPLEMENTED: form submission algorithm\r\n  // const navigationType = 'other';\r\n\r\n  // NOT IMPLEMENTED: if resource is a response...\r\n  if (newURL.scheme === \"javascript\") {\r\n    setTimeout(() => {\r\n      const result = exports.evaluateJavaScriptURL(window, newURL);\r\n      if (typeof result === \"string\") {\r\n        notImplemented(\"string results from 'javascript:' URLs\", window);\r\n      }\r\n    }, 0);\r\n    return;\r\n  }\r\n  navigateFetch(window);\r\n};\r\n\r\n// https://html.spec.whatwg.org/#scroll-to-fragid\r\nfunction navigateToFragment(window, newURL, flags) {\r\n  const document = idlUtils.implForWrapper(window._document);\r\n\r\n  window._sessionHistory.clearHistoryTraversalTasks();\r\n\r\n  if (!flags.replacement) {\r\n    // handling replacement=true here deviates from spec, but matches real browser behaviour\r\n    // see https://github.com/whatwg/html/issues/2796 for spec bug\r\n    window._sessionHistory.removeAllEntriesAfterCurrentEntry();\r\n  }\r\n  const newEntry = { document, url: newURL };\r\n  window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\r\n  window._sessionHistory.traverseHistory(newEntry, { nonBlockingEvents: true, replacement: flags.replacement });\r\n}\r\n\r\n// https://html.spec.whatwg.org/#process-a-navigate-fetch\r\nfunction navigateFetch(window) {\r\n  // TODO:\r\n  notImplemented(\"navigation (except hash changes)\", window);\r\n}\r\n\r\n// https://url.spec.whatwg.org/#concept-url-equals\r\nfunction urlEquals(a, b, flags) {\r\n  const serializedA = whatwgURL.serializeURL(a, flags.excludeFragments);\r\n  const serializedB = whatwgURL.serializeURL(b, flags.excludeFragments);\r\n  return serializedA === serializedB;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}