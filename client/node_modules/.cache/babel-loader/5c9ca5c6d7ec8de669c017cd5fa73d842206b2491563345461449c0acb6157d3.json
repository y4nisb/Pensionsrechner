{"ast":null,"code":"\"use strict\";\n\nconst iconvLite = require(\"iconv-lite\");\nconst supportedNames = require(\"./supported-names.json\");\nconst labelsToNames = require(\"./labels-to-names.json\");\nconst supportedNamesSet = new Set(supportedNames);\n\n// https://encoding.spec.whatwg.org/#concept-encoding-get\nexports.labelToName = label => {\n  label = String(label).trim().toLowerCase();\n  return labelsToNames[label] || null;\n};\n\n// https://encoding.spec.whatwg.org/#decode\nexports.decode = (buffer, fallbackEncodingName) => {\n  let encoding = fallbackEncodingName;\n  if (!exports.isSupported(encoding)) {\n    throw new RangeError(`\"${encoding}\" is not a supported encoding name`);\n  }\n  const bomEncoding = exports.getBOMEncoding(buffer);\n  if (bomEncoding !== null) {\n    encoding = bomEncoding;\n  }\n\n  // iconv-lite will strip BOMs for us, so no need to do the stuff the spec does\n\n  return iconvLite.decode(buffer, encoding);\n};\n\n// https://github.com/whatwg/html/issues/1910#issuecomment-254017369\nexports.getBOMEncoding = buffer => {\n  if (buffer[0] === 0xFE && buffer[1] === 0xFF) {\n    return \"UTF-16BE\";\n  } else if (buffer[0] === 0xFF && buffer[1] === 0xFE) {\n    return \"UTF-16LE\";\n  } else if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n    return \"UTF-8\";\n  }\n  return null;\n};\nexports.isSupported = name => {\n  return supportedNamesSet.has(String(name));\n};","map":{"version":3,"names":["iconvLite","require","supportedNames","labelsToNames","supportedNamesSet","Set","exports","labelToName","label","String","trim","toLowerCase","decode","buffer","fallbackEncodingName","encoding","isSupported","RangeError","bomEncoding","getBOMEncoding","name","has"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/whatwg-encoding/lib/whatwg-encoding.js"],"sourcesContent":["\"use strict\";\r\nconst iconvLite = require(\"iconv-lite\");\r\nconst supportedNames = require(\"./supported-names.json\");\r\nconst labelsToNames = require(\"./labels-to-names.json\");\r\n\r\nconst supportedNamesSet = new Set(supportedNames);\r\n\r\n// https://encoding.spec.whatwg.org/#concept-encoding-get\r\nexports.labelToName = label => {\r\n  label = String(label).trim().toLowerCase();\r\n\r\n  return labelsToNames[label] || null;\r\n};\r\n\r\n// https://encoding.spec.whatwg.org/#decode\r\nexports.decode = (buffer, fallbackEncodingName) => {\r\n  let encoding = fallbackEncodingName;\r\n  if (!exports.isSupported(encoding)) {\r\n    throw new RangeError(`\"${encoding}\" is not a supported encoding name`);\r\n  }\r\n\r\n  const bomEncoding = exports.getBOMEncoding(buffer);\r\n  if (bomEncoding !== null) {\r\n    encoding = bomEncoding;\r\n  }\r\n\r\n  // iconv-lite will strip BOMs for us, so no need to do the stuff the spec does\r\n\r\n  return iconvLite.decode(buffer, encoding);\r\n};\r\n\r\n// https://github.com/whatwg/html/issues/1910#issuecomment-254017369\r\nexports.getBOMEncoding = buffer => {\r\n  if (buffer[0] === 0xFE && buffer[1] === 0xFF) {\r\n    return \"UTF-16BE\";\r\n  } else if (buffer[0] === 0xFF && buffer[1] === 0xFE) {\r\n    return \"UTF-16LE\";\r\n  } else if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\r\n    return \"UTF-8\";\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexports.isSupported = name => {\r\n  return supportedNamesSet.has(String(name));\r\n};\r\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AACvC,MAAMC,cAAc,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACxD,MAAME,aAAa,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAEvD,MAAMG,iBAAiB,GAAG,IAAIC,GAAG,CAACH,cAAc,CAAC;;AAEjD;AACAI,OAAO,CAACC,WAAW,GAAGC,KAAK,IAAI;EAC7BA,KAAK,GAAGC,MAAM,CAACD,KAAK,CAAC,CAACE,IAAI,EAAE,CAACC,WAAW,EAAE;EAE1C,OAAOR,aAAa,CAACK,KAAK,CAAC,IAAI,IAAI;AACrC,CAAC;;AAED;AACAF,OAAO,CAACM,MAAM,GAAG,CAACC,MAAM,EAAEC,oBAAoB,KAAK;EACjD,IAAIC,QAAQ,GAAGD,oBAAoB;EACnC,IAAI,CAACR,OAAO,CAACU,WAAW,CAACD,QAAQ,CAAC,EAAE;IAClC,MAAM,IAAIE,UAAU,CAAE,IAAGF,QAAS,oCAAmC,CAAC;EACxE;EAEA,MAAMG,WAAW,GAAGZ,OAAO,CAACa,cAAc,CAACN,MAAM,CAAC;EAClD,IAAIK,WAAW,KAAK,IAAI,EAAE;IACxBH,QAAQ,GAAGG,WAAW;EACxB;;EAEA;;EAEA,OAAOlB,SAAS,CAACY,MAAM,CAACC,MAAM,EAAEE,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACAT,OAAO,CAACa,cAAc,GAAGN,MAAM,IAAI;EACjC,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IAC5C,OAAO,UAAU;EACnB,CAAC,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IACnD,OAAO,UAAU;EACnB,CAAC,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IACzE,OAAO,OAAO;EAChB;EAEA,OAAO,IAAI;AACb,CAAC;AAEDP,OAAO,CAACU,WAAW,GAAGI,IAAI,IAAI;EAC5B,OAAOhB,iBAAiB,CAACiB,GAAG,CAACZ,MAAM,CAACW,IAAI,CAAC,CAAC;AAC5C,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}