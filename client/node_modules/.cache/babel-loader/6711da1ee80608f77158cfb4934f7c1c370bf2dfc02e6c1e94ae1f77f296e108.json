{"ast":null,"code":"\"use strict\";\n\nconst {\n  parseIntoDocument\n} = require(\"../../browser/parser\");\nconst Document = require(\"../generated/Document\");\nexports.implementation = class DOMParserImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  }\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\":\n        {\n          return this.createScriptingDisabledDocument(\"html\", contentType, string);\n        }\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\":\n        {\n          try {\n            return this.createScriptingDisabledDocument(\"xml\", contentType, string);\n          } catch (error) {\n            const document = this.createScriptingDisabledDocument(\"xml\", contentType);\n            const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n            element.textContent = error.message;\n            document.appendChild(element);\n            return document;\n          }\n        }\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n  createScriptingDisabledDocument(parsingMode, contentType, string) {\n    const document = Document.createImpl(this._globalObject, [], {\n      options: {\n        parsingMode,\n        encoding: \"UTF-8\",\n        contentType,\n        readyState: \"complete\",\n        scriptingDisabled: true\n        // TODO: somehow set URL to active document's URL\n      }\n    });\n\n    if (string !== undefined) {\n      parseIntoDocument(string, document);\n    }\n    return document;\n  }\n};","map":{"version":3,"names":["parseIntoDocument","require","Document","exports","implementation","DOMParserImpl","constructor","globalObject","_globalObject","parseFromString","string","contentType","String","createScriptingDisabledDocument","error","document","element","createElementNS","textContent","message","appendChild","TypeError","parsingMode","createImpl","options","encoding","readyState","scriptingDisabled","undefined"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/domparsing/DOMParser-impl.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst { parseIntoDocument } = require(\"../../browser/parser\");\r\n\r\nconst Document = require(\"../generated/Document\");\r\n\r\nexports.implementation = class DOMParserImpl {\r\n  constructor(globalObject) {\r\n    this._globalObject = globalObject;\r\n  }\r\n\r\n  parseFromString(string, contentType) {\r\n    switch (String(contentType)) {\r\n      case \"text/html\": {\r\n        return this.createScriptingDisabledDocument(\"html\", contentType, string);\r\n      }\r\n\r\n      case \"text/xml\":\r\n      case \"application/xml\":\r\n      case \"application/xhtml+xml\":\r\n      case \"image/svg+xml\": {\r\n        try {\r\n          return this.createScriptingDisabledDocument(\"xml\", contentType, string);\r\n        } catch (error) {\r\n          const document = this.createScriptingDisabledDocument(\"xml\", contentType);\r\n          const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\r\n\r\n          element.textContent = error.message;\r\n\r\n          document.appendChild(element);\r\n          return document;\r\n        }\r\n      }\r\n\r\n      default:\r\n        throw new TypeError(\"Invalid contentType\");\r\n    }\r\n  }\r\n\r\n  createScriptingDisabledDocument(parsingMode, contentType, string) {\r\n    const document = Document.createImpl(this._globalObject, [], {\r\n      options: {\r\n        parsingMode,\r\n        encoding: \"UTF-8\",\r\n        contentType,\r\n        readyState: \"complete\",\r\n        scriptingDisabled: true\r\n        // TODO: somehow set URL to active document's URL\r\n      }\r\n    });\r\n\r\n    if (string !== undefined) {\r\n      parseIntoDocument(string, document);\r\n    }\r\n\r\n    return document;\r\n  }\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAkB,CAAC,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAE7D,MAAMC,QAAQ,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAEjDE,OAAO,CAACC,cAAc,GAAG,MAAMC,aAAa,CAAC;EAC3CC,WAAWA,CAACC,YAAY,EAAE;IACxB,IAAI,CAACC,aAAa,GAAGD,YAAY;EACnC;EAEAE,eAAeA,CAACC,MAAM,EAAEC,WAAW,EAAE;IACnC,QAAQC,MAAM,CAACD,WAAW,CAAC;MACzB,KAAK,WAAW;QAAE;UAChB,OAAO,IAAI,CAACE,+BAA+B,CAAC,MAAM,EAAEF,WAAW,EAAED,MAAM,CAAC;QAC1E;MAEA,KAAK,UAAU;MACf,KAAK,iBAAiB;MACtB,KAAK,uBAAuB;MAC5B,KAAK,eAAe;QAAE;UACpB,IAAI;YACF,OAAO,IAAI,CAACG,+BAA+B,CAAC,KAAK,EAAEF,WAAW,EAAED,MAAM,CAAC;UACzE,CAAC,CAAC,OAAOI,KAAK,EAAE;YACd,MAAMC,QAAQ,GAAG,IAAI,CAACF,+BAA+B,CAAC,KAAK,EAAEF,WAAW,CAAC;YACzE,MAAMK,OAAO,GAAGD,QAAQ,CAACE,eAAe,CAAC,sDAAsD,EAAE,aAAa,CAAC;YAE/GD,OAAO,CAACE,WAAW,GAAGJ,KAAK,CAACK,OAAO;YAEnCJ,QAAQ,CAACK,WAAW,CAACJ,OAAO,CAAC;YAC7B,OAAOD,QAAQ;UACjB;QACF;MAEA;QACE,MAAM,IAAIM,SAAS,CAAC,qBAAqB,CAAC;IAAC;EAEjD;EAEAR,+BAA+BA,CAACS,WAAW,EAAEX,WAAW,EAAED,MAAM,EAAE;IAChE,MAAMK,QAAQ,GAAGb,QAAQ,CAACqB,UAAU,CAAC,IAAI,CAACf,aAAa,EAAE,EAAE,EAAE;MAC3DgB,OAAO,EAAE;QACPF,WAAW;QACXG,QAAQ,EAAE,OAAO;QACjBd,WAAW;QACXe,UAAU,EAAE,UAAU;QACtBC,iBAAiB,EAAE;QACnB;MACF;IACF,CAAC,CAAC;;IAEF,IAAIjB,MAAM,KAAKkB,SAAS,EAAE;MACxB5B,iBAAiB,CAACU,MAAM,EAAEK,QAAQ,CAAC;IACrC;IAEA,OAAOA,QAAQ;EACjB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}