{"ast":null,"code":"\"use strict\";\n\nconst SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\nconst idlUtils = require(\"../generated/utils\");\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst NODE_TYPE = require(\"../node-type\");\nconst {\n  mixin\n} = require(\"../../utils\");\n\n// https://dom.spec.whatwg.org/#text\nclass TextImpl extends CharacterDataImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, {\n      data: args[0],\n      ownerDocument: idlUtils.implForWrapper(globalObject._document),\n      ...privateData\n    });\n    this._initSlotableMixin();\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-text-splittext\n  // https://dom.spec.whatwg.org/#concept-text-split\n  splitText(offset) {\n    const {\n      length\n    } = this;\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n    const newNode = this._ownerDocument.createTextNode(newData);\n    const parent = domSymbolTree.parent(this);\n    if (parent !== null) {\n      parent._insert(newNode, this.nextSibling);\n      for (const range of this._referencedRanges) {\n        const {\n          _start,\n          _end\n        } = range;\n        if (_start.node === this && _start.offset > offset) {\n          range._setLiveRangeStart(newNode, _start.offset - offset);\n        }\n        if (_end.node === this && _end.offset > offset) {\n          range._setLiveRangeEnd(newNode, _end.offset - offset);\n        }\n      }\n      const nodeIndex = domSymbolTree.index(this);\n      for (const range of parent._referencedRanges) {\n        const {\n          _start,\n          _end\n        } = range;\n        if (_start.node === parent && _start.offset === nodeIndex + 1) {\n          range._setLiveRangeStart(parent, _start.offset + 1);\n        }\n        if (_end.node === parent && _end.offset === nodeIndex + 1) {\n          range._setLiveRangeEnd(parent, _end.offset + 1);\n        }\n      }\n    }\n    this.replaceData(offset, count, \"\");\n    return newNode;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-text-wholetext\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  }\n}\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\nmodule.exports = {\n  implementation: TextImpl\n};","map":{"version":3,"names":["SlotableMixinImpl","require","implementation","CharacterDataImpl","idlUtils","domSymbolTree","DOMException","NODE_TYPE","mixin","TextImpl","constructor","globalObject","args","privateData","data","ownerDocument","implForWrapper","_document","_initSlotableMixin","nodeType","TEXT_NODE","splitText","offset","length","create","_globalObject","count","newData","substringData","newNode","_ownerDocument","createTextNode","parent","_insert","nextSibling","range","_referencedRanges","_start","_end","node","_setLiveRangeStart","_setLiveRangeEnd","nodeIndex","index","replaceData","wholeText","textContent","next","current","previousSibling","prototype","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/nodes/Text-impl.js"],"sourcesContent":["\"use strict\";\r\nconst SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\r\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\r\nconst idlUtils = require(\"../generated/utils\");\r\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\r\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\r\nconst NODE_TYPE = require(\"../node-type\");\r\nconst { mixin } = require(\"../../utils\");\r\n\r\n// https://dom.spec.whatwg.org/#text\r\nclass TextImpl extends CharacterDataImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    super(globalObject, args, {\r\n      data: args[0],\r\n      ownerDocument: idlUtils.implForWrapper(globalObject._document),\r\n      ...privateData\r\n    });\r\n\r\n    this._initSlotableMixin();\r\n\r\n    this.nodeType = NODE_TYPE.TEXT_NODE;\r\n  }\r\n\r\n  // https://dom.spec.whatwg.org/#dom-text-splittext\r\n  // https://dom.spec.whatwg.org/#concept-text-split\r\n  splitText(offset) {\r\n    const { length } = this;\r\n\r\n    if (offset > length) {\r\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\r\n    }\r\n\r\n    const count = length - offset;\r\n    const newData = this.substringData(offset, count);\r\n\r\n    const newNode = this._ownerDocument.createTextNode(newData);\r\n\r\n    const parent = domSymbolTree.parent(this);\r\n\r\n    if (parent !== null) {\r\n      parent._insert(newNode, this.nextSibling);\r\n\r\n      for (const range of this._referencedRanges) {\r\n        const { _start, _end } = range;\r\n\r\n        if (_start.node === this && _start.offset > offset) {\r\n          range._setLiveRangeStart(newNode, _start.offset - offset);\r\n        }\r\n\r\n        if (_end.node === this && _end.offset > offset) {\r\n          range._setLiveRangeEnd(newNode, _end.offset - offset);\r\n        }\r\n      }\r\n\r\n      const nodeIndex = domSymbolTree.index(this);\r\n      for (const range of parent._referencedRanges) {\r\n        const { _start, _end } = range;\r\n\r\n        if (_start.node === parent && _start.offset === nodeIndex + 1) {\r\n          range._setLiveRangeStart(parent, _start.offset + 1);\r\n        }\r\n\r\n        if (_end.node === parent && _end.offset === nodeIndex + 1) {\r\n          range._setLiveRangeEnd(parent, _end.offset + 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.replaceData(offset, count, \"\");\r\n\r\n    return newNode;\r\n  }\r\n\r\n  // https://dom.spec.whatwg.org/#dom-text-wholetext\r\n  get wholeText() {\r\n    let wholeText = this.textContent;\r\n    let next;\r\n    let current = this;\r\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\r\n      wholeText = next.textContent + wholeText;\r\n      current = next;\r\n    }\r\n    current = this;\r\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\r\n      wholeText += next.textContent;\r\n      current = next;\r\n    }\r\n    return wholeText;\r\n  }\r\n}\r\n\r\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\r\n\r\nmodule.exports = {\r\n  implementation: TextImpl\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}