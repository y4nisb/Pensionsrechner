{"ast":null,"code":"\"use strict\";\n\nconst cssom = require(\"cssom\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst whatwgURL = require(\"whatwg-url\");\n\n// TODO: this should really implement https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\n// It (and the things it calls) is nowhere close right now.\nexports.fetchStylesheet = (elementImpl, urlString) => {\n  const parsedURL = whatwgURL.parseURL(urlString);\n  return fetchStylesheetInternal(elementImpl, urlString, parsedURL);\n};\n\n// https://drafts.csswg.org/cssom/#remove-a-css-style-sheet\nexports.removeStylesheet = (sheet, elementImpl) => {\n  const {\n    styleSheets\n  } = elementImpl._ownerDocument;\n  styleSheets._remove(sheet);\n\n  // Remove the association explicitly; in the spec it's implicit so this step doesn't exist.\n  elementImpl.sheet = null;\n\n  // TODO: \"Set the CSS style sheet’s parent CSS style sheet, owner node and owner CSS rule to null.\"\n  // Probably when we have a real CSSOM implementation.\n};\n\n// https://drafts.csswg.org/cssom/#create-a-css-style-sheet kinda:\n// - Parsing failures are not handled gracefully like they should be\n// - The import rules stuff seems out of place, and probably should affect the load event...\nexports.createStylesheet = (sheetText, elementImpl, baseURL) => {\n  let sheet;\n  try {\n    sheet = cssom.parse(sheetText);\n  } catch (e) {\n    if (elementImpl._ownerDocument._defaultView) {\n      const error = new Error(\"Could not parse CSS stylesheet\");\n      error.detail = sheetText;\n      error.type = \"css parsing\";\n      elementImpl._ownerDocument._defaultView._virtualConsole.emit(\"jsdomError\", error);\n    }\n    return;\n  }\n  scanForImportRules(elementImpl, sheet.cssRules, baseURL);\n  addStylesheet(sheet, elementImpl);\n};\n\n// https://drafts.csswg.org/cssom/#add-a-css-style-sheet\nfunction addStylesheet(sheet, elementImpl) {\n  elementImpl._ownerDocument.styleSheets._add(sheet);\n\n  // Set the association explicitly; in the spec it's implicit.\n  elementImpl.sheet = sheet;\n\n  // TODO: title and disabled stuff\n}\n\nfunction fetchStylesheetInternal(elementImpl, urlString, parsedURL) {\n  const document = elementImpl._ownerDocument;\n  let defaultEncoding = document._encoding;\n  const resourceLoader = document._resourceLoader;\n  if (elementImpl.localName === \"link\" && elementImpl.hasAttributeNS(null, \"charset\")) {\n    defaultEncoding = whatwgEncoding.labelToName(elementImpl.getAttributeNS(null, \"charset\"));\n  }\n  function onStylesheetLoad(data) {\n    const css = whatwgEncoding.decode(data, defaultEncoding);\n\n    // TODO: MIME type checking?\n    if (elementImpl.sheet) {\n      exports.removeStylesheet(elementImpl.sheet, elementImpl);\n    }\n    exports.createStylesheet(css, elementImpl, parsedURL);\n  }\n  resourceLoader.fetch(urlString, {\n    element: elementImpl,\n    onLoad: onStylesheetLoad\n  });\n}\n\n// TODO this is actually really messed up and overwrites the sheet on elementImpl\n// Tracking in https://github.com/jsdom/jsdom/issues/2124\nfunction scanForImportRules(elementImpl, cssRules, baseURL) {\n  if (!cssRules) {\n    return;\n  }\n  for (let i = 0; i < cssRules.length; ++i) {\n    if (cssRules[i].cssRules) {\n      // @media rule: keep searching inside it.\n      scanForImportRules(elementImpl, cssRules[i].cssRules, baseURL);\n    } else if (cssRules[i].href) {\n      // @import rule: fetch the resource and evaluate it.\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\n      //     If loading of the style sheet fails its cssRules list is simply\n      //     empty. I.e. an @import rule always has an associated style sheet.\n      const parsed = whatwgURL.parseURL(cssRules[i].href, {\n        baseURL\n      });\n      if (parsed === null) {\n        const window = elementImpl._ownerDocument._defaultView;\n        if (window) {\n          const error = new Error(`Could not parse CSS @import URL ${cssRules[i].href} relative to base URL ` + `\"${whatwgURL.serializeURL(baseURL)}\"`);\n          error.type = \"css @import URL parsing\";\n          window._virtualConsole.emit(\"jsdomError\", error);\n        }\n      } else {\n        fetchStylesheetInternal(elementImpl, whatwgURL.serializeURL(parsed), parsed);\n      }\n    }\n  }\n}","map":{"version":3,"names":["cssom","require","whatwgEncoding","whatwgURL","exports","fetchStylesheet","elementImpl","urlString","parsedURL","parseURL","fetchStylesheetInternal","removeStylesheet","sheet","styleSheets","_ownerDocument","_remove","createStylesheet","sheetText","baseURL","parse","e","_defaultView","error","Error","detail","type","_virtualConsole","emit","scanForImportRules","cssRules","addStylesheet","_add","document","defaultEncoding","_encoding","resourceLoader","_resourceLoader","localName","hasAttributeNS","labelToName","getAttributeNS","onStylesheetLoad","data","css","decode","fetch","element","onLoad","i","length","href","parsed","window","serializeURL"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/helpers/stylesheets.js"],"sourcesContent":["\"use strict\";\r\nconst cssom = require(\"cssom\");\r\nconst whatwgEncoding = require(\"whatwg-encoding\");\r\nconst whatwgURL = require(\"whatwg-url\");\r\n\r\n// TODO: this should really implement https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\r\n// It (and the things it calls) is nowhere close right now.\r\nexports.fetchStylesheet = (elementImpl, urlString) => {\r\n  const parsedURL = whatwgURL.parseURL(urlString);\r\n  return fetchStylesheetInternal(elementImpl, urlString, parsedURL);\r\n};\r\n\r\n// https://drafts.csswg.org/cssom/#remove-a-css-style-sheet\r\nexports.removeStylesheet = (sheet, elementImpl) => {\r\n  const { styleSheets } = elementImpl._ownerDocument;\r\n  styleSheets._remove(sheet);\r\n\r\n  // Remove the association explicitly; in the spec it's implicit so this step doesn't exist.\r\n  elementImpl.sheet = null;\r\n\r\n  // TODO: \"Set the CSS style sheet’s parent CSS style sheet, owner node and owner CSS rule to null.\"\r\n  // Probably when we have a real CSSOM implementation.\r\n};\r\n\r\n// https://drafts.csswg.org/cssom/#create-a-css-style-sheet kinda:\r\n// - Parsing failures are not handled gracefully like they should be\r\n// - The import rules stuff seems out of place, and probably should affect the load event...\r\nexports.createStylesheet = (sheetText, elementImpl, baseURL) => {\r\n  let sheet;\r\n  try {\r\n    sheet = cssom.parse(sheetText);\r\n  } catch (e) {\r\n    if (elementImpl._ownerDocument._defaultView) {\r\n      const error = new Error(\"Could not parse CSS stylesheet\");\r\n      error.detail = sheetText;\r\n      error.type = \"css parsing\";\r\n\r\n      elementImpl._ownerDocument._defaultView._virtualConsole.emit(\"jsdomError\", error);\r\n    }\r\n    return;\r\n  }\r\n\r\n  scanForImportRules(elementImpl, sheet.cssRules, baseURL);\r\n\r\n  addStylesheet(sheet, elementImpl);\r\n};\r\n\r\n// https://drafts.csswg.org/cssom/#add-a-css-style-sheet\r\nfunction addStylesheet(sheet, elementImpl) {\r\n  elementImpl._ownerDocument.styleSheets._add(sheet);\r\n\r\n  // Set the association explicitly; in the spec it's implicit.\r\n  elementImpl.sheet = sheet;\r\n\r\n  // TODO: title and disabled stuff\r\n}\r\n\r\nfunction fetchStylesheetInternal(elementImpl, urlString, parsedURL) {\r\n  const document = elementImpl._ownerDocument;\r\n  let defaultEncoding = document._encoding;\r\n  const resourceLoader = document._resourceLoader;\r\n\r\n  if (elementImpl.localName === \"link\" && elementImpl.hasAttributeNS(null, \"charset\")) {\r\n    defaultEncoding = whatwgEncoding.labelToName(elementImpl.getAttributeNS(null, \"charset\"));\r\n  }\r\n\r\n  function onStylesheetLoad(data) {\r\n    const css = whatwgEncoding.decode(data, defaultEncoding);\r\n\r\n    // TODO: MIME type checking?\r\n    if (elementImpl.sheet) {\r\n      exports.removeStylesheet(elementImpl.sheet, elementImpl);\r\n    }\r\n    exports.createStylesheet(css, elementImpl, parsedURL);\r\n  }\r\n\r\n  resourceLoader.fetch(urlString, {\r\n    element: elementImpl,\r\n    onLoad: onStylesheetLoad\r\n  });\r\n}\r\n\r\n// TODO this is actually really messed up and overwrites the sheet on elementImpl\r\n// Tracking in https://github.com/jsdom/jsdom/issues/2124\r\nfunction scanForImportRules(elementImpl, cssRules, baseURL) {\r\n  if (!cssRules) {\r\n    return;\r\n  }\r\n\r\n  for (let i = 0; i < cssRules.length; ++i) {\r\n    if (cssRules[i].cssRules) {\r\n      // @media rule: keep searching inside it.\r\n      scanForImportRules(elementImpl, cssRules[i].cssRules, baseURL);\r\n    } else if (cssRules[i].href) {\r\n      // @import rule: fetch the resource and evaluate it.\r\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\r\n      //     If loading of the style sheet fails its cssRules list is simply\r\n      //     empty. I.e. an @import rule always has an associated style sheet.\r\n      const parsed = whatwgURL.parseURL(cssRules[i].href, { baseURL });\r\n      if (parsed === null) {\r\n        const window = elementImpl._ownerDocument._defaultView;\r\n        if (window) {\r\n          const error = new Error(`Could not parse CSS @import URL ${cssRules[i].href} relative to base URL ` +\r\n                                  `\"${whatwgURL.serializeURL(baseURL)}\"`);\r\n          error.type = \"css @import URL parsing\";\r\n          window._virtualConsole.emit(\"jsdomError\", error);\r\n        }\r\n      } else {\r\n        fetchStylesheetInternal(elementImpl, whatwgURL.serializeURL(parsed), parsed);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}