{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst idlUtils = require(\"../generated/utils.js\");\nconst ValidityState = require(\"../generated/ValidityState\");\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst {\n  mixin\n} = require(\"../../utils\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst {\n  getLabelsForLabelable,\n  formOwner,\n  isDisabled\n} = require(\"../helpers/form-controls\");\nconst {\n  parseNonNegativeInteger\n} = require(\"../helpers/strings\");\nclass HTMLSelectElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._options = HTMLOptionsCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => {\n        // Customized domSymbolTree.treeToArray() clone.\n        const array = [];\n        for (const child of domSymbolTree.childrenIterator(this)) {\n          if (child._localName === \"option\") {\n            array.push(child);\n          } else if (child._localName === \"optgroup\") {\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\n              if (childOfGroup._localName === \"option\") {\n                array.push(childOfGroup);\n              }\n            }\n          }\n        }\n        return array;\n      }\n    });\n    this._selectedOptions = null; // lazy\n\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n  _formReset() {\n    for (const option of this.options) {\n      option._selectedness = option.hasAttributeNS(null, \"selected\");\n      option._dirtyness = false;\n    }\n    this._askedForAReset();\n  }\n  _askedForAReset() {\n    if (this.hasAttributeNS(null, \"multiple\")) {\n      return;\n    }\n    const selected = this.options.filter(opt => opt._selectedness);\n    const size = this._displaySize;\n    if (size === 1 && !selected.length) {\n      // select the first option that is not disabled\n      for (const option of this.options) {\n        let disabled = option.hasAttributeNS(null, \"disabled\");\n        const parentNode = domSymbolTree.parent(option);\n        if (parentNode && parentNode.nodeName.toUpperCase() === \"OPTGROUP\" && parentNode.hasAttributeNS(null, \"disabled\")) {\n          disabled = true;\n        }\n        if (!disabled) {\n          // (do not set dirty)\n          option._selectedness = true;\n          break;\n        }\n      }\n    } else if (selected.length >= 2) {\n      // select the last selected option\n      selected.forEach((option, index) => {\n        option._selectedness = index === selected.length - 1;\n      });\n    }\n  }\n  _descendantAdded(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n    super._descendantAdded(parent, child);\n  }\n  _descendantRemoved(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n    super._descendantRemoved(parent, child);\n  }\n  _attrModified(name, value, oldValue) {\n    if (name === \"multiple\" || name === \"size\") {\n      this._askedForAReset();\n    }\n    super._attrModified(name, value, oldValue);\n  }\n  get _displaySize() {\n    if (this.hasAttributeNS(null, \"size\")) {\n      const size = parseNonNegativeInteger(this.getAttributeNS(null, \"size\"));\n      if (size !== null) {\n        return size;\n      }\n    }\n    return this.hasAttributeNS(null, \"multiple\") ? 4 : 1;\n  }\n  get _mutable() {\n    return !isDisabled(this);\n  }\n  get options() {\n    return this._options;\n  }\n  get selectedOptions() {\n    return HTMLCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => domSymbolTree.treeToArray(this, {\n        filter: node => node._localName === \"option\" && node._selectedness === true\n      })\n    });\n  }\n  get selectedIndex() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options.item(i)._selectedness) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  set selectedIndex(index) {\n    for (let i = 0; i < this.options.length; i++) {\n      this.options.item(i)._selectedness = false;\n    }\n    const selectedOption = this.options.item(index);\n    if (selectedOption) {\n      selectedOption._selectedness = true;\n      selectedOption._dirtyness = true;\n    }\n  }\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n  get value() {\n    for (const option of this.options) {\n      if (option._selectedness) {\n        return option.value;\n      }\n    }\n    return \"\";\n  }\n  set value(val) {\n    for (const option of this.options) {\n      if (option.value === val) {\n        option._selectedness = true;\n        option._dirtyness = true;\n      } else {\n        option._selectedness = false;\n      }\n      option._modified();\n    }\n  }\n  get form() {\n    return formOwner(this);\n  }\n  get type() {\n    return this.hasAttributeNS(null, \"multiple\") ? \"select-multiple\" : \"select-one\";\n  }\n  get [idlUtils.supportedPropertyIndices]() {\n    return this.options[idlUtils.supportedPropertyIndices];\n  }\n  get length() {\n    return this.options.length;\n  }\n  set length(value) {\n    this.options.length = value;\n  }\n  item(index) {\n    return this.options.item(index);\n  }\n  namedItem(name) {\n    return this.options.namedItem(name);\n  }\n  [idlUtils.indexedSetNew](index, value) {\n    return this.options[idlUtils.indexedSetNew](index, value);\n  }\n  [idlUtils.indexedSetExisting](index, value) {\n    return this.options[idlUtils.indexedSetExisting](index, value);\n  }\n  add(opt, before) {\n    this.options.add(opt, before);\n  }\n  remove(index) {\n    if (arguments.length > 0) {\n      index = conversions.long(index, {\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n      });\n      this.options.remove(index);\n    } else {\n      super.remove();\n    }\n  }\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttributeNS(null, \"readonly\");\n  }\n\n  // Constraint validation: If the element has its required attribute specified,\n  // and either none of the option elements in the select element's list of options\n  // have their selectedness set to true, or the only option element in the select\n  // element's list of options with its selectedness set to true is the placeholder\n  // label option, then the element is suffering from being missing.\n  get validity() {\n    if (!this._validity) {\n      const state = {\n        valueMissing: () => {\n          if (!this.hasAttributeNS(null, \"required\")) {\n            return false;\n          }\n          const selectedOptionIndex = this.selectedIndex;\n          return selectedOptionIndex < 0 || selectedOptionIndex === 0 && this._hasPlaceholderOption;\n        }\n      };\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n    return this._validity;\n  }\n\n  // If a select element has a required attribute specified, does not have a multiple attribute\n  // specified, and has a display size of 1; and if the value of the first option element in the\n  // select element's list of options (if any) is the empty string, and that option element's parent\n  // node is the select element(and not an optgroup element), then that option is the select\n  // element's placeholder label option.\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n  get _hasPlaceholderOption() {\n    return this.hasAttributeNS(null, \"required\") && !this.hasAttributeNS(null, \"multiple\") && this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" && this.options.item(0).parentNode._localName !== \"optgroup\";\n  }\n}\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};","map":{"version":3,"names":["conversions","require","idlUtils","ValidityState","DefaultConstraintValidationImpl","implementation","mixin","HTMLElementImpl","NODE_TYPE","HTMLCollection","HTMLOptionsCollection","domSymbolTree","getLabelsForLabelable","formOwner","isDisabled","parseNonNegativeInteger","HTMLSelectElementImpl","constructor","globalObject","args","privateData","_options","createImpl","_globalObject","element","query","array","child","childrenIterator","_localName","push","childOfGroup","_selectedOptions","_customValidityErrorMessage","_labels","_formReset","option","options","_selectedness","hasAttributeNS","_dirtyness","_askedForAReset","selected","filter","opt","size","_displaySize","length","disabled","parentNode","parent","nodeName","toUpperCase","forEach","index","_descendantAdded","nodeType","ELEMENT_NODE","_descendantRemoved","_attrModified","name","value","oldValue","getAttributeNS","_mutable","selectedOptions","treeToArray","node","selectedIndex","i","item","selectedOption","labels","val","_modified","form","type","supportedPropertyIndices","namedItem","indexedSetNew","indexedSetExisting","add","before","remove","arguments","long","context","_barredFromConstraintValidationSpecialization","validity","_validity","state","valueMissing","selectedOptionIndex","_hasPlaceholderOption","prototype","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSelectElement-impl.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst conversions = require(\"webidl-conversions\");\r\n\r\nconst idlUtils = require(\"../generated/utils.js\");\r\nconst ValidityState = require(\"../generated/ValidityState\");\r\nconst DefaultConstraintValidationImpl =\r\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\r\nconst { mixin } = require(\"../../utils\");\r\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\r\nconst NODE_TYPE = require(\"../node-type\");\r\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\r\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\r\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\r\nconst { getLabelsForLabelable, formOwner, isDisabled } = require(\"../helpers/form-controls\");\r\nconst { parseNonNegativeInteger } = require(\"../helpers/strings\");\r\n\r\nclass HTMLSelectElementImpl extends HTMLElementImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    super(globalObject, args, privateData);\r\n    this._options = HTMLOptionsCollection.createImpl(this._globalObject, [], {\r\n      element: this,\r\n      query: () => {\r\n        // Customized domSymbolTree.treeToArray() clone.\r\n        const array = [];\r\n        for (const child of domSymbolTree.childrenIterator(this)) {\r\n          if (child._localName === \"option\") {\r\n            array.push(child);\r\n          } else if (child._localName === \"optgroup\") {\r\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\r\n              if (childOfGroup._localName === \"option\") {\r\n                array.push(childOfGroup);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return array;\r\n      }\r\n    });\r\n    this._selectedOptions = null; // lazy\r\n\r\n    this._customValidityErrorMessage = \"\";\r\n\r\n    this._labels = null;\r\n  }\r\n\r\n  _formReset() {\r\n    for (const option of this.options) {\r\n      option._selectedness = option.hasAttributeNS(null, \"selected\");\r\n      option._dirtyness = false;\r\n    }\r\n    this._askedForAReset();\r\n  }\r\n\r\n  _askedForAReset() {\r\n    if (this.hasAttributeNS(null, \"multiple\")) {\r\n      return;\r\n    }\r\n\r\n    const selected = this.options.filter(opt => opt._selectedness);\r\n\r\n    const size = this._displaySize;\r\n    if (size === 1 && !selected.length) {\r\n      // select the first option that is not disabled\r\n      for (const option of this.options) {\r\n        let disabled = option.hasAttributeNS(null, \"disabled\");\r\n        const parentNode = domSymbolTree.parent(option);\r\n        if (parentNode &&\r\n          parentNode.nodeName.toUpperCase() === \"OPTGROUP\" &&\r\n          parentNode.hasAttributeNS(null, \"disabled\")) {\r\n          disabled = true;\r\n        }\r\n\r\n        if (!disabled) {\r\n          // (do not set dirty)\r\n          option._selectedness = true;\r\n          break;\r\n        }\r\n      }\r\n    } else if (selected.length >= 2) {\r\n      // select the last selected option\r\n      selected.forEach((option, index) => {\r\n        option._selectedness = index === selected.length - 1;\r\n      });\r\n    }\r\n  }\r\n\r\n  _descendantAdded(parent, child) {\r\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\r\n      this._askedForAReset();\r\n    }\r\n\r\n    super._descendantAdded(parent, child);\r\n  }\r\n\r\n  _descendantRemoved(parent, child) {\r\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\r\n      this._askedForAReset();\r\n    }\r\n\r\n    super._descendantRemoved(parent, child);\r\n  }\r\n\r\n  _attrModified(name, value, oldValue) {\r\n    if (name === \"multiple\" || name === \"size\") {\r\n      this._askedForAReset();\r\n    }\r\n    super._attrModified(name, value, oldValue);\r\n  }\r\n\r\n  get _displaySize() {\r\n    if (this.hasAttributeNS(null, \"size\")) {\r\n      const size = parseNonNegativeInteger(this.getAttributeNS(null, \"size\"));\r\n      if (size !== null) {\r\n        return size;\r\n      }\r\n    }\r\n    return this.hasAttributeNS(null, \"multiple\") ? 4 : 1;\r\n  }\r\n\r\n  get _mutable() {\r\n    return !isDisabled(this);\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  get selectedOptions() {\r\n    return HTMLCollection.createImpl(this._globalObject, [], {\r\n      element: this,\r\n      query: () => domSymbolTree.treeToArray(this, {\r\n        filter: node => node._localName === \"option\" && node._selectedness === true\r\n      })\r\n    });\r\n  }\r\n\r\n  get selectedIndex() {\r\n    for (let i = 0; i < this.options.length; i++) {\r\n      if (this.options.item(i)._selectedness) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  set selectedIndex(index) {\r\n    for (let i = 0; i < this.options.length; i++) {\r\n      this.options.item(i)._selectedness = false;\r\n    }\r\n\r\n    const selectedOption = this.options.item(index);\r\n    if (selectedOption) {\r\n      selectedOption._selectedness = true;\r\n      selectedOption._dirtyness = true;\r\n    }\r\n  }\r\n\r\n  get labels() {\r\n    return getLabelsForLabelable(this);\r\n  }\r\n\r\n  get value() {\r\n    for (const option of this.options) {\r\n      if (option._selectedness) {\r\n        return option.value;\r\n      }\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  set value(val) {\r\n    for (const option of this.options) {\r\n      if (option.value === val) {\r\n        option._selectedness = true;\r\n        option._dirtyness = true;\r\n      } else {\r\n        option._selectedness = false;\r\n      }\r\n\r\n      option._modified();\r\n    }\r\n  }\r\n\r\n  get form() {\r\n    return formOwner(this);\r\n  }\r\n\r\n  get type() {\r\n    return this.hasAttributeNS(null, \"multiple\") ? \"select-multiple\" : \"select-one\";\r\n  }\r\n\r\n  get [idlUtils.supportedPropertyIndices]() {\r\n    return this.options[idlUtils.supportedPropertyIndices];\r\n  }\r\n\r\n  get length() {\r\n    return this.options.length;\r\n  }\r\n\r\n  set length(value) {\r\n    this.options.length = value;\r\n  }\r\n\r\n  item(index) {\r\n    return this.options.item(index);\r\n  }\r\n\r\n  namedItem(name) {\r\n    return this.options.namedItem(name);\r\n  }\r\n\r\n  [idlUtils.indexedSetNew](index, value) {\r\n    return this.options[idlUtils.indexedSetNew](index, value);\r\n  }\r\n\r\n  [idlUtils.indexedSetExisting](index, value) {\r\n    return this.options[idlUtils.indexedSetExisting](index, value);\r\n  }\r\n\r\n  add(opt, before) {\r\n    this.options.add(opt, before);\r\n  }\r\n\r\n  remove(index) {\r\n    if (arguments.length > 0) {\r\n      index = conversions.long(index, {\r\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\r\n      });\r\n      this.options.remove(index);\r\n    } else {\r\n      super.remove();\r\n    }\r\n  }\r\n\r\n  _barredFromConstraintValidationSpecialization() {\r\n    return this.hasAttributeNS(null, \"readonly\");\r\n  }\r\n\r\n  // Constraint validation: If the element has its required attribute specified,\r\n  // and either none of the option elements in the select element's list of options\r\n  // have their selectedness set to true, or the only option element in the select\r\n  // element's list of options with its selectedness set to true is the placeholder\r\n  // label option, then the element is suffering from being missing.\r\n  get validity() {\r\n    if (!this._validity) {\r\n      const state = {\r\n        valueMissing: () => {\r\n          if (!this.hasAttributeNS(null, \"required\")) {\r\n            return false;\r\n          }\r\n          const selectedOptionIndex = this.selectedIndex;\r\n          return selectedOptionIndex < 0 || (selectedOptionIndex === 0 && this._hasPlaceholderOption);\r\n        }\r\n      };\r\n\r\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\r\n        element: this,\r\n        state\r\n      });\r\n    }\r\n    return this._validity;\r\n  }\r\n\r\n  // If a select element has a required attribute specified, does not have a multiple attribute\r\n  // specified, and has a display size of 1; and if the value of the first option element in the\r\n  // select element's list of options (if any) is the empty string, and that option element's parent\r\n  // node is the select element(and not an optgroup element), then that option is the select\r\n  // element's placeholder label option.\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\r\n  get _hasPlaceholderOption() {\r\n    return this.hasAttributeNS(null, \"required\") && !this.hasAttributeNS(null, \"multiple\") &&\r\n      this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" &&\r\n      this.options.item(0).parentNode._localName !== \"optgroup\";\r\n  }\r\n}\r\n\r\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\r\n\r\nmodule.exports = {\r\n  implementation: HTMLSelectElementImpl\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}