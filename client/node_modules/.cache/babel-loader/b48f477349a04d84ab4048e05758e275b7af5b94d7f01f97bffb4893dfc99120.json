{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\nconst {\n  implForWrapper\n} = require(\"../generated/utils\");\nexports.documentBaseURL = document => {\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#document-base-url\n\n  const firstBase = document.querySelector(\"base[href]\");\n  const fallbackBaseURL = exports.fallbackBaseURL(document);\n  if (firstBase === null) {\n    return fallbackBaseURL;\n  }\n  return frozenBaseURL(firstBase, fallbackBaseURL);\n};\nexports.documentBaseURLSerialized = document => {\n  return whatwgURL.serializeURL(exports.documentBaseURL(document));\n};\nexports.fallbackBaseURL = document => {\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#fallback-base-url\n\n  // Unimplemented: <iframe srcdoc>\n\n  if (document.URL === \"about:blank\" && document._defaultView && document._defaultView._parent !== document._defaultView) {\n    const parentDocument = implForWrapper(document._defaultView._parent._document);\n    return exports.documentBaseURL(parentDocument);\n  }\n  return document._URL;\n};\nexports.parseURLToResultingURLRecord = (url, document) => {\n  // https://html.spec.whatwg.org/#resolve-a-url\n\n  // Encoding stuff ignored; always UTF-8 for us, for now.\n\n  const baseURL = exports.documentBaseURL(document);\n  return whatwgURL.parseURL(url, {\n    baseURL\n  });\n  // This returns the resulting URL record; to get the resulting URL string, just serialize it.\n};\n\nfunction frozenBaseURL(baseElement, fallbackBaseURL) {\n  // https://html.spec.whatwg.org/multipage/semantics.html#frozen-base-url\n  // The spec is eager (setting the frozen base URL when things change); we are lazy (getting it when we need to)\n\n  const baseHrefAttribute = baseElement.getAttributeNS(null, \"href\");\n  const result = whatwgURL.parseURL(baseHrefAttribute, {\n    baseURL: fallbackBaseURL\n  });\n  return result === null ? fallbackBaseURL : result;\n}","map":{"version":3,"names":["whatwgURL","require","implForWrapper","exports","documentBaseURL","document","firstBase","querySelector","fallbackBaseURL","frozenBaseURL","documentBaseURLSerialized","serializeURL","URL","_defaultView","_parent","parentDocument","_document","_URL","parseURLToResultingURLRecord","url","baseURL","parseURL","baseElement","baseHrefAttribute","getAttributeNS","result"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/helpers/document-base-url.js"],"sourcesContent":["\"use strict\";\r\nconst whatwgURL = require(\"whatwg-url\");\r\nconst { implForWrapper } = require(\"../generated/utils\");\r\n\r\nexports.documentBaseURL = document => {\r\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#document-base-url\r\n\r\n  const firstBase = document.querySelector(\"base[href]\");\r\n  const fallbackBaseURL = exports.fallbackBaseURL(document);\r\n\r\n  if (firstBase === null) {\r\n    return fallbackBaseURL;\r\n  }\r\n\r\n  return frozenBaseURL(firstBase, fallbackBaseURL);\r\n};\r\n\r\nexports.documentBaseURLSerialized = document => {\r\n  return whatwgURL.serializeURL(exports.documentBaseURL(document));\r\n};\r\n\r\nexports.fallbackBaseURL = document => {\r\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#fallback-base-url\r\n\r\n  // Unimplemented: <iframe srcdoc>\r\n\r\n  if (document.URL === \"about:blank\" && document._defaultView &&\r\n      document._defaultView._parent !== document._defaultView) {\r\n    const parentDocument = implForWrapper(document._defaultView._parent._document);\r\n    return exports.documentBaseURL(parentDocument);\r\n  }\r\n\r\n  return document._URL;\r\n};\r\n\r\nexports.parseURLToResultingURLRecord = (url, document) => {\r\n  // https://html.spec.whatwg.org/#resolve-a-url\r\n\r\n  // Encoding stuff ignored; always UTF-8 for us, for now.\r\n\r\n  const baseURL = exports.documentBaseURL(document);\r\n\r\n  return whatwgURL.parseURL(url, { baseURL });\r\n  // This returns the resulting URL record; to get the resulting URL string, just serialize it.\r\n};\r\n\r\nfunction frozenBaseURL(baseElement, fallbackBaseURL) {\r\n  // https://html.spec.whatwg.org/multipage/semantics.html#frozen-base-url\r\n  // The spec is eager (setting the frozen base URL when things change); we are lazy (getting it when we need to)\r\n\r\n  const baseHrefAttribute = baseElement.getAttributeNS(null, \"href\");\r\n  const result = whatwgURL.parseURL(baseHrefAttribute, { baseURL: fallbackBaseURL });\r\n  return result === null ? fallbackBaseURL : result;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AACvC,MAAM;EAAEC;AAAe,CAAC,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAExDE,OAAO,CAACC,eAAe,GAAGC,QAAQ,IAAI;EACpC;;EAEA,MAAMC,SAAS,GAAGD,QAAQ,CAACE,aAAa,CAAC,YAAY,CAAC;EACtD,MAAMC,eAAe,GAAGL,OAAO,CAACK,eAAe,CAACH,QAAQ,CAAC;EAEzD,IAAIC,SAAS,KAAK,IAAI,EAAE;IACtB,OAAOE,eAAe;EACxB;EAEA,OAAOC,aAAa,CAACH,SAAS,EAAEE,eAAe,CAAC;AAClD,CAAC;AAEDL,OAAO,CAACO,yBAAyB,GAAGL,QAAQ,IAAI;EAC9C,OAAOL,SAAS,CAACW,YAAY,CAACR,OAAO,CAACC,eAAe,CAACC,QAAQ,CAAC,CAAC;AAClE,CAAC;AAEDF,OAAO,CAACK,eAAe,GAAGH,QAAQ,IAAI;EACpC;;EAEA;;EAEA,IAAIA,QAAQ,CAACO,GAAG,KAAK,aAAa,IAAIP,QAAQ,CAACQ,YAAY,IACvDR,QAAQ,CAACQ,YAAY,CAACC,OAAO,KAAKT,QAAQ,CAACQ,YAAY,EAAE;IAC3D,MAAME,cAAc,GAAGb,cAAc,CAACG,QAAQ,CAACQ,YAAY,CAACC,OAAO,CAACE,SAAS,CAAC;IAC9E,OAAOb,OAAO,CAACC,eAAe,CAACW,cAAc,CAAC;EAChD;EAEA,OAAOV,QAAQ,CAACY,IAAI;AACtB,CAAC;AAEDd,OAAO,CAACe,4BAA4B,GAAG,CAACC,GAAG,EAAEd,QAAQ,KAAK;EACxD;;EAEA;;EAEA,MAAMe,OAAO,GAAGjB,OAAO,CAACC,eAAe,CAACC,QAAQ,CAAC;EAEjD,OAAOL,SAAS,CAACqB,QAAQ,CAACF,GAAG,EAAE;IAAEC;EAAQ,CAAC,CAAC;EAC3C;AACF,CAAC;;AAED,SAASX,aAAaA,CAACa,WAAW,EAAEd,eAAe,EAAE;EACnD;EACA;;EAEA,MAAMe,iBAAiB,GAAGD,WAAW,CAACE,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC;EAClE,MAAMC,MAAM,GAAGzB,SAAS,CAACqB,QAAQ,CAACE,iBAAiB,EAAE;IAAEH,OAAO,EAAEZ;EAAgB,CAAC,CAAC;EAClF,OAAOiB,MAAM,KAAK,IAAI,GAAGjB,eAAe,GAAGiB,MAAM;AACnD"},"metadata":{},"sourceType":"script","externalDependencies":[]}