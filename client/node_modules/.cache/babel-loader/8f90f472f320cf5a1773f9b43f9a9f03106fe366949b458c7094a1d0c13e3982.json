{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\nconst ErrorEvent = require(\"../generated/ErrorEvent\");\nconst EventHandlerNonNull = require(\"../generated/EventHandlerNonNull.js\");\nconst OnBeforeUnloadEventHandlerNonNull = require(\"../generated/OnBeforeUnloadEventHandlerNonNull.js\");\nconst OnErrorEventHandlerNonNull = require(\"../generated/OnErrorEventHandlerNonNull.js\");\nconst reportException = require(\"./runtime-script-errors\");\nexports.appendHandler = (el, eventName) => {\n  // tryImplForWrapper() is currently required due to use in Window.js\n  idlUtils.tryImplForWrapper(el).addEventListener(eventName, event => {\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\n    const callback = exports.getCurrentEventHandlerValue(el, eventName);\n    if (callback === null) {\n      return;\n    }\n    const specialError = ErrorEvent.isImpl(event) && event.type === \"error\" && event.currentTarget.constructor.name === \"Window\";\n    let returnValue = null;\n    // https://heycam.github.io/webidl/#es-invoking-callback-functions\n    if (typeof callback === \"function\") {\n      if (specialError) {\n        returnValue = callback.call(event.currentTarget, event.message, event.filename, event.lineno, event.colno, event.error);\n      } else {\n        returnValue = callback.call(event.currentTarget, event);\n      }\n    }\n\n    // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\n    if (event.type === \"beforeunload\") {\n      if (returnValue !== null) {\n        event._canceledFlag = true;\n        if (event.returnValue === \"\") {\n          event.returnValue = returnValue;\n        }\n      }\n    } else if (specialError) {\n      if (returnValue === true) {\n        event._canceledFlag = true;\n      }\n    } else if (returnValue === false) {\n      event._canceledFlag = true;\n    }\n  });\n};\n\n// \"Simple\" in this case means \"no content attributes involved\"\nexports.setupForSimpleEventAccessors = (prototype, events) => {\n  prototype._getEventHandlerFor = function (event) {\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\n  };\n  prototype._setEventHandlerFor = function (event, handler) {\n    if (!this._registeredHandlers) {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n    if (!this._registeredHandlers.has(event) && handler !== null) {\n      this._registeredHandlers.add(event);\n      exports.appendHandler(this, event);\n    }\n    this._eventHandlers[event] = handler;\n  };\n  for (const event of events) {\n    exports.createEventAccessor(prototype, event);\n  }\n};\n\n// https://html.spec.whatwg.org/multipage/webappapis.html#getting-the-current-value-of-the-event-handler\nexports.getCurrentEventHandlerValue = (target, event) => {\n  const value = target._getEventHandlerFor(event);\n  if (!value) {\n    return null;\n  }\n  if (value.body !== undefined) {\n    let element, document, fn;\n    if (target.constructor.name === \"Window\") {\n      element = null;\n      document = idlUtils.implForWrapper(target.document);\n    } else {\n      element = target;\n      document = element.ownerDocument;\n    }\n    const {\n      body\n    } = value;\n    const formOwner = element !== null && element.form ? element.form : null;\n    const window = target.constructor.name === \"Window\" && target._document ? target : document.defaultView;\n    try {\n      // eslint-disable-next-line no-new-func\n      Function(body); // properly error out on syntax errors\n      // Note: this won't execute body; that would require `Function(body)()`.\n    } catch (e) {\n      if (window) {\n        reportException(window, e);\n      }\n      target._setEventHandlerFor(event, null);\n      return null;\n    }\n\n    // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\n\n    const createFunction = document.defaultView.Function;\n    if (event === \"error\" && element === null) {\n      const sourceURL = document ? `\\n//# sourceURL=${document.URL}` : \"\";\n      fn = createFunction(`\\\nwith (arguments[0]) { return function onerror(event, source, lineno, colno, error) {\n${body}\n}; }${sourceURL}`)(window);\n      fn = OnErrorEventHandlerNonNull.convert(fn);\n    } else {\n      const calls = [];\n      if (element !== null) {\n        calls.push(idlUtils.wrapperForImpl(document));\n      }\n      if (formOwner !== null) {\n        calls.push(idlUtils.wrapperForImpl(formOwner));\n      }\n      if (element !== null) {\n        calls.push(idlUtils.wrapperForImpl(element));\n      }\n      let wrapperBody = `\\\nwith (arguments[0]) { return function on${event}(event) {\n${body}\n}; }`;\n\n      // eslint-disable-next-line no-unused-vars\n      for (const call of calls) {\n        wrapperBody = `\\\nwith (arguments[0]) { return function () {\n${wrapperBody}\n}; }`;\n      }\n      if (document) {\n        wrapperBody += `\\n//# sourceURL=${document.URL}`;\n      }\n      fn = createFunction(wrapperBody)(window);\n      for (const call of calls) {\n        fn = fn(call);\n      }\n      if (event === \"beforeunload\") {\n        fn = OnBeforeUnloadEventHandlerNonNull.convert(fn);\n      } else {\n        fn = EventHandlerNonNull.convert(fn);\n      }\n    }\n    target._setEventHandlerFor(event, fn);\n  }\n  return target._getEventHandlerFor(event);\n};\n\n// https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\n// TODO: Consider replacing this with `[ReflectEvent]`\nexports.createEventAccessor = (obj, event) => {\n  Object.defineProperty(obj, \"on\" + event, {\n    configurable: true,\n    enumerable: true,\n    get() {\n      return exports.getCurrentEventHandlerValue(this, event);\n    },\n    set(val) {\n      this._setEventHandlerFor(event, val);\n    }\n  });\n};","map":{"version":3,"names":["idlUtils","require","ErrorEvent","EventHandlerNonNull","OnBeforeUnloadEventHandlerNonNull","OnErrorEventHandlerNonNull","reportException","exports","appendHandler","el","eventName","tryImplForWrapper","addEventListener","event","callback","getCurrentEventHandlerValue","specialError","isImpl","type","currentTarget","constructor","name","returnValue","call","message","filename","lineno","colno","error","_canceledFlag","setupForSimpleEventAccessors","prototype","events","_getEventHandlerFor","_eventHandlers","undefined","_setEventHandlerFor","handler","_registeredHandlers","Set","Object","create","has","add","createEventAccessor","target","value","body","element","document","fn","implForWrapper","ownerDocument","formOwner","form","window","_document","defaultView","Function","e","createFunction","sourceURL","URL","convert","calls","push","wrapperForImpl","wrapperBody","obj","defineProperty","configurable","enumerable","get","set","val"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst idlUtils = require(\"../generated/utils\");\r\nconst ErrorEvent = require(\"../generated/ErrorEvent\");\r\nconst EventHandlerNonNull = require(\"../generated/EventHandlerNonNull.js\");\r\nconst OnBeforeUnloadEventHandlerNonNull = require(\"../generated/OnBeforeUnloadEventHandlerNonNull.js\");\r\nconst OnErrorEventHandlerNonNull = require(\"../generated/OnErrorEventHandlerNonNull.js\");\r\nconst reportException = require(\"./runtime-script-errors\");\r\n\r\nexports.appendHandler = (el, eventName) => {\r\n  // tryImplForWrapper() is currently required due to use in Window.js\r\n  idlUtils.tryImplForWrapper(el).addEventListener(eventName, event => {\r\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\r\n    const callback = exports.getCurrentEventHandlerValue(el, eventName);\r\n    if (callback === null) {\r\n      return;\r\n    }\r\n\r\n    const specialError = ErrorEvent.isImpl(event) && event.type === \"error\" &&\r\n      event.currentTarget.constructor.name === \"Window\";\r\n\r\n    let returnValue = null;\r\n    // https://heycam.github.io/webidl/#es-invoking-callback-functions\r\n    if (typeof callback === \"function\") {\r\n      if (specialError) {\r\n        returnValue = callback.call(\r\n          event.currentTarget,\r\n          event.message,\r\n          event.filename,\r\n          event.lineno,\r\n          event.colno,\r\n          event.error\r\n        );\r\n      } else {\r\n        returnValue = callback.call(event.currentTarget, event);\r\n      }\r\n    }\r\n\r\n    // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\r\n    if (event.type === \"beforeunload\") {\r\n      if (returnValue !== null) {\r\n        event._canceledFlag = true;\r\n        if (event.returnValue === \"\") {\r\n          event.returnValue = returnValue;\r\n        }\r\n      }\r\n    } else if (specialError) {\r\n      if (returnValue === true) {\r\n        event._canceledFlag = true;\r\n      }\r\n    } else if (returnValue === false) {\r\n      event._canceledFlag = true;\r\n    }\r\n  });\r\n};\r\n\r\n// \"Simple\" in this case means \"no content attributes involved\"\r\nexports.setupForSimpleEventAccessors = (prototype, events) => {\r\n  prototype._getEventHandlerFor = function (event) {\r\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\r\n  };\r\n\r\n  prototype._setEventHandlerFor = function (event, handler) {\r\n    if (!this._registeredHandlers) {\r\n      this._registeredHandlers = new Set();\r\n      this._eventHandlers = Object.create(null);\r\n    }\r\n\r\n    if (!this._registeredHandlers.has(event) && handler !== null) {\r\n      this._registeredHandlers.add(event);\r\n      exports.appendHandler(this, event);\r\n    }\r\n    this._eventHandlers[event] = handler;\r\n  };\r\n\r\n  for (const event of events) {\r\n    exports.createEventAccessor(prototype, event);\r\n  }\r\n};\r\n\r\n// https://html.spec.whatwg.org/multipage/webappapis.html#getting-the-current-value-of-the-event-handler\r\nexports.getCurrentEventHandlerValue = (target, event) => {\r\n  const value = target._getEventHandlerFor(event);\r\n  if (!value) {\r\n    return null;\r\n  }\r\n\r\n  if (value.body !== undefined) {\r\n    let element, document, fn;\r\n    if (target.constructor.name === \"Window\") {\r\n      element = null;\r\n      document = idlUtils.implForWrapper(target.document);\r\n    } else {\r\n      element = target;\r\n      document = element.ownerDocument;\r\n    }\r\n    const { body } = value;\r\n\r\n    const formOwner = element !== null && element.form ? element.form : null;\r\n    const window = target.constructor.name === \"Window\" && target._document ? target : document.defaultView;\r\n\r\n    try {\r\n      // eslint-disable-next-line no-new-func\r\n      Function(body); // properly error out on syntax errors\r\n      // Note: this won't execute body; that would require `Function(body)()`.\r\n    } catch (e) {\r\n      if (window) {\r\n        reportException(window, e);\r\n      }\r\n      target._setEventHandlerFor(event, null);\r\n      return null;\r\n    }\r\n\r\n    // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\r\n\r\n    const createFunction = document.defaultView.Function;\r\n    if (event === \"error\" && element === null) {\r\n      const sourceURL = document ? `\\n//# sourceURL=${document.URL}` : \"\";\r\n\r\n      fn = createFunction(`\\\r\nwith (arguments[0]) { return function onerror(event, source, lineno, colno, error) {\r\n${body}\r\n}; }${sourceURL}`)(window);\r\n\r\n      fn = OnErrorEventHandlerNonNull.convert(fn);\r\n    } else {\r\n      const calls = [];\r\n      if (element !== null) {\r\n        calls.push(idlUtils.wrapperForImpl(document));\r\n      }\r\n\r\n      if (formOwner !== null) {\r\n        calls.push(idlUtils.wrapperForImpl(formOwner));\r\n      }\r\n\r\n      if (element !== null) {\r\n        calls.push(idlUtils.wrapperForImpl(element));\r\n      }\r\n\r\n      let wrapperBody = `\\\r\nwith (arguments[0]) { return function on${event}(event) {\r\n${body}\r\n}; }`;\r\n\r\n      // eslint-disable-next-line no-unused-vars\r\n      for (const call of calls) {\r\n        wrapperBody = `\\\r\nwith (arguments[0]) { return function () {\r\n${wrapperBody}\r\n}; }`;\r\n      }\r\n\r\n      if (document) {\r\n        wrapperBody += `\\n//# sourceURL=${document.URL}`;\r\n      }\r\n\r\n      fn = createFunction(wrapperBody)(window);\r\n      for (const call of calls) {\r\n        fn = fn(call);\r\n      }\r\n\r\n      if (event === \"beforeunload\") {\r\n        fn = OnBeforeUnloadEventHandlerNonNull.convert(fn);\r\n      } else {\r\n        fn = EventHandlerNonNull.convert(fn);\r\n      }\r\n    }\r\n\r\n    target._setEventHandlerFor(event, fn);\r\n  }\r\n\r\n  return target._getEventHandlerFor(event);\r\n};\r\n\r\n// https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\r\n// TODO: Consider replacing this with `[ReflectEvent]`\r\nexports.createEventAccessor = (obj, event) => {\r\n  Object.defineProperty(obj, \"on\" + event, {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      return exports.getCurrentEventHandlerValue(this, event);\r\n    },\r\n    set(val) {\r\n      this._setEventHandlerFor(event, val);\r\n    }\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}