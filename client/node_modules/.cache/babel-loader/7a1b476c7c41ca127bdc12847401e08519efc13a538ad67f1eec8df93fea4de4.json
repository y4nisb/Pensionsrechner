{"ast":null,"code":"\"use strict\";\n\nconst cssom = require(\"cssom\");\nconst cssstyle = require(\"cssstyle\");\nexports.addToCore = core => {\n  // What works now:\n  // - Accessing the rules defined in individual stylesheets\n  // - Modifications to style content attribute are reflected in style property\n  // - Modifications to style property are reflected in style content attribute\n  // TODO\n  // - Modifications to style element's textContent are reflected in sheet property.\n  // - Modifications to style element's sheet property are reflected in textContent.\n  // - Modifications to link.href property are reflected in sheet property.\n  // - Less-used features of link: disabled\n  // - Less-used features of style: disabled, scoped, title\n  // - CSSOM-View\n  //   - getComputedStyle(): requires default stylesheet, cascading, inheritance,\n  //     filtering by @media (screen? print?), layout for widths/heights\n  // - Load events are not in the specs, but apparently some browsers\n  //   implement something. Should onload only fire after all @imports have been\n  //   loaded, or only the primary sheet?\n\n  core.StyleSheet = cssom.StyleSheet;\n  core.MediaList = cssom.MediaList;\n  core.CSSStyleSheet = cssom.CSSStyleSheet;\n  core.CSSRule = cssom.CSSRule;\n  core.CSSStyleRule = cssom.CSSStyleRule;\n  core.CSSMediaRule = cssom.CSSMediaRule;\n  core.CSSImportRule = cssom.CSSImportRule;\n  core.CSSStyleDeclaration = cssstyle.CSSStyleDeclaration;\n\n  // Relavant specs\n  // http://www.w3.org/TR/DOM-Level-2-Style (2000)\n  // http://www.w3.org/TR/cssom-view/ (2008)\n  // http://dev.w3.org/csswg/cssom/ (2010) Meant to replace DOM Level 2 Style\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/ HTML5, of course\n  // http://dev.w3.org/csswg/css-style-attr/  not sure what's new here\n\n  // Objects that aren't in cssom library but should be:\n  //   CSSRuleList  (cssom just uses array)\n  //   CSSFontFaceRule\n  //   CSSPageRule\n\n  // These rules don't really make sense to implement, so CSSOM draft makes them\n  // obsolete.\n  //   CSSCharsetRule\n  //   CSSUnknownRule\n\n  // These objects are considered obsolete by CSSOM draft, although modern\n  // browsers implement them.\n  //   CSSValue\n  //   CSSPrimitiveValue\n  //   CSSValueList\n  //   RGBColor\n  //   Rect\n  //   Counter\n};","map":{"version":3,"names":["cssom","require","cssstyle","exports","addToCore","core","StyleSheet","MediaList","CSSStyleSheet","CSSRule","CSSStyleRule","CSSMediaRule","CSSImportRule","CSSStyleDeclaration"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/level2/style.js"],"sourcesContent":["\"use strict\";\r\nconst cssom = require(\"cssom\");\r\nconst cssstyle = require(\"cssstyle\");\r\n\r\nexports.addToCore = core => {\r\n  // What works now:\r\n  // - Accessing the rules defined in individual stylesheets\r\n  // - Modifications to style content attribute are reflected in style property\r\n  // - Modifications to style property are reflected in style content attribute\r\n  // TODO\r\n  // - Modifications to style element's textContent are reflected in sheet property.\r\n  // - Modifications to style element's sheet property are reflected in textContent.\r\n  // - Modifications to link.href property are reflected in sheet property.\r\n  // - Less-used features of link: disabled\r\n  // - Less-used features of style: disabled, scoped, title\r\n  // - CSSOM-View\r\n  //   - getComputedStyle(): requires default stylesheet, cascading, inheritance,\r\n  //     filtering by @media (screen? print?), layout for widths/heights\r\n  // - Load events are not in the specs, but apparently some browsers\r\n  //   implement something. Should onload only fire after all @imports have been\r\n  //   loaded, or only the primary sheet?\r\n\r\n  core.StyleSheet = cssom.StyleSheet;\r\n  core.MediaList = cssom.MediaList;\r\n  core.CSSStyleSheet = cssom.CSSStyleSheet;\r\n  core.CSSRule = cssom.CSSRule;\r\n  core.CSSStyleRule = cssom.CSSStyleRule;\r\n  core.CSSMediaRule = cssom.CSSMediaRule;\r\n  core.CSSImportRule = cssom.CSSImportRule;\r\n  core.CSSStyleDeclaration = cssstyle.CSSStyleDeclaration;\r\n\r\n  // Relavant specs\r\n  // http://www.w3.org/TR/DOM-Level-2-Style (2000)\r\n  // http://www.w3.org/TR/cssom-view/ (2008)\r\n  // http://dev.w3.org/csswg/cssom/ (2010) Meant to replace DOM Level 2 Style\r\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/ HTML5, of course\r\n  // http://dev.w3.org/csswg/css-style-attr/  not sure what's new here\r\n\r\n  // Objects that aren't in cssom library but should be:\r\n  //   CSSRuleList  (cssom just uses array)\r\n  //   CSSFontFaceRule\r\n  //   CSSPageRule\r\n\r\n  // These rules don't really make sense to implement, so CSSOM draft makes them\r\n  // obsolete.\r\n  //   CSSCharsetRule\r\n  //   CSSUnknownRule\r\n\r\n  // These objects are considered obsolete by CSSOM draft, although modern\r\n  // browsers implement them.\r\n  //   CSSValue\r\n  //   CSSPrimitiveValue\r\n  //   CSSValueList\r\n  //   RGBColor\r\n  //   Rect\r\n  //   Counter\r\n};\r\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AAEpCE,OAAO,CAACC,SAAS,GAAGC,IAAI,IAAI;EAC1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAA,IAAI,CAACC,UAAU,GAAGN,KAAK,CAACM,UAAU;EAClCD,IAAI,CAACE,SAAS,GAAGP,KAAK,CAACO,SAAS;EAChCF,IAAI,CAACG,aAAa,GAAGR,KAAK,CAACQ,aAAa;EACxCH,IAAI,CAACI,OAAO,GAAGT,KAAK,CAACS,OAAO;EAC5BJ,IAAI,CAACK,YAAY,GAAGV,KAAK,CAACU,YAAY;EACtCL,IAAI,CAACM,YAAY,GAAGX,KAAK,CAACW,YAAY;EACtCN,IAAI,CAACO,aAAa,GAAGZ,KAAK,CAACY,aAAa;EACxCP,IAAI,CAACQ,mBAAmB,GAAGX,QAAQ,CAACW,mBAAmB;;EAEvD;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}