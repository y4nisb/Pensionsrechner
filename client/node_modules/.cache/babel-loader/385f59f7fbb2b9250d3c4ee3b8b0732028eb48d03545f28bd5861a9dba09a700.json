{"ast":null,"code":"\"use strict\";\n\nconst xmlParser = require(\"./xml\");\nconst htmlParser = require(\"./html\");\n\n// https://w3c.github.io/DOM-Parsing/#dfn-fragment-parsing-algorithm\nfunction parseFragment(markup, contextElement) {\n  const {\n    _parsingMode\n  } = contextElement._ownerDocument;\n  let parseAlgorithm;\n  if (_parsingMode === \"html\") {\n    parseAlgorithm = htmlParser.parseFragment;\n  } else if (_parsingMode === \"xml\") {\n    parseAlgorithm = xmlParser.parseFragment;\n  }\n\n  // Note: HTML and XML fragment parsing algorithm already return a document fragments; no need to do steps 3 and 4\n  return parseAlgorithm(markup, contextElement);\n}\nfunction parseIntoDocument(markup, ownerDocument) {\n  const {\n    _parsingMode\n  } = ownerDocument;\n  let parseAlgorithm;\n  if (_parsingMode === \"html\") {\n    parseAlgorithm = htmlParser.parseIntoDocument;\n  } else if (_parsingMode === \"xml\") {\n    parseAlgorithm = xmlParser.parseIntoDocument;\n  }\n  return parseAlgorithm(markup, ownerDocument);\n}\nmodule.exports = {\n  parseFragment,\n  parseIntoDocument\n};","map":{"version":3,"names":["xmlParser","require","htmlParser","parseFragment","markup","contextElement","_parsingMode","_ownerDocument","parseAlgorithm","parseIntoDocument","ownerDocument","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/browser/parser/index.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst xmlParser = require(\"./xml\");\r\nconst htmlParser = require(\"./html\");\r\n\r\n// https://w3c.github.io/DOM-Parsing/#dfn-fragment-parsing-algorithm\r\nfunction parseFragment(markup, contextElement) {\r\n  const { _parsingMode } = contextElement._ownerDocument;\r\n\r\n  let parseAlgorithm;\r\n  if (_parsingMode === \"html\") {\r\n    parseAlgorithm = htmlParser.parseFragment;\r\n  } else if (_parsingMode === \"xml\") {\r\n    parseAlgorithm = xmlParser.parseFragment;\r\n  }\r\n\r\n  // Note: HTML and XML fragment parsing algorithm already return a document fragments; no need to do steps 3 and 4\r\n  return parseAlgorithm(markup, contextElement);\r\n}\r\n\r\nfunction parseIntoDocument(markup, ownerDocument) {\r\n  const { _parsingMode } = ownerDocument;\r\n\r\n  let parseAlgorithm;\r\n  if (_parsingMode === \"html\") {\r\n    parseAlgorithm = htmlParser.parseIntoDocument;\r\n  } else if (_parsingMode === \"xml\") {\r\n    parseAlgorithm = xmlParser.parseIntoDocument;\r\n  }\r\n\r\n  return parseAlgorithm(markup, ownerDocument);\r\n}\r\n\r\nmodule.exports = {\r\n  parseFragment,\r\n  parseIntoDocument\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,OAAO,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAEpC;AACA,SAASE,aAAaA,CAACC,MAAM,EAAEC,cAAc,EAAE;EAC7C,MAAM;IAAEC;EAAa,CAAC,GAAGD,cAAc,CAACE,cAAc;EAEtD,IAAIC,cAAc;EAClB,IAAIF,YAAY,KAAK,MAAM,EAAE;IAC3BE,cAAc,GAAGN,UAAU,CAACC,aAAa;EAC3C,CAAC,MAAM,IAAIG,YAAY,KAAK,KAAK,EAAE;IACjCE,cAAc,GAAGR,SAAS,CAACG,aAAa;EAC1C;;EAEA;EACA,OAAOK,cAAc,CAACJ,MAAM,EAAEC,cAAc,CAAC;AAC/C;AAEA,SAASI,iBAAiBA,CAACL,MAAM,EAAEM,aAAa,EAAE;EAChD,MAAM;IAAEJ;EAAa,CAAC,GAAGI,aAAa;EAEtC,IAAIF,cAAc;EAClB,IAAIF,YAAY,KAAK,MAAM,EAAE;IAC3BE,cAAc,GAAGN,UAAU,CAACO,iBAAiB;EAC/C,CAAC,MAAM,IAAIH,YAAY,KAAK,KAAK,EAAE;IACjCE,cAAc,GAAGR,SAAS,CAACS,iBAAiB;EAC9C;EAEA,OAAOD,cAAc,CAACJ,MAAM,EAAEM,aAAa,CAAC;AAC9C;AAEAC,MAAM,CAACC,OAAO,GAAG;EACfT,aAAa;EACbM;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}