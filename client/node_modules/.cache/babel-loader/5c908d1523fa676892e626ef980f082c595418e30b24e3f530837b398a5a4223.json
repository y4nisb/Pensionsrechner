{"ast":null,"code":"'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\nconst Mixin = require('../../utils/mixin');\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\n  constructor(parser, opts) {\n    super(parser, opts);\n    this.opts = opts;\n    this.ctLoc = null;\n    this.locBeforeToken = false;\n  }\n  _setErrorLocation(err) {\n    if (this.ctLoc) {\n      err.startLine = this.ctLoc.startLine;\n      err.startCol = this.ctLoc.startCol;\n      err.startOffset = this.ctLoc.startOffset;\n      err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\n      err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\n      err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\n    }\n  }\n  _getOverriddenMethods(mxn, orig) {\n    return {\n      _bootstrap(document, fragmentContext) {\n        orig._bootstrap.call(this, document, fragmentContext);\n        Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\n        Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n      },\n      _processInputToken(token) {\n        mxn.ctLoc = token.location;\n        orig._processInputToken.call(this, token);\n      },\n      _err(code, options) {\n        mxn.locBeforeToken = options && options.beforeToken;\n        mxn._reportError(code);\n      }\n    };\n  }\n}\nmodule.exports = ErrorReportingParserMixin;","map":{"version":3,"names":["ErrorReportingMixinBase","require","ErrorReportingTokenizerMixin","LocationInfoTokenizerMixin","Mixin","ErrorReportingParserMixin","constructor","parser","opts","ctLoc","locBeforeToken","_setErrorLocation","err","startLine","startCol","startOffset","endLine","endCol","endOffset","_getOverriddenMethods","mxn","orig","_bootstrap","document","fragmentContext","call","install","tokenizer","_processInputToken","token","location","_err","code","options","beforeToken","_reportError","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js"],"sourcesContent":["'use strict';\r\n\r\nconst ErrorReportingMixinBase = require('./mixin-base');\r\nconst ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\r\nconst LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\r\nconst Mixin = require('../../utils/mixin');\r\n\r\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\r\n    constructor(parser, opts) {\r\n        super(parser, opts);\r\n\r\n        this.opts = opts;\r\n        this.ctLoc = null;\r\n        this.locBeforeToken = false;\r\n    }\r\n\r\n    _setErrorLocation(err) {\r\n        if (this.ctLoc) {\r\n            err.startLine = this.ctLoc.startLine;\r\n            err.startCol = this.ctLoc.startCol;\r\n            err.startOffset = this.ctLoc.startOffset;\r\n\r\n            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\r\n            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\r\n            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\r\n        }\r\n    }\r\n\r\n    _getOverriddenMethods(mxn, orig) {\r\n        return {\r\n            _bootstrap(document, fragmentContext) {\r\n                orig._bootstrap.call(this, document, fragmentContext);\r\n\r\n                Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\r\n                Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\r\n            },\r\n\r\n            _processInputToken(token) {\r\n                mxn.ctLoc = token.location;\r\n\r\n                orig._processInputToken.call(this, token);\r\n            },\r\n\r\n            _err(code, options) {\r\n                mxn.locBeforeToken = options && options.beforeToken;\r\n                mxn._reportError(code);\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nmodule.exports = ErrorReportingParserMixin;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,uBAAuB,GAAGC,OAAO,CAAC,cAAc,CAAC;AACvD,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACjE,MAAME,0BAA0B,GAAGF,OAAO,CAAC,kCAAkC,CAAC;AAC9E,MAAMG,KAAK,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAE1C,MAAMI,yBAAyB,SAASL,uBAAuB,CAAC;EAC5DM,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAE;IACtB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;IAEnB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,cAAc,GAAG,KAAK;EAC/B;EAEAC,iBAAiBA,CAACC,GAAG,EAAE;IACnB,IAAI,IAAI,CAACH,KAAK,EAAE;MACZG,GAAG,CAACC,SAAS,GAAG,IAAI,CAACJ,KAAK,CAACI,SAAS;MACpCD,GAAG,CAACE,QAAQ,GAAG,IAAI,CAACL,KAAK,CAACK,QAAQ;MAClCF,GAAG,CAACG,WAAW,GAAG,IAAI,CAACN,KAAK,CAACM,WAAW;MAExCH,GAAG,CAACI,OAAO,GAAG,IAAI,CAACN,cAAc,GAAG,IAAI,CAACD,KAAK,CAACI,SAAS,GAAG,IAAI,CAACJ,KAAK,CAACO,OAAO;MAC7EJ,GAAG,CAACK,MAAM,GAAG,IAAI,CAACP,cAAc,GAAG,IAAI,CAACD,KAAK,CAACK,QAAQ,GAAG,IAAI,CAACL,KAAK,CAACQ,MAAM;MAC1EL,GAAG,CAACM,SAAS,GAAG,IAAI,CAACR,cAAc,GAAG,IAAI,CAACD,KAAK,CAACM,WAAW,GAAG,IAAI,CAACN,KAAK,CAACS,SAAS;IACvF;EACJ;EAEAC,qBAAqBA,CAACC,GAAG,EAAEC,IAAI,EAAE;IAC7B,OAAO;MACHC,UAAUA,CAACC,QAAQ,EAAEC,eAAe,EAAE;QAClCH,IAAI,CAACC,UAAU,CAACG,IAAI,CAAC,IAAI,EAAEF,QAAQ,EAAEC,eAAe,CAAC;QAErDpB,KAAK,CAACsB,OAAO,CAAC,IAAI,CAACC,SAAS,EAAEzB,4BAA4B,EAAEkB,GAAG,CAACZ,IAAI,CAAC;QACrEJ,KAAK,CAACsB,OAAO,CAAC,IAAI,CAACC,SAAS,EAAExB,0BAA0B,CAAC;MAC7D,CAAC;MAEDyB,kBAAkBA,CAACC,KAAK,EAAE;QACtBT,GAAG,CAACX,KAAK,GAAGoB,KAAK,CAACC,QAAQ;QAE1BT,IAAI,CAACO,kBAAkB,CAACH,IAAI,CAAC,IAAI,EAAEI,KAAK,CAAC;MAC7C,CAAC;MAEDE,IAAIA,CAACC,IAAI,EAAEC,OAAO,EAAE;QAChBb,GAAG,CAACV,cAAc,GAAGuB,OAAO,IAAIA,OAAO,CAACC,WAAW;QACnDd,GAAG,CAACe,YAAY,CAACH,IAAI,CAAC;MAC1B;IACJ,CAAC;EACL;AACJ;AAEAI,MAAM,CAACC,OAAO,GAAGhC,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}