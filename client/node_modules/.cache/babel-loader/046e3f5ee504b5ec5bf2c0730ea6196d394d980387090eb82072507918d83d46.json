{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\nconst UIEventInit = require(\"../generated/UIEventInit\");\nconst EventImpl = require(\"./Event-impl\").implementation;\n\n// Until webidl2js gains support for checking for Window, this would have to do.\nfunction isWindow(val) {\n  if (typeof val !== \"object\") {\n    return false;\n  }\n  const wrapper = idlUtils.wrapperForImpl(val);\n  if (typeof wrapper === \"object\") {\n    return wrapper === wrapper._globalProxy;\n  }\n\n  // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\n  // some internal usage call this constructor with the actual global proxy.\n  return isWindow(idlUtils.implForWrapper(val));\n}\nclass UIEventImpl extends EventImpl {\n  constructor(globalObject, args, privateData) {\n    const eventInitDict = args[1];\n\n    // undefined check included so that we can omit the property in internal usage.\n    if (eventInitDict && eventInitDict.view !== null && eventInitDict.view !== undefined) {\n      if (!isWindow(eventInitDict.view)) {\n        throw new TypeError(`Failed to construct '${new.target.name.replace(/Impl$/, \"\")}': member view is not of ` + \"type Window.\");\n      }\n    }\n    super(globalObject, args, privateData);\n  }\n  initUIEvent(type, bubbles, cancelable, view, detail) {\n    if (view !== null) {\n      if (!isWindow(view)) {\n        throw new TypeError(`Failed to execute 'initUIEvent' on '${this.constructor.name.replace(/Impl$/, \"\")}': ` + \"parameter 4 is not of type 'Window'.\");\n      }\n    }\n    if (this._dispatchFlag) {\n      return;\n    }\n    this.initEvent(type, bubbles, cancelable);\n    this.view = view;\n    this.detail = detail;\n  }\n}\nUIEventImpl.defaultInit = UIEventInit.convert(undefined);\nmodule.exports = {\n  implementation: UIEventImpl\n};","map":{"version":3,"names":["idlUtils","require","UIEventInit","EventImpl","implementation","isWindow","val","wrapper","wrapperForImpl","_globalProxy","implForWrapper","UIEventImpl","constructor","globalObject","args","privateData","eventInitDict","view","undefined","TypeError","new","target","name","replace","initUIEvent","type","bubbles","cancelable","detail","_dispatchFlag","initEvent","defaultInit","convert","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/events/UIEvent-impl.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst idlUtils = require(\"../generated/utils\");\r\nconst UIEventInit = require(\"../generated/UIEventInit\");\r\nconst EventImpl = require(\"./Event-impl\").implementation;\r\n\r\n// Until webidl2js gains support for checking for Window, this would have to do.\r\nfunction isWindow(val) {\r\n  if (typeof val !== \"object\") {\r\n    return false;\r\n  }\r\n  const wrapper = idlUtils.wrapperForImpl(val);\r\n  if (typeof wrapper === \"object\") {\r\n    return wrapper === wrapper._globalProxy;\r\n  }\r\n\r\n  // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\r\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\r\n  // some internal usage call this constructor with the actual global proxy.\r\n  return isWindow(idlUtils.implForWrapper(val));\r\n}\r\n\r\nclass UIEventImpl extends EventImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    const eventInitDict = args[1];\r\n\r\n    // undefined check included so that we can omit the property in internal usage.\r\n    if (eventInitDict && eventInitDict.view !== null && eventInitDict.view !== undefined) {\r\n      if (!isWindow(eventInitDict.view)) {\r\n        throw new TypeError(`Failed to construct '${new.target.name.replace(/Impl$/, \"\")}': member view is not of ` +\r\n                            \"type Window.\");\r\n      }\r\n    }\r\n\r\n    super(globalObject, args, privateData);\r\n  }\r\n\r\n  initUIEvent(type, bubbles, cancelable, view, detail) {\r\n    if (view !== null) {\r\n      if (!isWindow(view)) {\r\n        throw new TypeError(`Failed to execute 'initUIEvent' on '${this.constructor.name.replace(/Impl$/, \"\")}': ` +\r\n                            \"parameter 4 is not of type 'Window'.\");\r\n      }\r\n    }\r\n\r\n    if (this._dispatchFlag) {\r\n      return;\r\n    }\r\n\r\n    this.initEvent(type, bubbles, cancelable);\r\n    this.view = view;\r\n    this.detail = detail;\r\n  }\r\n}\r\nUIEventImpl.defaultInit = UIEventInit.convert(undefined);\r\n\r\nmodule.exports = {\r\n  implementation: UIEventImpl\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC9C,MAAMC,WAAW,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACvD,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAc,CAAC,CAACG,cAAc;;AAExD;AACA,SAASC,QAAQA,CAACC,GAAG,EAAE;EACrB,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAO,KAAK;EACd;EACA,MAAMC,OAAO,GAAGP,QAAQ,CAACQ,cAAc,CAACF,GAAG,CAAC;EAC5C,IAAI,OAAOC,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAOA,OAAO,KAAKA,OAAO,CAACE,YAAY;EACzC;;EAEA;EACA;EACA;EACA,OAAOJ,QAAQ,CAACL,QAAQ,CAACU,cAAc,CAACJ,GAAG,CAAC,CAAC;AAC/C;AAEA,MAAMK,WAAW,SAASR,SAAS,CAAC;EAClCS,WAAWA,CAACC,YAAY,EAAEC,IAAI,EAAEC,WAAW,EAAE;IAC3C,MAAMC,aAAa,GAAGF,IAAI,CAAC,CAAC,CAAC;;IAE7B;IACA,IAAIE,aAAa,IAAIA,aAAa,CAACC,IAAI,KAAK,IAAI,IAAID,aAAa,CAACC,IAAI,KAAKC,SAAS,EAAE;MACpF,IAAI,CAACb,QAAQ,CAACW,aAAa,CAACC,IAAI,CAAC,EAAE;QACjC,MAAM,IAAIE,SAAS,CAAE,wBAAuBC,GAAG,CAACC,MAAM,CAACC,IAAI,CAACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAE,2BAA0B,GACvF,cAAc,CAAC;MACrC;IACF;IAEA,KAAK,CAACV,YAAY,EAAEC,IAAI,EAAEC,WAAW,CAAC;EACxC;EAEAS,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAEC,UAAU,EAAEV,IAAI,EAAEW,MAAM,EAAE;IACnD,IAAIX,IAAI,KAAK,IAAI,EAAE;MACjB,IAAI,CAACZ,QAAQ,CAACY,IAAI,CAAC,EAAE;QACnB,MAAM,IAAIE,SAAS,CAAE,uCAAsC,IAAI,CAACP,WAAW,CAACU,IAAI,CAACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAE,KAAI,GACtF,sCAAsC,CAAC;MAC7D;IACF;IAEA,IAAI,IAAI,CAACM,aAAa,EAAE;MACtB;IACF;IAEA,IAAI,CAACC,SAAS,CAACL,IAAI,EAAEC,OAAO,EAAEC,UAAU,CAAC;IACzC,IAAI,CAACV,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACW,MAAM,GAAGA,MAAM;EACtB;AACF;AACAjB,WAAW,CAACoB,WAAW,GAAG7B,WAAW,CAAC8B,OAAO,CAACd,SAAS,CAAC;AAExDe,MAAM,CAACC,OAAO,GAAG;EACf9B,cAAc,EAAEO;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}