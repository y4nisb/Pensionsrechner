{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst {\n  parseFloatingPointNumber\n} = require(\"../helpers/strings\");\nconst {\n  getLabelsForLabelable\n} = require(\"../helpers/form-controls\");\nclass HTMLMeterElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._labels = null;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n  get _minimumValue() {\n    const min = this.getAttributeNS(null, \"min\");\n    if (min !== null) {\n      const parsed = parseFloatingPointNumber(min);\n      if (parsed !== null) {\n        return parsed;\n      }\n    }\n    return 0;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n  get _maximumValue() {\n    let candidate = 1.0;\n    const max = this.getAttributeNS(null, \"max\");\n    if (max !== null) {\n      const parsed = parseFloatingPointNumber(max);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n    const minimumValue = this._minimumValue;\n    return candidate >= minimumValue ? candidate : minimumValue;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n  get _actualValue() {\n    let candidate = 0;\n    const value = this.getAttributeNS(null, \"value\");\n    if (value !== null) {\n      const parsed = parseFloatingPointNumber(value);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n    const minimumValue = this._minimumValue;\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n  get _lowBoundary() {\n    const minimumValue = this._minimumValue;\n    let candidate = minimumValue;\n    const low = this.getAttributeNS(null, \"low\");\n    if (low !== null) {\n      const parsed = parseFloatingPointNumber(low);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n  get _highBoundary() {\n    const maximumValue = this._maximumValue;\n    let candidate = maximumValue;\n    const high = this.getAttributeNS(null, \"high\");\n    if (high !== null) {\n      const parsed = parseFloatingPointNumber(high);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n    const lowBoundary = this._lowBoundary;\n    if (candidate < lowBoundary) {\n      return lowBoundary;\n    }\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n  get _optimumPoint() {\n    const minimumValue = this._minimumValue;\n    const maximumValue = this._maximumValue;\n    let candidate = (minimumValue + maximumValue) / 2;\n    const optimum = this.getAttributeNS(null, \"optimum\");\n    if (optimum !== null) {\n      const parsed = parseFloatingPointNumber(optimum);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n  get value() {\n    return this._actualValue;\n  }\n  set value(val) {\n    this.setAttributeNS(null, \"value\", String(val));\n  }\n  get min() {\n    return this._minimumValue;\n  }\n  set min(val) {\n    this.setAttributeNS(null, \"min\", String(val));\n  }\n  get max() {\n    return this._maximumValue;\n  }\n  set max(val) {\n    this.setAttributeNS(null, \"max\", String(val));\n  }\n  get low() {\n    return this._lowBoundary;\n  }\n  set low(val) {\n    this.setAttributeNS(null, \"low\", String(val));\n  }\n  get high() {\n    return this._highBoundary;\n  }\n  set high(val) {\n    this.setAttributeNS(null, \"high\", String(val));\n  }\n  get optimum() {\n    return this._optimumPoint;\n  }\n  set optimum(val) {\n    this.setAttributeNS(null, \"optimum\", String(val));\n  }\n}\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};","map":{"version":3,"names":["HTMLElementImpl","require","implementation","parseFloatingPointNumber","getLabelsForLabelable","HTMLMeterElementImpl","constructor","globalObject","args","privateData","_labels","_minimumValue","min","getAttributeNS","parsed","_maximumValue","candidate","max","minimumValue","_actualValue","value","maximumValue","_lowBoundary","low","_highBoundary","high","lowBoundary","_optimumPoint","optimum","labels","val","setAttributeNS","String","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMeterElement-impl.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\r\nconst { parseFloatingPointNumber } = require(\"../helpers/strings\");\r\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\r\n\r\nclass HTMLMeterElementImpl extends HTMLElementImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    super(globalObject, args, privateData);\r\n    this._labels = null;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\r\n  get _minimumValue() {\r\n    const min = this.getAttributeNS(null, \"min\");\r\n    if (min !== null) {\r\n      const parsed = parseFloatingPointNumber(min);\r\n      if (parsed !== null) {\r\n        return parsed;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\r\n  get _maximumValue() {\r\n    let candidate = 1.0;\r\n\r\n    const max = this.getAttributeNS(null, \"max\");\r\n    if (max !== null) {\r\n      const parsed = parseFloatingPointNumber(max);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    const minimumValue = this._minimumValue;\r\n    return candidate >= minimumValue ? candidate : minimumValue;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\r\n  get _actualValue() {\r\n    let candidate = 0;\r\n\r\n    const value = this.getAttributeNS(null, \"value\");\r\n    if (value !== null) {\r\n      const parsed = parseFloatingPointNumber(value);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    const minimumValue = this._minimumValue;\r\n    if (candidate < minimumValue) {\r\n      return minimumValue;\r\n    }\r\n\r\n    const maximumValue = this._maximumValue;\r\n    return candidate > maximumValue ? maximumValue : candidate;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\r\n  get _lowBoundary() {\r\n    const minimumValue = this._minimumValue;\r\n    let candidate = minimumValue;\r\n\r\n    const low = this.getAttributeNS(null, \"low\");\r\n    if (low !== null) {\r\n      const parsed = parseFloatingPointNumber(low);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    if (candidate < minimumValue) {\r\n      return minimumValue;\r\n    }\r\n\r\n    const maximumValue = this._maximumValue;\r\n    return candidate > maximumValue ? maximumValue : candidate;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\r\n  get _highBoundary() {\r\n    const maximumValue = this._maximumValue;\r\n    let candidate = maximumValue;\r\n\r\n    const high = this.getAttributeNS(null, \"high\");\r\n    if (high !== null) {\r\n      const parsed = parseFloatingPointNumber(high);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    const lowBoundary = this._lowBoundary;\r\n    if (candidate < lowBoundary) {\r\n      return lowBoundary;\r\n    }\r\n\r\n    return candidate > maximumValue ? maximumValue : candidate;\r\n  }\r\n\r\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\r\n  get _optimumPoint() {\r\n    const minimumValue = this._minimumValue;\r\n    const maximumValue = this._maximumValue;\r\n    let candidate = (minimumValue + maximumValue) / 2;\r\n\r\n    const optimum = this.getAttributeNS(null, \"optimum\");\r\n    if (optimum !== null) {\r\n      const parsed = parseFloatingPointNumber(optimum);\r\n      if (parsed !== null) {\r\n        candidate = parsed;\r\n      }\r\n    }\r\n\r\n    if (candidate < minimumValue) {\r\n      return minimumValue;\r\n    }\r\n\r\n    return candidate > maximumValue ? maximumValue : candidate;\r\n  }\r\n\r\n  get labels() {\r\n    return getLabelsForLabelable(this);\r\n  }\r\n\r\n  get value() {\r\n    return this._actualValue;\r\n  }\r\n\r\n  set value(val) {\r\n    this.setAttributeNS(null, \"value\", String(val));\r\n  }\r\n\r\n  get min() {\r\n    return this._minimumValue;\r\n  }\r\n\r\n  set min(val) {\r\n    this.setAttributeNS(null, \"min\", String(val));\r\n  }\r\n\r\n  get max() {\r\n    return this._maximumValue;\r\n  }\r\n\r\n  set max(val) {\r\n    this.setAttributeNS(null, \"max\", String(val));\r\n  }\r\n\r\n  get low() {\r\n    return this._lowBoundary;\r\n  }\r\n\r\n  set low(val) {\r\n    this.setAttributeNS(null, \"low\", String(val));\r\n  }\r\n\r\n  get high() {\r\n    return this._highBoundary;\r\n  }\r\n\r\n  set high(val) {\r\n    this.setAttributeNS(null, \"high\", String(val));\r\n  }\r\n\r\n  get optimum() {\r\n    return this._optimumPoint;\r\n  }\r\n\r\n  set optimum(val) {\r\n    this.setAttributeNS(null, \"optimum\", String(val));\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  implementation: HTMLMeterElementImpl\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}