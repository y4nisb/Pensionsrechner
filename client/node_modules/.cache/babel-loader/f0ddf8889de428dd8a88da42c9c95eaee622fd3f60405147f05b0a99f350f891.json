{"ast":null,"code":"\"use strict\";\n\nconst xnv = require(\"xml-name-validator\");\nconst {\n  NAMESPACES\n} = require(\"./constants\");\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n  const generatedPrefix = \"ns\" + prefixIndex;\n  map[newNamespace] = [generatedPrefix];\n  return generatedPrefix;\n}\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n  const candidateList = map[ns];\n  if (!candidateList) {\n    return null;\n  }\n  if (candidateList.includes(preferredPrefix)) {\n    return preferredPrefix;\n  }\n  return candidateList[candidateList.length - 1];\n}\nfunction serializeAttributeValue(value /* , requireWellFormed*/) {\n  if (value === null) {\n    return \"\";\n  }\n  // TODO: Check well-formedness\n  return value.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\t/g, \"&#x9;\").replace(/\\n/g, \"&#xA;\").replace(/\\r/g, \"&#xD;\");\n}\nfunction serializeAttributes(element, map, localPrefixes, ignoreNamespaceDefAttr, requireWellFormed, refs) {\n  let result = \"\";\n  const namespaceLocalnames = Object.create(null);\n  for (const attr of element.attributes) {\n    if (requireWellFormed && namespaceLocalnames[attr.namespaceURI] && namespaceLocalnames[attr.namespaceURI].has(attr.localName)) {\n      throw new Error(\"Found duplicated attribute\");\n    }\n    if (!namespaceLocalnames[attr.namespaceURI]) {\n      namespaceLocalnames[attr.namespaceURI] = new Set();\n    }\n    namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n    const attributeNamespace = attr.namespaceURI;\n    let candidatePrefix = null;\n    if (attributeNamespace !== null) {\n      candidatePrefix = preferredPrefixString(map, attributeNamespace, attr.prefix);\n      if (attributeNamespace === NAMESPACES.XMLNS) {\n        if (attr.value === NAMESPACES.XML || attr.prefix === null && ignoreNamespaceDefAttr || attr.prefix !== null && localPrefixes[attr.localName] !== attr.value && map[attr.value].includes(attr.localName)) {\n          continue;\n        }\n        if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n          throw new Error(\"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\");\n        }\n        if (requireWellFormed && attr.value === \"\") {\n          throw new Error(\"Namespace prefix declarations cannot be used to undeclare a namespace\");\n        }\n        if (attr.prefix === \"xmlns\") {\n          candidatePrefix = \"xmlns\";\n        }\n      } else if (candidatePrefix === null) {\n        candidatePrefix = generatePrefix(map, attributeNamespace, refs.prefixIndex++);\n        result += ` xmlns:${candidatePrefix}=\"${serializeAttributeValue(attributeNamespace, requireWellFormed)}\"`;\n      }\n    }\n    result += \" \";\n    if (candidatePrefix !== null) {\n      result += candidatePrefix + \":\";\n    }\n    if (requireWellFormed && (attr.localName.includes(\":\") || !xnv.name(attr.localName) || attr.localName === \"xmlns\" && attributeNamespace === null)) {\n      throw new Error(\"Invalid attribute localName value\");\n    }\n    result += `${attr.localName}=\"${serializeAttributeValue(attr.value, requireWellFormed)}\"`;\n  }\n  return result;\n}\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;","map":{"version":3,"names":["xnv","require","NAMESPACES","generatePrefix","map","newNamespace","prefixIndex","generatedPrefix","preferredPrefixString","ns","preferredPrefix","candidateList","includes","length","serializeAttributeValue","value","replace","serializeAttributes","element","localPrefixes","ignoreNamespaceDefAttr","requireWellFormed","refs","result","namespaceLocalnames","Object","create","attr","attributes","namespaceURI","has","localName","Error","Set","add","attributeNamespace","candidatePrefix","prefix","XMLNS","XML","name","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/w3c-xmlserializer/lib/attributes.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst xnv = require(\"xml-name-validator\");\r\n\r\nconst { NAMESPACES } = require(\"./constants\");\r\n\r\nfunction generatePrefix(map, newNamespace, prefixIndex) {\r\n  const generatedPrefix = \"ns\" + prefixIndex;\r\n  map[newNamespace] = [generatedPrefix];\r\n  return generatedPrefix;\r\n}\r\n\r\nfunction preferredPrefixString(map, ns, preferredPrefix) {\r\n  const candidateList = map[ns];\r\n  if (!candidateList) {\r\n    return null;\r\n  }\r\n  if (candidateList.includes(preferredPrefix)) {\r\n    return preferredPrefix;\r\n  }\r\n  return candidateList[candidateList.length - 1];\r\n}\r\n\r\nfunction serializeAttributeValue(value/* , requireWellFormed*/) {\r\n  if (value === null) {\r\n    return \"\";\r\n  }\r\n  // TODO: Check well-formedness\r\n  return value\r\n    .replace(/&/g, \"&amp;\")\r\n    .replace(/\"/g, \"&quot;\")\r\n    .replace(/</g, \"&lt;\")\r\n    .replace(/>/g, \"&gt;\")\r\n    .replace(/\\t/g, \"&#x9;\")\r\n    .replace(/\\n/g, \"&#xA;\")\r\n    .replace(/\\r/g, \"&#xD;\");\r\n}\r\n\r\nfunction serializeAttributes(\r\n  element,\r\n  map,\r\n  localPrefixes,\r\n  ignoreNamespaceDefAttr,\r\n  requireWellFormed,\r\n  refs\r\n) {\r\n  let result = \"\";\r\n  const namespaceLocalnames = Object.create(null);\r\n  for (const attr of element.attributes) {\r\n    if (\r\n      requireWellFormed &&\r\n      namespaceLocalnames[attr.namespaceURI] &&\r\n      namespaceLocalnames[attr.namespaceURI].has(attr.localName)\r\n    ) {\r\n      throw new Error(\"Found duplicated attribute\");\r\n    }\r\n    if (!namespaceLocalnames[attr.namespaceURI]) {\r\n      namespaceLocalnames[attr.namespaceURI] = new Set();\r\n    }\r\n    namespaceLocalnames[attr.namespaceURI].add(attr.localName);\r\n    const attributeNamespace = attr.namespaceURI;\r\n    let candidatePrefix = null;\r\n    if (attributeNamespace !== null) {\r\n      candidatePrefix = preferredPrefixString(\r\n        map,\r\n        attributeNamespace,\r\n        attr.prefix\r\n      );\r\n      if (attributeNamespace === NAMESPACES.XMLNS) {\r\n        if (\r\n          attr.value === NAMESPACES.XML ||\r\n          (attr.prefix === null && ignoreNamespaceDefAttr) ||\r\n          (attr.prefix !== null &&\r\n            localPrefixes[attr.localName] !== attr.value &&\r\n            map[attr.value].includes(attr.localName))\r\n        ) {\r\n          continue;\r\n        }\r\n        if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\r\n          throw new Error(\r\n            \"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\"\r\n          );\r\n        }\r\n        if (requireWellFormed && attr.value === \"\") {\r\n          throw new Error(\r\n            \"Namespace prefix declarations cannot be used to undeclare a namespace\"\r\n          );\r\n        }\r\n        if (attr.prefix === \"xmlns\") {\r\n          candidatePrefix = \"xmlns\";\r\n        }\r\n      } else if (candidatePrefix === null) {\r\n        candidatePrefix = generatePrefix(\r\n          map,\r\n          attributeNamespace,\r\n          refs.prefixIndex++\r\n        );\r\n        result += ` xmlns:${candidatePrefix}=\"${serializeAttributeValue(\r\n          attributeNamespace,\r\n          requireWellFormed\r\n        )}\"`;\r\n      }\r\n    }\r\n\r\n    result += \" \";\r\n    if (candidatePrefix !== null) {\r\n      result += candidatePrefix + \":\";\r\n    }\r\n    if (\r\n      requireWellFormed &&\r\n      (attr.localName.includes(\":\") ||\r\n        !xnv.name(attr.localName) ||\r\n        (attr.localName === \"xmlns\" && attributeNamespace === null))\r\n    ) {\r\n      throw new Error(\"Invalid attribute localName value\");\r\n    }\r\n    result += `${attr.localName}=\"${serializeAttributeValue(\r\n      attr.value,\r\n      requireWellFormed\r\n    )}\"`;\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports.preferredPrefixString = preferredPrefixString;\r\nmodule.exports.generatePrefix = generatePrefix;\r\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\r\nmodule.exports.serializeAttributes = serializeAttributes;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}