{"ast":null,"code":"/*\r\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\n/*jslint vars:false, bitwise:true*/\n/*jshint indent:4*/\n/*global exports:true*/\n(function clone(exports) {\n  'use strict';\n\n  var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;\n  function deepCopy(obj) {\n    var ret = {},\n      key,\n      val;\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        val = obj[key];\n        if (typeof val === 'object' && val !== null) {\n          ret[key] = deepCopy(val);\n        } else {\n          ret[key] = val;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // based on LLVM libc++ upper_bound / lower_bound\n  // MIT License\n\n  function upperBound(array, func) {\n    var diff, len, i, current;\n    len = array.length;\n    i = 0;\n    while (len) {\n      diff = len >>> 1;\n      current = i + diff;\n      if (func(array[current])) {\n        len = diff;\n      } else {\n        i = current + 1;\n        len -= diff + 1;\n      }\n    }\n    return i;\n  }\n  Syntax = {\n    AssignmentExpression: 'AssignmentExpression',\n    AssignmentPattern: 'AssignmentPattern',\n    ArrayExpression: 'ArrayExpression',\n    ArrayPattern: 'ArrayPattern',\n    ArrowFunctionExpression: 'ArrowFunctionExpression',\n    AwaitExpression: 'AwaitExpression',\n    // CAUTION: It's deferred to ES7.\n    BlockStatement: 'BlockStatement',\n    BinaryExpression: 'BinaryExpression',\n    BreakStatement: 'BreakStatement',\n    CallExpression: 'CallExpression',\n    CatchClause: 'CatchClause',\n    ChainExpression: 'ChainExpression',\n    ClassBody: 'ClassBody',\n    ClassDeclaration: 'ClassDeclaration',\n    ClassExpression: 'ClassExpression',\n    ComprehensionBlock: 'ComprehensionBlock',\n    // CAUTION: It's deferred to ES7.\n    ComprehensionExpression: 'ComprehensionExpression',\n    // CAUTION: It's deferred to ES7.\n    ConditionalExpression: 'ConditionalExpression',\n    ContinueStatement: 'ContinueStatement',\n    DebuggerStatement: 'DebuggerStatement',\n    DirectiveStatement: 'DirectiveStatement',\n    DoWhileStatement: 'DoWhileStatement',\n    EmptyStatement: 'EmptyStatement',\n    ExportAllDeclaration: 'ExportAllDeclaration',\n    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n    ExportNamedDeclaration: 'ExportNamedDeclaration',\n    ExportSpecifier: 'ExportSpecifier',\n    ExpressionStatement: 'ExpressionStatement',\n    ForStatement: 'ForStatement',\n    ForInStatement: 'ForInStatement',\n    ForOfStatement: 'ForOfStatement',\n    FunctionDeclaration: 'FunctionDeclaration',\n    FunctionExpression: 'FunctionExpression',\n    GeneratorExpression: 'GeneratorExpression',\n    // CAUTION: It's deferred to ES7.\n    Identifier: 'Identifier',\n    IfStatement: 'IfStatement',\n    ImportExpression: 'ImportExpression',\n    ImportDeclaration: 'ImportDeclaration',\n    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n    ImportSpecifier: 'ImportSpecifier',\n    Literal: 'Literal',\n    LabeledStatement: 'LabeledStatement',\n    LogicalExpression: 'LogicalExpression',\n    MemberExpression: 'MemberExpression',\n    MetaProperty: 'MetaProperty',\n    MethodDefinition: 'MethodDefinition',\n    ModuleSpecifier: 'ModuleSpecifier',\n    NewExpression: 'NewExpression',\n    ObjectExpression: 'ObjectExpression',\n    ObjectPattern: 'ObjectPattern',\n    PrivateIdentifier: 'PrivateIdentifier',\n    Program: 'Program',\n    Property: 'Property',\n    PropertyDefinition: 'PropertyDefinition',\n    RestElement: 'RestElement',\n    ReturnStatement: 'ReturnStatement',\n    SequenceExpression: 'SequenceExpression',\n    SpreadElement: 'SpreadElement',\n    Super: 'Super',\n    SwitchStatement: 'SwitchStatement',\n    SwitchCase: 'SwitchCase',\n    TaggedTemplateExpression: 'TaggedTemplateExpression',\n    TemplateElement: 'TemplateElement',\n    TemplateLiteral: 'TemplateLiteral',\n    ThisExpression: 'ThisExpression',\n    ThrowStatement: 'ThrowStatement',\n    TryStatement: 'TryStatement',\n    UnaryExpression: 'UnaryExpression',\n    UpdateExpression: 'UpdateExpression',\n    VariableDeclaration: 'VariableDeclaration',\n    VariableDeclarator: 'VariableDeclarator',\n    WhileStatement: 'WhileStatement',\n    WithStatement: 'WithStatement',\n    YieldExpression: 'YieldExpression'\n  };\n  VisitorKeys = {\n    AssignmentExpression: ['left', 'right'],\n    AssignmentPattern: ['left', 'right'],\n    ArrayExpression: ['elements'],\n    ArrayPattern: ['elements'],\n    ArrowFunctionExpression: ['params', 'body'],\n    AwaitExpression: ['argument'],\n    // CAUTION: It's deferred to ES7.\n    BlockStatement: ['body'],\n    BinaryExpression: ['left', 'right'],\n    BreakStatement: ['label'],\n    CallExpression: ['callee', 'arguments'],\n    CatchClause: ['param', 'body'],\n    ChainExpression: ['expression'],\n    ClassBody: ['body'],\n    ClassDeclaration: ['id', 'superClass', 'body'],\n    ClassExpression: ['id', 'superClass', 'body'],\n    ComprehensionBlock: ['left', 'right'],\n    // CAUTION: It's deferred to ES7.\n    ComprehensionExpression: ['blocks', 'filter', 'body'],\n    // CAUTION: It's deferred to ES7.\n    ConditionalExpression: ['test', 'consequent', 'alternate'],\n    ContinueStatement: ['label'],\n    DebuggerStatement: [],\n    DirectiveStatement: [],\n    DoWhileStatement: ['body', 'test'],\n    EmptyStatement: [],\n    ExportAllDeclaration: ['source'],\n    ExportDefaultDeclaration: ['declaration'],\n    ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\n    ExportSpecifier: ['exported', 'local'],\n    ExpressionStatement: ['expression'],\n    ForStatement: ['init', 'test', 'update', 'body'],\n    ForInStatement: ['left', 'right', 'body'],\n    ForOfStatement: ['left', 'right', 'body'],\n    FunctionDeclaration: ['id', 'params', 'body'],\n    FunctionExpression: ['id', 'params', 'body'],\n    GeneratorExpression: ['blocks', 'filter', 'body'],\n    // CAUTION: It's deferred to ES7.\n    Identifier: [],\n    IfStatement: ['test', 'consequent', 'alternate'],\n    ImportExpression: ['source'],\n    ImportDeclaration: ['specifiers', 'source'],\n    ImportDefaultSpecifier: ['local'],\n    ImportNamespaceSpecifier: ['local'],\n    ImportSpecifier: ['imported', 'local'],\n    Literal: [],\n    LabeledStatement: ['label', 'body'],\n    LogicalExpression: ['left', 'right'],\n    MemberExpression: ['object', 'property'],\n    MetaProperty: ['meta', 'property'],\n    MethodDefinition: ['key', 'value'],\n    ModuleSpecifier: [],\n    NewExpression: ['callee', 'arguments'],\n    ObjectExpression: ['properties'],\n    ObjectPattern: ['properties'],\n    PrivateIdentifier: [],\n    Program: ['body'],\n    Property: ['key', 'value'],\n    PropertyDefinition: ['key', 'value'],\n    RestElement: ['argument'],\n    ReturnStatement: ['argument'],\n    SequenceExpression: ['expressions'],\n    SpreadElement: ['argument'],\n    Super: [],\n    SwitchStatement: ['discriminant', 'cases'],\n    SwitchCase: ['test', 'consequent'],\n    TaggedTemplateExpression: ['tag', 'quasi'],\n    TemplateElement: [],\n    TemplateLiteral: ['quasis', 'expressions'],\n    ThisExpression: [],\n    ThrowStatement: ['argument'],\n    TryStatement: ['block', 'handler', 'finalizer'],\n    UnaryExpression: ['argument'],\n    UpdateExpression: ['argument'],\n    VariableDeclaration: ['declarations'],\n    VariableDeclarator: ['id', 'init'],\n    WhileStatement: ['test', 'body'],\n    WithStatement: ['object', 'body'],\n    YieldExpression: ['argument']\n  };\n\n  // unique id\n  BREAK = {};\n  SKIP = {};\n  REMOVE = {};\n  VisitorOption = {\n    Break: BREAK,\n    Skip: SKIP,\n    Remove: REMOVE\n  };\n  function Reference(parent, key) {\n    this.parent = parent;\n    this.key = key;\n  }\n  Reference.prototype.replace = function replace(node) {\n    this.parent[this.key] = node;\n  };\n  Reference.prototype.remove = function remove() {\n    if (Array.isArray(this.parent)) {\n      this.parent.splice(this.key, 1);\n      return true;\n    } else {\n      this.replace(null);\n      return false;\n    }\n  };\n  function Element(node, path, wrap, ref) {\n    this.node = node;\n    this.path = path;\n    this.wrap = wrap;\n    this.ref = ref;\n  }\n  function Controller() {}\n\n  // API:\n  // return property path array from root to current node\n  Controller.prototype.path = function path() {\n    var i, iz, j, jz, result, element;\n    function addToPath(result, path) {\n      if (Array.isArray(path)) {\n        for (j = 0, jz = path.length; j < jz; ++j) {\n          result.push(path[j]);\n        }\n      } else {\n        result.push(path);\n      }\n    }\n\n    // root node\n    if (!this.__current.path) {\n      return null;\n    }\n\n    // first node is sentinel, second node is root element\n    result = [];\n    for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n      element = this.__leavelist[i];\n      addToPath(result, element.path);\n    }\n    addToPath(result, this.__current.path);\n    return result;\n  };\n\n  // API:\n  // return type of current node\n  Controller.prototype.type = function () {\n    var node = this.current();\n    return node.type || this.__current.wrap;\n  };\n\n  // API:\n  // return array of parent elements\n  Controller.prototype.parents = function parents() {\n    var i, iz, result;\n\n    // first node is sentinel\n    result = [];\n    for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n      result.push(this.__leavelist[i].node);\n    }\n    return result;\n  };\n\n  // API:\n  // return current node\n  Controller.prototype.current = function current() {\n    return this.__current.node;\n  };\n  Controller.prototype.__execute = function __execute(callback, element) {\n    var previous, result;\n    result = undefined;\n    previous = this.__current;\n    this.__current = element;\n    this.__state = null;\n    if (callback) {\n      result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n    }\n    this.__current = previous;\n    return result;\n  };\n\n  // API:\n  // notify control skip / break\n  Controller.prototype.notify = function notify(flag) {\n    this.__state = flag;\n  };\n\n  // API:\n  // skip child nodes of current node\n  Controller.prototype.skip = function () {\n    this.notify(SKIP);\n  };\n\n  // API:\n  // break traversals\n  Controller.prototype['break'] = function () {\n    this.notify(BREAK);\n  };\n\n  // API:\n  // remove node\n  Controller.prototype.remove = function () {\n    this.notify(REMOVE);\n  };\n  Controller.prototype.__initialize = function (root, visitor) {\n    this.visitor = visitor;\n    this.root = root;\n    this.__worklist = [];\n    this.__leavelist = [];\n    this.__current = null;\n    this.__state = null;\n    this.__fallback = null;\n    if (visitor.fallback === 'iteration') {\n      this.__fallback = Object.keys;\n    } else if (typeof visitor.fallback === 'function') {\n      this.__fallback = visitor.fallback;\n    }\n    this.__keys = VisitorKeys;\n    if (visitor.keys) {\n      this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\n    }\n  };\n  function isNode(node) {\n    if (node == null) {\n      return false;\n    }\n    return typeof node === 'object' && typeof node.type === 'string';\n  }\n  function isProperty(nodeType, key) {\n    return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\n  }\n  function candidateExistsInLeaveList(leavelist, candidate) {\n    for (var i = leavelist.length - 1; i >= 0; --i) {\n      if (leavelist[i].node === candidate) {\n        return true;\n      }\n    }\n    return false;\n  }\n  Controller.prototype.traverse = function traverse(root, visitor) {\n    var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;\n    this.__initialize(root, visitor);\n    sentinel = {};\n\n    // reference\n    worklist = this.__worklist;\n    leavelist = this.__leavelist;\n\n    // initialize\n    worklist.push(new Element(root, null, null, null));\n    leavelist.push(new Element(null, null, null, null));\n    while (worklist.length) {\n      element = worklist.pop();\n      if (element === sentinel) {\n        element = leavelist.pop();\n        ret = this.__execute(visitor.leave, element);\n        if (this.__state === BREAK || ret === BREAK) {\n          return;\n        }\n        continue;\n      }\n      if (element.node) {\n        ret = this.__execute(visitor.enter, element);\n        if (this.__state === BREAK || ret === BREAK) {\n          return;\n        }\n        worklist.push(sentinel);\n        leavelist.push(element);\n        if (this.__state === SKIP || ret === SKIP) {\n          continue;\n        }\n        node = element.node;\n        nodeType = node.type || element.wrap;\n        candidates = this.__keys[nodeType];\n        if (!candidates) {\n          if (this.__fallback) {\n            candidates = this.__fallback(node);\n          } else {\n            throw new Error('Unknown node type ' + nodeType + '.');\n          }\n        }\n        current = candidates.length;\n        while ((current -= 1) >= 0) {\n          key = candidates[current];\n          candidate = node[key];\n          if (!candidate) {\n            continue;\n          }\n          if (Array.isArray(candidate)) {\n            current2 = candidate.length;\n            while ((current2 -= 1) >= 0) {\n              if (!candidate[current2]) {\n                continue;\n              }\n              if (candidateExistsInLeaveList(leavelist, candidate[current2])) {\n                continue;\n              }\n              if (isProperty(nodeType, candidates[current])) {\n                element = new Element(candidate[current2], [key, current2], 'Property', null);\n              } else if (isNode(candidate[current2])) {\n                element = new Element(candidate[current2], [key, current2], null, null);\n              } else {\n                continue;\n              }\n              worklist.push(element);\n            }\n          } else if (isNode(candidate)) {\n            if (candidateExistsInLeaveList(leavelist, candidate)) {\n              continue;\n            }\n            worklist.push(new Element(candidate, key, null, null));\n          }\n        }\n      }\n    }\n  };\n  Controller.prototype.replace = function replace(root, visitor) {\n    var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;\n    function removeElem(element) {\n      var i, key, nextElem, parent;\n      if (element.ref.remove()) {\n        // When the reference is an element of an array.\n        key = element.ref.key;\n        parent = element.ref.parent;\n\n        // If removed from array, then decrease following items' keys.\n        i = worklist.length;\n        while (i--) {\n          nextElem = worklist[i];\n          if (nextElem.ref && nextElem.ref.parent === parent) {\n            if (nextElem.ref.key < key) {\n              break;\n            }\n            --nextElem.ref.key;\n          }\n        }\n      }\n    }\n    this.__initialize(root, visitor);\n    sentinel = {};\n\n    // reference\n    worklist = this.__worklist;\n    leavelist = this.__leavelist;\n\n    // initialize\n    outer = {\n      root: root\n    };\n    element = new Element(root, null, null, new Reference(outer, 'root'));\n    worklist.push(element);\n    leavelist.push(element);\n    while (worklist.length) {\n      element = worklist.pop();\n      if (element === sentinel) {\n        element = leavelist.pop();\n        target = this.__execute(visitor.leave, element);\n\n        // node may be replaced with null,\n        // so distinguish between undefined and null in this place\n        if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n          // replace\n          element.ref.replace(target);\n        }\n        if (this.__state === REMOVE || target === REMOVE) {\n          removeElem(element);\n        }\n        if (this.__state === BREAK || target === BREAK) {\n          return outer.root;\n        }\n        continue;\n      }\n      target = this.__execute(visitor.enter, element);\n\n      // node may be replaced with null,\n      // so distinguish between undefined and null in this place\n      if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n        // replace\n        element.ref.replace(target);\n        element.node = target;\n      }\n      if (this.__state === REMOVE || target === REMOVE) {\n        removeElem(element);\n        element.node = null;\n      }\n      if (this.__state === BREAK || target === BREAK) {\n        return outer.root;\n      }\n\n      // node may be null\n      node = element.node;\n      if (!node) {\n        continue;\n      }\n      worklist.push(sentinel);\n      leavelist.push(element);\n      if (this.__state === SKIP || target === SKIP) {\n        continue;\n      }\n      nodeType = node.type || element.wrap;\n      candidates = this.__keys[nodeType];\n      if (!candidates) {\n        if (this.__fallback) {\n          candidates = this.__fallback(node);\n        } else {\n          throw new Error('Unknown node type ' + nodeType + '.');\n        }\n      }\n      current = candidates.length;\n      while ((current -= 1) >= 0) {\n        key = candidates[current];\n        candidate = node[key];\n        if (!candidate) {\n          continue;\n        }\n        if (Array.isArray(candidate)) {\n          current2 = candidate.length;\n          while ((current2 -= 1) >= 0) {\n            if (!candidate[current2]) {\n              continue;\n            }\n            if (isProperty(nodeType, candidates[current])) {\n              element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\n            } else if (isNode(candidate[current2])) {\n              element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\n            } else {\n              continue;\n            }\n            worklist.push(element);\n          }\n        } else if (isNode(candidate)) {\n          worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n        }\n      }\n    }\n    return outer.root;\n  };\n  function traverse(root, visitor) {\n    var controller = new Controller();\n    return controller.traverse(root, visitor);\n  }\n  function replace(root, visitor) {\n    var controller = new Controller();\n    return controller.replace(root, visitor);\n  }\n  function extendCommentRange(comment, tokens) {\n    var target;\n    target = upperBound(tokens, function search(token) {\n      return token.range[0] > comment.range[0];\n    });\n    comment.extendedRange = [comment.range[0], comment.range[1]];\n    if (target !== tokens.length) {\n      comment.extendedRange[1] = tokens[target].range[0];\n    }\n    target -= 1;\n    if (target >= 0) {\n      comment.extendedRange[0] = tokens[target].range[1];\n    }\n    return comment;\n  }\n  function attachComments(tree, providedComments, tokens) {\n    // At first, we should calculate extended comment ranges.\n    var comments = [],\n      comment,\n      len,\n      i,\n      cursor;\n    if (!tree.range) {\n      throw new Error('attachComments needs range information');\n    }\n\n    // tokens array is empty, we attach comments to tree as 'leadingComments'\n    if (!tokens.length) {\n      if (providedComments.length) {\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n          comment = deepCopy(providedComments[i]);\n          comment.extendedRange = [0, tree.range[0]];\n          comments.push(comment);\n        }\n        tree.leadingComments = comments;\n      }\n      return tree;\n    }\n    for (i = 0, len = providedComments.length; i < len; i += 1) {\n      comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n    }\n\n    // This is based on John Freeman's implementation.\n    cursor = 0;\n    traverse(tree, {\n      enter: function (node) {\n        var comment;\n        while (cursor < comments.length) {\n          comment = comments[cursor];\n          if (comment.extendedRange[1] > node.range[0]) {\n            break;\n          }\n          if (comment.extendedRange[1] === node.range[0]) {\n            if (!node.leadingComments) {\n              node.leadingComments = [];\n            }\n            node.leadingComments.push(comment);\n            comments.splice(cursor, 1);\n          } else {\n            cursor += 1;\n          }\n        }\n\n        // already out of owned node\n        if (cursor === comments.length) {\n          return VisitorOption.Break;\n        }\n        if (comments[cursor].extendedRange[0] > node.range[1]) {\n          return VisitorOption.Skip;\n        }\n      }\n    });\n    cursor = 0;\n    traverse(tree, {\n      leave: function (node) {\n        var comment;\n        while (cursor < comments.length) {\n          comment = comments[cursor];\n          if (node.range[1] < comment.extendedRange[0]) {\n            break;\n          }\n          if (node.range[1] === comment.extendedRange[0]) {\n            if (!node.trailingComments) {\n              node.trailingComments = [];\n            }\n            node.trailingComments.push(comment);\n            comments.splice(cursor, 1);\n          } else {\n            cursor += 1;\n          }\n        }\n\n        // already out of owned node\n        if (cursor === comments.length) {\n          return VisitorOption.Break;\n        }\n        if (comments[cursor].extendedRange[0] > node.range[1]) {\n          return VisitorOption.Skip;\n        }\n      }\n    });\n    return tree;\n  }\n  exports.Syntax = Syntax;\n  exports.traverse = traverse;\n  exports.replace = replace;\n  exports.attachComments = attachComments;\n  exports.VisitorKeys = VisitorKeys;\n  exports.VisitorOption = VisitorOption;\n  exports.Controller = Controller;\n  exports.cloneEnvironment = function () {\n    return clone({});\n  };\n  return exports;\n})(exports);\n/* vim: set sw=4 ts=4 et tw=80 : */","map":{"version":3,"names":["clone","exports","Syntax","VisitorOption","VisitorKeys","BREAK","SKIP","REMOVE","deepCopy","obj","ret","key","val","hasOwnProperty","upperBound","array","func","diff","len","i","current","length","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BlockStatement","BinaryExpression","BreakStatement","CallExpression","CatchClause","ChainExpression","ClassBody","ClassDeclaration","ClassExpression","ComprehensionBlock","ComprehensionExpression","ConditionalExpression","ContinueStatement","DebuggerStatement","DirectiveStatement","DoWhileStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForStatement","ForInStatement","ForOfStatement","FunctionDeclaration","FunctionExpression","GeneratorExpression","Identifier","IfStatement","ImportExpression","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","ModuleSpecifier","NewExpression","ObjectExpression","ObjectPattern","PrivateIdentifier","Program","Property","PropertyDefinition","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchStatement","SwitchCase","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","Break","Skip","Remove","Reference","parent","prototype","replace","node","remove","Array","isArray","splice","Element","path","wrap","ref","Controller","iz","j","jz","result","element","addToPath","push","__current","__leavelist","type","parents","__execute","callback","previous","undefined","__state","call","notify","flag","skip","__initialize","root","visitor","__worklist","__fallback","fallback","Object","keys","__keys","assign","create","isNode","isProperty","nodeType","candidateExistsInLeaveList","leavelist","candidate","traverse","worklist","current2","candidates","sentinel","pop","leave","enter","Error","target","outer","removeElem","nextElem","controller","extendCommentRange","comment","tokens","search","token","range","extendedRange","attachComments","tree","providedComments","comments","cursor","leadingComments","trailingComments","cloneEnvironment"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/estraverse/estraverse.js"],"sourcesContent":["/*\r\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n/*jslint vars:false, bitwise:true*/\r\n/*jshint indent:4*/\r\n/*global exports:true*/\r\n(function clone(exports) {\r\n    'use strict';\r\n\r\n    var Syntax,\r\n        VisitorOption,\r\n        VisitorKeys,\r\n        BREAK,\r\n        SKIP,\r\n        REMOVE;\r\n\r\n    function deepCopy(obj) {\r\n        var ret = {}, key, val;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                val = obj[key];\r\n                if (typeof val === 'object' && val !== null) {\r\n                    ret[key] = deepCopy(val);\r\n                } else {\r\n                    ret[key] = val;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    // based on LLVM libc++ upper_bound / lower_bound\r\n    // MIT License\r\n\r\n    function upperBound(array, func) {\r\n        var diff, len, i, current;\r\n\r\n        len = array.length;\r\n        i = 0;\r\n\r\n        while (len) {\r\n            diff = len >>> 1;\r\n            current = i + diff;\r\n            if (func(array[current])) {\r\n                len = diff;\r\n            } else {\r\n                i = current + 1;\r\n                len -= diff + 1;\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n\r\n    Syntax = {\r\n        AssignmentExpression: 'AssignmentExpression',\r\n        AssignmentPattern: 'AssignmentPattern',\r\n        ArrayExpression: 'ArrayExpression',\r\n        ArrayPattern: 'ArrayPattern',\r\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\r\n        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.\r\n        BlockStatement: 'BlockStatement',\r\n        BinaryExpression: 'BinaryExpression',\r\n        BreakStatement: 'BreakStatement',\r\n        CallExpression: 'CallExpression',\r\n        CatchClause: 'CatchClause',\r\n        ChainExpression: 'ChainExpression',\r\n        ClassBody: 'ClassBody',\r\n        ClassDeclaration: 'ClassDeclaration',\r\n        ClassExpression: 'ClassExpression',\r\n        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.\r\n        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.\r\n        ConditionalExpression: 'ConditionalExpression',\r\n        ContinueStatement: 'ContinueStatement',\r\n        DebuggerStatement: 'DebuggerStatement',\r\n        DirectiveStatement: 'DirectiveStatement',\r\n        DoWhileStatement: 'DoWhileStatement',\r\n        EmptyStatement: 'EmptyStatement',\r\n        ExportAllDeclaration: 'ExportAllDeclaration',\r\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\r\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\r\n        ExportSpecifier: 'ExportSpecifier',\r\n        ExpressionStatement: 'ExpressionStatement',\r\n        ForStatement: 'ForStatement',\r\n        ForInStatement: 'ForInStatement',\r\n        ForOfStatement: 'ForOfStatement',\r\n        FunctionDeclaration: 'FunctionDeclaration',\r\n        FunctionExpression: 'FunctionExpression',\r\n        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.\r\n        Identifier: 'Identifier',\r\n        IfStatement: 'IfStatement',\r\n        ImportExpression: 'ImportExpression',\r\n        ImportDeclaration: 'ImportDeclaration',\r\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\r\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\r\n        ImportSpecifier: 'ImportSpecifier',\r\n        Literal: 'Literal',\r\n        LabeledStatement: 'LabeledStatement',\r\n        LogicalExpression: 'LogicalExpression',\r\n        MemberExpression: 'MemberExpression',\r\n        MetaProperty: 'MetaProperty',\r\n        MethodDefinition: 'MethodDefinition',\r\n        ModuleSpecifier: 'ModuleSpecifier',\r\n        NewExpression: 'NewExpression',\r\n        ObjectExpression: 'ObjectExpression',\r\n        ObjectPattern: 'ObjectPattern',\r\n        PrivateIdentifier: 'PrivateIdentifier',\r\n        Program: 'Program',\r\n        Property: 'Property',\r\n        PropertyDefinition: 'PropertyDefinition',\r\n        RestElement: 'RestElement',\r\n        ReturnStatement: 'ReturnStatement',\r\n        SequenceExpression: 'SequenceExpression',\r\n        SpreadElement: 'SpreadElement',\r\n        Super: 'Super',\r\n        SwitchStatement: 'SwitchStatement',\r\n        SwitchCase: 'SwitchCase',\r\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\r\n        TemplateElement: 'TemplateElement',\r\n        TemplateLiteral: 'TemplateLiteral',\r\n        ThisExpression: 'ThisExpression',\r\n        ThrowStatement: 'ThrowStatement',\r\n        TryStatement: 'TryStatement',\r\n        UnaryExpression: 'UnaryExpression',\r\n        UpdateExpression: 'UpdateExpression',\r\n        VariableDeclaration: 'VariableDeclaration',\r\n        VariableDeclarator: 'VariableDeclarator',\r\n        WhileStatement: 'WhileStatement',\r\n        WithStatement: 'WithStatement',\r\n        YieldExpression: 'YieldExpression'\r\n    };\r\n\r\n    VisitorKeys = {\r\n        AssignmentExpression: ['left', 'right'],\r\n        AssignmentPattern: ['left', 'right'],\r\n        ArrayExpression: ['elements'],\r\n        ArrayPattern: ['elements'],\r\n        ArrowFunctionExpression: ['params', 'body'],\r\n        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.\r\n        BlockStatement: ['body'],\r\n        BinaryExpression: ['left', 'right'],\r\n        BreakStatement: ['label'],\r\n        CallExpression: ['callee', 'arguments'],\r\n        CatchClause: ['param', 'body'],\r\n        ChainExpression: ['expression'],\r\n        ClassBody: ['body'],\r\n        ClassDeclaration: ['id', 'superClass', 'body'],\r\n        ClassExpression: ['id', 'superClass', 'body'],\r\n        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.\r\n        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\r\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\r\n        ContinueStatement: ['label'],\r\n        DebuggerStatement: [],\r\n        DirectiveStatement: [],\r\n        DoWhileStatement: ['body', 'test'],\r\n        EmptyStatement: [],\r\n        ExportAllDeclaration: ['source'],\r\n        ExportDefaultDeclaration: ['declaration'],\r\n        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\r\n        ExportSpecifier: ['exported', 'local'],\r\n        ExpressionStatement: ['expression'],\r\n        ForStatement: ['init', 'test', 'update', 'body'],\r\n        ForInStatement: ['left', 'right', 'body'],\r\n        ForOfStatement: ['left', 'right', 'body'],\r\n        FunctionDeclaration: ['id', 'params', 'body'],\r\n        FunctionExpression: ['id', 'params', 'body'],\r\n        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\r\n        Identifier: [],\r\n        IfStatement: ['test', 'consequent', 'alternate'],\r\n        ImportExpression: ['source'],\r\n        ImportDeclaration: ['specifiers', 'source'],\r\n        ImportDefaultSpecifier: ['local'],\r\n        ImportNamespaceSpecifier: ['local'],\r\n        ImportSpecifier: ['imported', 'local'],\r\n        Literal: [],\r\n        LabeledStatement: ['label', 'body'],\r\n        LogicalExpression: ['left', 'right'],\r\n        MemberExpression: ['object', 'property'],\r\n        MetaProperty: ['meta', 'property'],\r\n        MethodDefinition: ['key', 'value'],\r\n        ModuleSpecifier: [],\r\n        NewExpression: ['callee', 'arguments'],\r\n        ObjectExpression: ['properties'],\r\n        ObjectPattern: ['properties'],\r\n        PrivateIdentifier: [],\r\n        Program: ['body'],\r\n        Property: ['key', 'value'],\r\n        PropertyDefinition: ['key', 'value'],\r\n        RestElement: [ 'argument' ],\r\n        ReturnStatement: ['argument'],\r\n        SequenceExpression: ['expressions'],\r\n        SpreadElement: ['argument'],\r\n        Super: [],\r\n        SwitchStatement: ['discriminant', 'cases'],\r\n        SwitchCase: ['test', 'consequent'],\r\n        TaggedTemplateExpression: ['tag', 'quasi'],\r\n        TemplateElement: [],\r\n        TemplateLiteral: ['quasis', 'expressions'],\r\n        ThisExpression: [],\r\n        ThrowStatement: ['argument'],\r\n        TryStatement: ['block', 'handler', 'finalizer'],\r\n        UnaryExpression: ['argument'],\r\n        UpdateExpression: ['argument'],\r\n        VariableDeclaration: ['declarations'],\r\n        VariableDeclarator: ['id', 'init'],\r\n        WhileStatement: ['test', 'body'],\r\n        WithStatement: ['object', 'body'],\r\n        YieldExpression: ['argument']\r\n    };\r\n\r\n    // unique id\r\n    BREAK = {};\r\n    SKIP = {};\r\n    REMOVE = {};\r\n\r\n    VisitorOption = {\r\n        Break: BREAK,\r\n        Skip: SKIP,\r\n        Remove: REMOVE\r\n    };\r\n\r\n    function Reference(parent, key) {\r\n        this.parent = parent;\r\n        this.key = key;\r\n    }\r\n\r\n    Reference.prototype.replace = function replace(node) {\r\n        this.parent[this.key] = node;\r\n    };\r\n\r\n    Reference.prototype.remove = function remove() {\r\n        if (Array.isArray(this.parent)) {\r\n            this.parent.splice(this.key, 1);\r\n            return true;\r\n        } else {\r\n            this.replace(null);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    function Element(node, path, wrap, ref) {\r\n        this.node = node;\r\n        this.path = path;\r\n        this.wrap = wrap;\r\n        this.ref = ref;\r\n    }\r\n\r\n    function Controller() { }\r\n\r\n    // API:\r\n    // return property path array from root to current node\r\n    Controller.prototype.path = function path() {\r\n        var i, iz, j, jz, result, element;\r\n\r\n        function addToPath(result, path) {\r\n            if (Array.isArray(path)) {\r\n                for (j = 0, jz = path.length; j < jz; ++j) {\r\n                    result.push(path[j]);\r\n                }\r\n            } else {\r\n                result.push(path);\r\n            }\r\n        }\r\n\r\n        // root node\r\n        if (!this.__current.path) {\r\n            return null;\r\n        }\r\n\r\n        // first node is sentinel, second node is root element\r\n        result = [];\r\n        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\r\n            element = this.__leavelist[i];\r\n            addToPath(result, element.path);\r\n        }\r\n        addToPath(result, this.__current.path);\r\n        return result;\r\n    };\r\n\r\n    // API:\r\n    // return type of current node\r\n    Controller.prototype.type = function () {\r\n        var node = this.current();\r\n        return node.type || this.__current.wrap;\r\n    };\r\n\r\n    // API:\r\n    // return array of parent elements\r\n    Controller.prototype.parents = function parents() {\r\n        var i, iz, result;\r\n\r\n        // first node is sentinel\r\n        result = [];\r\n        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\r\n            result.push(this.__leavelist[i].node);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    // API:\r\n    // return current node\r\n    Controller.prototype.current = function current() {\r\n        return this.__current.node;\r\n    };\r\n\r\n    Controller.prototype.__execute = function __execute(callback, element) {\r\n        var previous, result;\r\n\r\n        result = undefined;\r\n\r\n        previous  = this.__current;\r\n        this.__current = element;\r\n        this.__state = null;\r\n        if (callback) {\r\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\r\n        }\r\n        this.__current = previous;\r\n\r\n        return result;\r\n    };\r\n\r\n    // API:\r\n    // notify control skip / break\r\n    Controller.prototype.notify = function notify(flag) {\r\n        this.__state = flag;\r\n    };\r\n\r\n    // API:\r\n    // skip child nodes of current node\r\n    Controller.prototype.skip = function () {\r\n        this.notify(SKIP);\r\n    };\r\n\r\n    // API:\r\n    // break traversals\r\n    Controller.prototype['break'] = function () {\r\n        this.notify(BREAK);\r\n    };\r\n\r\n    // API:\r\n    // remove node\r\n    Controller.prototype.remove = function () {\r\n        this.notify(REMOVE);\r\n    };\r\n\r\n    Controller.prototype.__initialize = function(root, visitor) {\r\n        this.visitor = visitor;\r\n        this.root = root;\r\n        this.__worklist = [];\r\n        this.__leavelist = [];\r\n        this.__current = null;\r\n        this.__state = null;\r\n        this.__fallback = null;\r\n        if (visitor.fallback === 'iteration') {\r\n            this.__fallback = Object.keys;\r\n        } else if (typeof visitor.fallback === 'function') {\r\n            this.__fallback = visitor.fallback;\r\n        }\r\n\r\n        this.__keys = VisitorKeys;\r\n        if (visitor.keys) {\r\n            this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\r\n        }\r\n    };\r\n\r\n    function isNode(node) {\r\n        if (node == null) {\r\n            return false;\r\n        }\r\n        return typeof node === 'object' && typeof node.type === 'string';\r\n    }\r\n\r\n    function isProperty(nodeType, key) {\r\n        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\r\n    }\r\n  \r\n    function candidateExistsInLeaveList(leavelist, candidate) {\r\n        for (var i = leavelist.length - 1; i >= 0; --i) {\r\n            if (leavelist[i].node === candidate) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    Controller.prototype.traverse = function traverse(root, visitor) {\r\n        var worklist,\r\n            leavelist,\r\n            element,\r\n            node,\r\n            nodeType,\r\n            ret,\r\n            key,\r\n            current,\r\n            current2,\r\n            candidates,\r\n            candidate,\r\n            sentinel;\r\n\r\n        this.__initialize(root, visitor);\r\n\r\n        sentinel = {};\r\n\r\n        // reference\r\n        worklist = this.__worklist;\r\n        leavelist = this.__leavelist;\r\n\r\n        // initialize\r\n        worklist.push(new Element(root, null, null, null));\r\n        leavelist.push(new Element(null, null, null, null));\r\n\r\n        while (worklist.length) {\r\n            element = worklist.pop();\r\n\r\n            if (element === sentinel) {\r\n                element = leavelist.pop();\r\n\r\n                ret = this.__execute(visitor.leave, element);\r\n\r\n                if (this.__state === BREAK || ret === BREAK) {\r\n                    return;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (element.node) {\r\n\r\n                ret = this.__execute(visitor.enter, element);\r\n\r\n                if (this.__state === BREAK || ret === BREAK) {\r\n                    return;\r\n                }\r\n\r\n                worklist.push(sentinel);\r\n                leavelist.push(element);\r\n\r\n                if (this.__state === SKIP || ret === SKIP) {\r\n                    continue;\r\n                }\r\n\r\n                node = element.node;\r\n                nodeType = node.type || element.wrap;\r\n                candidates = this.__keys[nodeType];\r\n                if (!candidates) {\r\n                    if (this.__fallback) {\r\n                        candidates = this.__fallback(node);\r\n                    } else {\r\n                        throw new Error('Unknown node type ' + nodeType + '.');\r\n                    }\r\n                }\r\n\r\n                current = candidates.length;\r\n                while ((current -= 1) >= 0) {\r\n                    key = candidates[current];\r\n                    candidate = node[key];\r\n                    if (!candidate) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (Array.isArray(candidate)) {\r\n                        current2 = candidate.length;\r\n                        while ((current2 -= 1) >= 0) {\r\n                            if (!candidate[current2]) {\r\n                                continue;\r\n                            }\r\n\r\n                            if (candidateExistsInLeaveList(leavelist, candidate[current2])) {\r\n                              continue;\r\n                            }\r\n\r\n                            if (isProperty(nodeType, candidates[current])) {\r\n                                element = new Element(candidate[current2], [key, current2], 'Property', null);\r\n                            } else if (isNode(candidate[current2])) {\r\n                                element = new Element(candidate[current2], [key, current2], null, null);\r\n                            } else {\r\n                                continue;\r\n                            }\r\n                            worklist.push(element);\r\n                        }\r\n                    } else if (isNode(candidate)) {\r\n                        if (candidateExistsInLeaveList(leavelist, candidate)) {\r\n                          continue;\r\n                        }\r\n\r\n                        worklist.push(new Element(candidate, key, null, null));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Controller.prototype.replace = function replace(root, visitor) {\r\n        var worklist,\r\n            leavelist,\r\n            node,\r\n            nodeType,\r\n            target,\r\n            element,\r\n            current,\r\n            current2,\r\n            candidates,\r\n            candidate,\r\n            sentinel,\r\n            outer,\r\n            key;\r\n\r\n        function removeElem(element) {\r\n            var i,\r\n                key,\r\n                nextElem,\r\n                parent;\r\n\r\n            if (element.ref.remove()) {\r\n                // When the reference is an element of an array.\r\n                key = element.ref.key;\r\n                parent = element.ref.parent;\r\n\r\n                // If removed from array, then decrease following items' keys.\r\n                i = worklist.length;\r\n                while (i--) {\r\n                    nextElem = worklist[i];\r\n                    if (nextElem.ref && nextElem.ref.parent === parent) {\r\n                        if  (nextElem.ref.key < key) {\r\n                            break;\r\n                        }\r\n                        --nextElem.ref.key;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.__initialize(root, visitor);\r\n\r\n        sentinel = {};\r\n\r\n        // reference\r\n        worklist = this.__worklist;\r\n        leavelist = this.__leavelist;\r\n\r\n        // initialize\r\n        outer = {\r\n            root: root\r\n        };\r\n        element = new Element(root, null, null, new Reference(outer, 'root'));\r\n        worklist.push(element);\r\n        leavelist.push(element);\r\n\r\n        while (worklist.length) {\r\n            element = worklist.pop();\r\n\r\n            if (element === sentinel) {\r\n                element = leavelist.pop();\r\n\r\n                target = this.__execute(visitor.leave, element);\r\n\r\n                // node may be replaced with null,\r\n                // so distinguish between undefined and null in this place\r\n                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\r\n                    // replace\r\n                    element.ref.replace(target);\r\n                }\r\n\r\n                if (this.__state === REMOVE || target === REMOVE) {\r\n                    removeElem(element);\r\n                }\r\n\r\n                if (this.__state === BREAK || target === BREAK) {\r\n                    return outer.root;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            target = this.__execute(visitor.enter, element);\r\n\r\n            // node may be replaced with null,\r\n            // so distinguish between undefined and null in this place\r\n            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\r\n                // replace\r\n                element.ref.replace(target);\r\n                element.node = target;\r\n            }\r\n\r\n            if (this.__state === REMOVE || target === REMOVE) {\r\n                removeElem(element);\r\n                element.node = null;\r\n            }\r\n\r\n            if (this.__state === BREAK || target === BREAK) {\r\n                return outer.root;\r\n            }\r\n\r\n            // node may be null\r\n            node = element.node;\r\n            if (!node) {\r\n                continue;\r\n            }\r\n\r\n            worklist.push(sentinel);\r\n            leavelist.push(element);\r\n\r\n            if (this.__state === SKIP || target === SKIP) {\r\n                continue;\r\n            }\r\n\r\n            nodeType = node.type || element.wrap;\r\n            candidates = this.__keys[nodeType];\r\n            if (!candidates) {\r\n                if (this.__fallback) {\r\n                    candidates = this.__fallback(node);\r\n                } else {\r\n                    throw new Error('Unknown node type ' + nodeType + '.');\r\n                }\r\n            }\r\n\r\n            current = candidates.length;\r\n            while ((current -= 1) >= 0) {\r\n                key = candidates[current];\r\n                candidate = node[key];\r\n                if (!candidate) {\r\n                    continue;\r\n                }\r\n\r\n                if (Array.isArray(candidate)) {\r\n                    current2 = candidate.length;\r\n                    while ((current2 -= 1) >= 0) {\r\n                        if (!candidate[current2]) {\r\n                            continue;\r\n                        }\r\n                        if (isProperty(nodeType, candidates[current])) {\r\n                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\r\n                        } else if (isNode(candidate[current2])) {\r\n                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\r\n                        } else {\r\n                            continue;\r\n                        }\r\n                        worklist.push(element);\r\n                    }\r\n                } else if (isNode(candidate)) {\r\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\r\n                }\r\n            }\r\n        }\r\n\r\n        return outer.root;\r\n    };\r\n\r\n    function traverse(root, visitor) {\r\n        var controller = new Controller();\r\n        return controller.traverse(root, visitor);\r\n    }\r\n\r\n    function replace(root, visitor) {\r\n        var controller = new Controller();\r\n        return controller.replace(root, visitor);\r\n    }\r\n\r\n    function extendCommentRange(comment, tokens) {\r\n        var target;\r\n\r\n        target = upperBound(tokens, function search(token) {\r\n            return token.range[0] > comment.range[0];\r\n        });\r\n\r\n        comment.extendedRange = [comment.range[0], comment.range[1]];\r\n\r\n        if (target !== tokens.length) {\r\n            comment.extendedRange[1] = tokens[target].range[0];\r\n        }\r\n\r\n        target -= 1;\r\n        if (target >= 0) {\r\n            comment.extendedRange[0] = tokens[target].range[1];\r\n        }\r\n\r\n        return comment;\r\n    }\r\n\r\n    function attachComments(tree, providedComments, tokens) {\r\n        // At first, we should calculate extended comment ranges.\r\n        var comments = [], comment, len, i, cursor;\r\n\r\n        if (!tree.range) {\r\n            throw new Error('attachComments needs range information');\r\n        }\r\n\r\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\r\n        if (!tokens.length) {\r\n            if (providedComments.length) {\r\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\r\n                    comment = deepCopy(providedComments[i]);\r\n                    comment.extendedRange = [0, tree.range[0]];\r\n                    comments.push(comment);\r\n                }\r\n                tree.leadingComments = comments;\r\n            }\r\n            return tree;\r\n        }\r\n\r\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\r\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\r\n        }\r\n\r\n        // This is based on John Freeman's implementation.\r\n        cursor = 0;\r\n        traverse(tree, {\r\n            enter: function (node) {\r\n                var comment;\r\n\r\n                while (cursor < comments.length) {\r\n                    comment = comments[cursor];\r\n                    if (comment.extendedRange[1] > node.range[0]) {\r\n                        break;\r\n                    }\r\n\r\n                    if (comment.extendedRange[1] === node.range[0]) {\r\n                        if (!node.leadingComments) {\r\n                            node.leadingComments = [];\r\n                        }\r\n                        node.leadingComments.push(comment);\r\n                        comments.splice(cursor, 1);\r\n                    } else {\r\n                        cursor += 1;\r\n                    }\r\n                }\r\n\r\n                // already out of owned node\r\n                if (cursor === comments.length) {\r\n                    return VisitorOption.Break;\r\n                }\r\n\r\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\r\n                    return VisitorOption.Skip;\r\n                }\r\n            }\r\n        });\r\n\r\n        cursor = 0;\r\n        traverse(tree, {\r\n            leave: function (node) {\r\n                var comment;\r\n\r\n                while (cursor < comments.length) {\r\n                    comment = comments[cursor];\r\n                    if (node.range[1] < comment.extendedRange[0]) {\r\n                        break;\r\n                    }\r\n\r\n                    if (node.range[1] === comment.extendedRange[0]) {\r\n                        if (!node.trailingComments) {\r\n                            node.trailingComments = [];\r\n                        }\r\n                        node.trailingComments.push(comment);\r\n                        comments.splice(cursor, 1);\r\n                    } else {\r\n                        cursor += 1;\r\n                    }\r\n                }\r\n\r\n                // already out of owned node\r\n                if (cursor === comments.length) {\r\n                    return VisitorOption.Break;\r\n                }\r\n\r\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\r\n                    return VisitorOption.Skip;\r\n                }\r\n            }\r\n        });\r\n\r\n        return tree;\r\n    }\r\n\r\n    exports.Syntax = Syntax;\r\n    exports.traverse = traverse;\r\n    exports.replace = replace;\r\n    exports.attachComments = attachComments;\r\n    exports.VisitorKeys = VisitorKeys;\r\n    exports.VisitorOption = VisitorOption;\r\n    exports.Controller = Controller;\r\n    exports.cloneEnvironment = function () { return clone({}); };\r\n\r\n    return exports;\r\n}(exports));\r\n/* vim: set sw=4 ts=4 et tw=80 : */\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}