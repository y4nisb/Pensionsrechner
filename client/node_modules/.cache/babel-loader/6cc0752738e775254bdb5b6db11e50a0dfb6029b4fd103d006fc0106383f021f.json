{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst {\n  filter,\n  FILTER_ACCEPT,\n  FILTER_REJECT,\n  FILTER_SKIP\n} = require(\"./helpers\");\nconst FIRST = false;\nconst LAST = true;\nconst NEXT = false;\nconst PREVIOUS = true;\nexports.implementation = class TreeWalkerImpl {\n  constructor(globalObject, args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.currentNode = this.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n    this._globalObject = globalObject;\n  }\n  get currentNode() {\n    return this._currentNode;\n  }\n  set currentNode(node) {\n    if (node === null) {\n      throw DOMException.create(this._globalObject, [\"Cannot set currentNode to null\", \"NotSupportedError\"]);\n    }\n    this._currentNode = node;\n  }\n  parentNode() {\n    let node = this._currentNode;\n    while (node !== null && node !== this.root) {\n      node = node.parentNode;\n      if (node !== null && filter(this, node) === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n    }\n    return null;\n  }\n  firstChild() {\n    return this._traverseChildren(FIRST);\n  }\n  lastChild() {\n    return this._traverseChildren(LAST);\n  }\n  previousSibling() {\n    return this._traverseSiblings(PREVIOUS);\n  }\n  nextSibling() {\n    return this._traverseSiblings(NEXT);\n  }\n  previousNode() {\n    let node = this._currentNode;\n    while (node !== this.root) {\n      let sibling = node.previousSibling;\n      while (sibling !== null) {\n        node = sibling;\n        let result = filter(this, node);\n        while (result !== FILTER_REJECT && node.hasChildNodes()) {\n          node = node.lastChild;\n          result = filter(this, node);\n        }\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n        sibling = node.previousSibling;\n      }\n      if (node === this.root || node.parentNode === null) {\n        return null;\n      }\n      node = node.parentNode;\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n    }\n    return null;\n  }\n  nextNode() {\n    let node = this._currentNode;\n    let result = FILTER_ACCEPT;\n    for (;;) {\n      while (result !== FILTER_REJECT && node.hasChildNodes()) {\n        node = node.firstChild;\n        result = filter(this, node);\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n      }\n      do {\n        if (node === this.root) {\n          return null;\n        }\n        const sibling = node.nextSibling;\n        if (sibling !== null) {\n          node = sibling;\n          break;\n        }\n        node = node.parentNode;\n      } while (node !== null);\n      if (node === null) {\n        return null;\n      }\n      result = filter(this, node);\n      if (result === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n    }\n  }\n  _traverseChildren(type) {\n    let node = this._currentNode;\n    node = type === FIRST ? node.firstChild : node.lastChild;\n    if (node === null) {\n      return null;\n    }\n    main: for (;;) {\n      const result = filter(this, node);\n      if (result === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n      if (result === FILTER_SKIP) {\n        const child = type === FIRST ? node.firstChild : node.lastChild;\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      for (;;) {\n        const sibling = type === FIRST ? node.nextSibling : node.previousSibling;\n        if (sibling !== null) {\n          node = sibling;\n          continue main;\n        }\n        const parent = node.parentNode;\n        if (parent === null || parent === this.root || parent === this._currentNode) {\n          return null;\n        }\n        node = parent;\n      }\n    }\n  }\n  _traverseSiblings(type) {\n    let node = this._currentNode;\n    if (node === this.root) {\n      return null;\n    }\n    for (;;) {\n      let sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n      while (sibling !== null) {\n        node = sibling;\n        const result = filter(this, node);\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n        sibling = type === NEXT ? node.firstChild : node.lastChild;\n        if (result === FILTER_REJECT || sibling === null) {\n          sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n        }\n      }\n      node = node.parentNode;\n      if (node === null || node === this.root) {\n        return null;\n      }\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["DOMException","require","filter","FILTER_ACCEPT","FILTER_REJECT","FILTER_SKIP","FIRST","LAST","NEXT","PREVIOUS","exports","implementation","TreeWalkerImpl","constructor","globalObject","args","privateData","_active","root","currentNode","whatToShow","_globalObject","_currentNode","node","create","parentNode","firstChild","_traverseChildren","lastChild","previousSibling","_traverseSiblings","nextSibling","previousNode","sibling","result","hasChildNodes","nextNode","type","main","child","parent"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/jsdom/lib/jsdom/living/traversal/TreeWalker-impl.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\r\nconst { filter, FILTER_ACCEPT, FILTER_REJECT, FILTER_SKIP } = require(\"./helpers\");\r\n\r\nconst FIRST = false;\r\nconst LAST = true;\r\nconst NEXT = false;\r\nconst PREVIOUS = true;\r\n\r\nexports.implementation = class TreeWalkerImpl {\r\n  constructor(globalObject, args, privateData) {\r\n    this._active = false;\r\n    this.root = privateData.root;\r\n    this.currentNode = this.root;\r\n    this.whatToShow = privateData.whatToShow;\r\n    this.filter = privateData.filter;\r\n\r\n    this._globalObject = globalObject;\r\n  }\r\n\r\n  get currentNode() {\r\n    return this._currentNode;\r\n  }\r\n\r\n  set currentNode(node) {\r\n    if (node === null) {\r\n      throw DOMException.create(this._globalObject, [\"Cannot set currentNode to null\", \"NotSupportedError\"]);\r\n    }\r\n\r\n    this._currentNode = node;\r\n  }\r\n\r\n  parentNode() {\r\n    let node = this._currentNode;\r\n    while (node !== null && node !== this.root) {\r\n      node = node.parentNode;\r\n\r\n      if (node !== null && filter(this, node) === FILTER_ACCEPT) {\r\n        return (this._currentNode = node);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  firstChild() {\r\n    return this._traverseChildren(FIRST);\r\n  }\r\n\r\n  lastChild() {\r\n    return this._traverseChildren(LAST);\r\n  }\r\n\r\n  previousSibling() {\r\n    return this._traverseSiblings(PREVIOUS);\r\n  }\r\n\r\n  nextSibling() {\r\n    return this._traverseSiblings(NEXT);\r\n  }\r\n\r\n  previousNode() {\r\n    let node = this._currentNode;\r\n\r\n    while (node !== this.root) {\r\n      let sibling = node.previousSibling;\r\n\r\n      while (sibling !== null) {\r\n        node = sibling;\r\n        let result = filter(this, node);\r\n\r\n        while (result !== FILTER_REJECT && node.hasChildNodes()) {\r\n          node = node.lastChild;\r\n          result = filter(this, node);\r\n        }\r\n\r\n        if (result === FILTER_ACCEPT) {\r\n          return (this._currentNode = node);\r\n        }\r\n\r\n        sibling = node.previousSibling;\r\n      }\r\n\r\n      if (node === this.root || node.parentNode === null) {\r\n        return null;\r\n      }\r\n\r\n      node = node.parentNode;\r\n\r\n      if (filter(this, node) === FILTER_ACCEPT) {\r\n        return (this._currentNode = node);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  nextNode() {\r\n    let node = this._currentNode;\r\n    let result = FILTER_ACCEPT;\r\n\r\n    for (;;) {\r\n      while (result !== FILTER_REJECT && node.hasChildNodes()) {\r\n        node = node.firstChild;\r\n        result = filter(this, node);\r\n        if (result === FILTER_ACCEPT) {\r\n          return (this._currentNode = node);\r\n        }\r\n      }\r\n\r\n      do {\r\n        if (node === this.root) {\r\n          return null;\r\n        }\r\n\r\n        const sibling = node.nextSibling;\r\n\r\n        if (sibling !== null) {\r\n          node = sibling;\r\n          break;\r\n        }\r\n\r\n        node = node.parentNode;\r\n      } while (node !== null);\r\n\r\n      if (node === null) {\r\n        return null;\r\n      }\r\n\r\n      result = filter(this, node);\r\n\r\n      if (result === FILTER_ACCEPT) {\r\n        return (this._currentNode = node);\r\n      }\r\n    }\r\n  }\r\n\r\n  _traverseChildren(type) {\r\n    let node = this._currentNode;\r\n    node = type === FIRST ? node.firstChild : node.lastChild;\r\n\r\n    if (node === null) {\r\n      return null;\r\n    }\r\n\r\n    main: for (;;) {\r\n      const result = filter(this, node);\r\n\r\n      if (result === FILTER_ACCEPT) {\r\n        return (this._currentNode = node);\r\n      }\r\n\r\n      if (result === FILTER_SKIP) {\r\n        const child = type === FIRST ? node.firstChild : node.lastChild;\r\n\r\n        if (child !== null) {\r\n          node = child;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      for (;;) {\r\n        const sibling = type === FIRST ? node.nextSibling : node.previousSibling;\r\n\r\n        if (sibling !== null) {\r\n          node = sibling;\r\n          continue main;\r\n        }\r\n\r\n        const parent = node.parentNode;\r\n\r\n        if (parent === null || parent === this.root || parent === this._currentNode) {\r\n          return null;\r\n        }\r\n\r\n        node = parent;\r\n      }\r\n    }\r\n  }\r\n\r\n  _traverseSiblings(type) {\r\n    let node = this._currentNode;\r\n\r\n    if (node === this.root) {\r\n      return null;\r\n    }\r\n\r\n    for (;;) {\r\n      let sibling = type === NEXT ? node.nextSibling : node.previousSibling;\r\n\r\n      while (sibling !== null) {\r\n        node = sibling;\r\n        const result = filter(this, node);\r\n\r\n        if (result === FILTER_ACCEPT) {\r\n          return (this._currentNode = node);\r\n        }\r\n\r\n        sibling = type === NEXT ? node.firstChild : node.lastChild;\r\n\r\n        if (result === FILTER_REJECT || sibling === null) {\r\n          sibling = type === NEXT ? node.nextSibling : node.previousSibling;\r\n        }\r\n      }\r\n\r\n      node = node.parentNode;\r\n\r\n      if (node === null || node === this.root) {\r\n        return null;\r\n      }\r\n\r\n      if (filter(this, node) === FILTER_ACCEPT) {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}