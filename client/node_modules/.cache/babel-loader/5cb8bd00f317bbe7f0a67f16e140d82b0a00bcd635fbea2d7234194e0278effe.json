{"ast":null,"code":"\"use strict\";\n\n// Actual implementation of the Performance class.\nconst clockIsAccurate = require(\"./clock-is-accurate\");\nconst calculateClockOffset = require(\"./calculate-clock-offset\");\nconst {\n  hrtime,\n  toMS\n} = require(\"./utils\");\nconst kTimeOrigin = Symbol(\"time origin\");\nconst kTimeOriginTimestamp = Symbol(\"time origin timestamp\");\nclass Performance {\n  constructor() {\n    // Time origin.\n    const timeOrigin = hrtime();\n    this[kTimeOrigin] = timeOrigin;\n    if (clockIsAccurate) {\n      // Let |t1| be the DOMHighResTimeStamp representing the high resolution Unix time at which the global monotonic\n      // clock is zero. This has to be calculated for every Performance object to account for clock drifts.\n      const t1 = calculateClockOffset();\n\n      // Let |t2| be the DOMHighResTimeStamp representing the high resolution time value of the global monotonic clock\n      // at global's time origin.\n      const t2 = toMS(timeOrigin);\n\n      // Return the sum of |t1| and |t2|.\n      this[kTimeOriginTimestamp] = t1 + t2;\n    } else {\n      // Clock isn't accurate enough. Use millisecond accuracy per spec.\n      const cur = Date.now();\n      this[kTimeOriginTimestamp] = cur;\n    }\n  }\n\n  // The timeOrigin getter actually returns the time origin timestamp, not the raw time origin.\n  get timeOrigin() {\n    return this[kTimeOriginTimestamp];\n  }\n  now() {\n    const diff = toMS(hrtime(this[kTimeOrigin]));\n    return clockIsAccurate ? diff : Math.round(diff);\n  }\n  toJSON() {\n    return {\n      timeOrigin: this.timeOrigin\n    };\n  }\n}\nmodule.exports = {\n  Performance\n};","map":{"version":3,"names":["clockIsAccurate","require","calculateClockOffset","hrtime","toMS","kTimeOrigin","Symbol","kTimeOriginTimestamp","Performance","constructor","timeOrigin","t1","t2","cur","Date","now","diff","Math","round","toJSON","module","exports"],"sources":["C:/Users/noodp/Documents/GitHub/Pensionsrechner/client/node_modules/w3c-hr-time/lib/performance.js"],"sourcesContent":["\"use strict\";\r\n\r\n// Actual implementation of the Performance class.\r\n\r\nconst clockIsAccurate = require(\"./clock-is-accurate\");\r\nconst calculateClockOffset = require(\"./calculate-clock-offset\");\r\nconst { hrtime, toMS } = require(\"./utils\");\r\n\r\nconst kTimeOrigin = Symbol(\"time origin\");\r\nconst kTimeOriginTimestamp = Symbol(\"time origin timestamp\");\r\n\r\nclass Performance {\r\n  constructor() {\r\n    // Time origin.\r\n    const timeOrigin = hrtime();\r\n    this[kTimeOrigin] = timeOrigin;\r\n\r\n    if (clockIsAccurate) {\r\n      // Let |t1| be the DOMHighResTimeStamp representing the high resolution Unix time at which the global monotonic\r\n      // clock is zero. This has to be calculated for every Performance object to account for clock drifts.\r\n      const t1 = calculateClockOffset();\r\n\r\n      // Let |t2| be the DOMHighResTimeStamp representing the high resolution time value of the global monotonic clock\r\n      // at global's time origin.\r\n      const t2 = toMS(timeOrigin);\r\n\r\n      // Return the sum of |t1| and |t2|.\r\n      this[kTimeOriginTimestamp] = t1 + t2;\r\n    } else {\r\n      // Clock isn't accurate enough. Use millisecond accuracy per spec.\r\n      const cur = Date.now();\r\n      this[kTimeOriginTimestamp] = cur;\r\n    }\r\n  }\r\n\r\n  // The timeOrigin getter actually returns the time origin timestamp, not the raw time origin.\r\n  get timeOrigin() {\r\n    return this[kTimeOriginTimestamp];\r\n  }\r\n\r\n  now() {\r\n    const diff = toMS(hrtime(this[kTimeOrigin]));\r\n    return clockIsAccurate ? diff : Math.round(diff);\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      timeOrigin: this.timeOrigin\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = { Performance };\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtD,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAChE,MAAM;EAAEE,MAAM;EAAEC;AAAK,CAAC,GAAGH,OAAO,CAAC,SAAS,CAAC;AAE3C,MAAMI,WAAW,GAAGC,MAAM,CAAC,aAAa,CAAC;AACzC,MAAMC,oBAAoB,GAAGD,MAAM,CAAC,uBAAuB,CAAC;AAE5D,MAAME,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ;IACA,MAAMC,UAAU,GAAGP,MAAM,EAAE;IAC3B,IAAI,CAACE,WAAW,CAAC,GAAGK,UAAU;IAE9B,IAAIV,eAAe,EAAE;MACnB;MACA;MACA,MAAMW,EAAE,GAAGT,oBAAoB,EAAE;;MAEjC;MACA;MACA,MAAMU,EAAE,GAAGR,IAAI,CAACM,UAAU,CAAC;;MAE3B;MACA,IAAI,CAACH,oBAAoB,CAAC,GAAGI,EAAE,GAAGC,EAAE;IACtC,CAAC,MAAM;MACL;MACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE;MACtB,IAAI,CAACR,oBAAoB,CAAC,GAAGM,GAAG;IAClC;EACF;;EAEA;EACA,IAAIH,UAAUA,CAAA,EAAG;IACf,OAAO,IAAI,CAACH,oBAAoB,CAAC;EACnC;EAEAQ,GAAGA,CAAA,EAAG;IACJ,MAAMC,IAAI,GAAGZ,IAAI,CAACD,MAAM,CAAC,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC;IAC5C,OAAOL,eAAe,GAAGgB,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC;EAClD;EAEAG,MAAMA,CAAA,EAAG;IACP,OAAO;MACLT,UAAU,EAAE,IAAI,CAACA;IACnB,CAAC;EACH;AACF;AAEAU,MAAM,CAACC,OAAO,GAAG;EAAEb;AAAY,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}